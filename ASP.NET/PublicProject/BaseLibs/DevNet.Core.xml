<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevNet.Core</name>
    </assembly>
    <members>
        <member name="T:DevNet.Permission.PermissionManager">
            <summary>
             权限管理类(所有异常都转换为DevNetException异常抛出,异常已写入日志)
            </summary>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetSysRolePermission(System.Int32,System.String,System.Int32)">
            <summary>
            获取管理员角色权限 SysRolePermission表[异常返回空列表]
            </summary>
            <param name="roleID">角色ID</param>
            <param name="ownerCode">系统角色所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.IsAllowSysRolePermission(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            管理员角色是否拥有某项权限 SysRolePermission表 [异常返回false]
            </summary>
            <param name="roleID">角色ID</param>
            <param name="permissionID">权限ID</param>
            <param name="ownerCode">系统角色所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.SaveSysRolePermission(System.Collections.Generic.List{DevNet.Permission.Entity.SysRolePermission},System.Int32,System.String,System.Int32)">
            <summary>
            保存管理员角色权限SysRolePermission表[异常抛出DevNetException]
            </summary>
            <param name="adminPers">管理员权限实体列表(如为null，则删除该管理员角色所有权限)</param>
            <param name="roleID">角色ID</param>
            <param name="ownerCode">系统角色所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetUserGroupPermission(System.Int32,System.String,System.Int32)">
            <summary>
            获取用户组权限UserGroupPermission表[异常返回空列表]
            </summary>
            <param name="groupID">用户组ID</param>
            <param name="ownerCode">用户组所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.IsAllowUserGroupPermission(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            用户组是否拥有某项权限UserGroupPermission表[异常返回false]
            </summary>
            <param name="groupID">用户组ID</param>
            <param name="permissionID">权限ID</param>
            <param name="ownerCode">用户组所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.SaveUserGroupPermission(System.Collections.Generic.List{DevNet.Permission.Entity.UserGroupPermission},System.Int32,System.String,System.Int32)">
            <summary>
            保存用户组权限UserGroupPermission表[异常抛出DevNetException]
            </summary>
            <param name="adminPers">用户组权限实体列表(如为null，则删除该用户组所有权限)</param>
            <param name="groupID">用户组ID</param>
            <param name="ownerCode">用户组所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetSysRoleList(System.String,System.Int32)">
            <summary>
            获取管理员角色信息SysRole表[异常返回空列表]
            </summary>
            <param name="ownerCode">系统角色所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.SaveSysRole(DevNet.Permission.Entity.SysRole)">
            <summary>
            保存管理员角色SysRole表[异常抛出DevNetException，如已存在同名角色，抛出该管理员角色已经存在异常]
            </summary>
            <param name="sysRole">角色实体</param>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.DeleteSysRole(System.Int32,System.String,System.Int32)">
            <summary>
            删除管理员角色DeleteRole[异常抛出DevNetException，内置管理员角色不能删除，抛出异常]
            </summary>
            <param name="roleID">角色ID</param>
            <param name="ownerCode">系统角色所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetUserGroupList(System.String,System.Int32)">
            <summary>
            获取用户组信息UserGroup表[异常返回空列表]
            </summary>
            <param name="ownerCode">用户组所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.SaveUserGroup(DevNet.Permission.Entity.UserGroup)">
            <summary>
            保存用户组信息UserGroup表[异常抛出DevNetException，该用户组已经存在抛出异常]
            </summary>
            <param name="userGroup">用户组实体</param>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.DeleteUserGroup(System.Int32,System.String,System.Int32)">
            <summary>
            删除用户组信息UserGroup表[异常抛出DevNetException，内置用户组不能删除，抛出异常]
            </summary>
            <param name="groupID">角色ID</param>
            <param name="ownerCode">用户组所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetPermissionByParentID(System.Int32,System.Int32,System.Int32,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
             获取权限信息,Permission表，[异常返回空列表]
            </summary>
            <param name="perParentID">父权限ID</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <param name="isShow">是否在管理中显示(1 显示 0 不显示  2 全部)</param>
            <param name="sortEnum">按DisplayIndex的排序方向</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetPermissionList(System.Int32)">
            <summary>
            获取所有权限信息列表Permission表[异常返回空列表]
            </summary>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetPermissionData(System.Int32)">
            <summary>
            获取所有权限信息表Permission表[异常返回空表]
            </summary>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetPermissionList(System.Int32,System.Int32)">
            <summary>
            获取所有权限信息列表Permission表[异常返回空列表]
            </summary>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <param name="isShow">是否显示2全部</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetPermissionData(System.Int32,System.Int32)">
            <summary>
            获取所有权限信息表Permission表[异常返回空表]
            </summary>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <param name="isShow">是否显示2全部</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetPermissionByParentID(System.Int32,System.String,System.Int32,System.Int32,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
             获取权限信息,Permission表，[异常返回空列表]
            </summary>
            <param name="perParentID">父权限ID</param>
            <param name="ownerCode">模块所有者编号【譬如××分站点】</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <param name="isShow">是否在管理中显示(1 显示 0 不显示  2 全部)</param>
            <param name="sortEnum">按DisplayIndex的排序方向</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetPermissionList(System.String,System.Int32)">
            <summary>
            获取所有权限信息列表Permission表[异常返回空列表]
            </summary>
            <param name="ownerCode">模块所有者编号【譬如××分站点】</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetPermissionData(System.String,System.Int32)">
            <summary>
            获取所有权限信息表Permission表[异常返回空表]
            </summary>
            <param name="ownerCode">模块所有者编号【譬如××分站点】</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetPermissionList(System.String,System.Int32,System.Int32)">
            <summary>
            获取所有权限信息列表Permission表[异常返回空列表]
            </summary>
            <param name="ownerCode">模块所有者编号【譬如××分站点】</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <param name="isShow">是否显示2全部</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetPermissionData(System.String,System.Int32,System.Int32)">
            <summary>
            获取所有权限信息表Permission表[异常返回空表]
            </summary>
            <param name="ownerCode">模块所有者编号【譬如××分站点】</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <param name="isShow">是否显示2全部</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetSingleSysRole(System.Int32,System.String,System.Int32)">
            <summary>
            获取单条管理员角色SysRole表[异常返回nul]
            </summary>
            <param name="roleID">角色ID</param>
            <param name="ownerCode">系统角色所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetSingleUserGroup(System.Int32,System.String,System.Int32)">
            <summary>
            获取单条用户组UserGroup表[异常返回null]
            </summary>
            <param name="groupID">用户组ID</param>
            <param name="ownerCode">用户组所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetSinglePermission(System.Int32)">
            <summary>
            获取单条权限菜单实体
            </summary>
            <param name="permissionID"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.SaveOwnerPermission(System.Collections.Generic.List{DevNet.Permission.Entity.OwnerPermission},System.String,System.Int32)">
            <summary>
            保存所有者权限OwnerPermission表[异常抛出DevNetException]
            </summary>
            <param name="ownerPermis">所有者权限实体列表(如为null，则删除该所有者所有权限)</param>
            <param name="ownerCode">系统角色所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.GetOwnerPermission(System.String,System.Int32)">
            <summary>
            获取所有者权限 OwnerPermission表[异常返回空列表]
            </summary>
            <param name="ownerCode">系统角色所有者编号</param>
            <param name="owner">所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.PermissionManager.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:DevNet.Permission.PermissionManager.DBCon">
            <summary>
            数据连接对象[可重写]
            </summary>
        </member>
        <member name="P:DevNet.Permission.PermissionManager.Script">
            <summary>
            脚本查询对象[可重写]
            </summary>
        </member>
        <member name="T:DevNet.Permission.InterceptorAction">
            <summary>
            拦截动作
            </summary>
        </member>
        <member name="F:DevNet.Permission.InterceptorAction.Demand">
            <summary>
            要求拦截认证
            </summary>
        </member>
        <member name="T:DevNet.Logger.LoggManager">
            <summary>
            日志管理工厂类
            </summary>
        </member>
        <member name="M:DevNet.Logger.LoggManager.GetFileLogger(System.String)">
            <summary>
            获取写入日志文件类
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SR.DataTypes">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;
            &lt;DocumentElement&gt;
              &lt;DataTypes&gt;
                &lt;TypeName&gt;smallint&lt;/TypeName&gt;
                &lt;ProviderDbType&gt;10&lt;/ProviderDbType&gt;
                &lt;ColumnSize&gt;5&lt;/ColumnSize&gt;
                &lt;DataType&gt;System.Int16&lt;/DataType&gt;
                &lt;CreateFormat&gt;smallint&lt;/CreateFormat&gt;
                &lt;IsAutoIncrementable&gt;false&lt;/IsAutoIncrementable&gt;
                &lt;IsCaseSensitive&gt;false&lt;/IsCaseSensitive&gt;
                &lt;IsFixedLength&gt;true&lt;/IsFixedLength&gt;
                &lt;IsFixedPrecisionScale&gt;true&lt;/IsFixedPrecisionScale&gt;
                &lt;IsLong&gt;false&lt;/IsLong&gt;
                &lt;IsNullable&gt;true&lt;/ [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SR.Keywords">
            <summary>
              Looks up a localized string similar to ALL,ALTER,AND,AS,AUTOINCREMENT,BETWEEN,BY,CASE,CHECK,COLLATE,COMMIT,CONSTRAINT,CREATE,CROSS,DEFAULT,DEFERRABLE,DELETE,DISTINCT,DROP,ELSE,ESCAPE,EXCEPT,FOREIGN,FROM,FULL,GROUP,HAVING,IN,INDEX,INNER,INSERT,INTERSECT,INTO,IS,ISNULL,JOIN,LEFT,LIMIT,NATURAL,NOT,NOTNULL,NULL,ON,OR,ORDER,OUTER,PRIMARY,REFERENCES,RIGHT,ROLLBACK,SELECT,SET,TABLE,THEN,TO,TRANSACTION,UNION,UNIQUE,UPDATE,USING,VALUES,WHEN,WHERE.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SR.MetaDataCollections">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;DocumentElement&gt;
              &lt;MetaDataCollections&gt;
                &lt;CollectionName&gt;MetaDataCollections&lt;/CollectionName&gt;
                &lt;NumberOfRestrictions&gt;0&lt;/NumberOfRestrictions&gt;
                &lt;NumberOfIdentifierParts&gt;0&lt;/NumberOfIdentifierParts&gt;
              &lt;/MetaDataCollections&gt;
              &lt;MetaDataCollections&gt;
                &lt;CollectionName&gt;DataSourceInformation&lt;/CollectionName&gt;
                &lt;NumberOfRestrictions&gt;0&lt;/NumberOfRestrictions&gt;
                &lt;NumberOfIdentifierParts&gt;0&lt;/NumberOfIdentifierParts&gt;
              &lt;/MetaDataCollections&gt;
              &lt;MetaDataC [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:DevNet.DBAccess.IDataAccess">
            <summary>
            数据访问接口 提供基本的数据操作方法
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.BeginTrans">
            <summary>
            开始事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.CommitTrans">
            <summary>
            提交事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.RollBackTrans">
            <summary>
            回滚事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetSingle``1(System.String[],System.Object[])">
            <summary>
            获取一条记录实体 默认条件“=” 不存在返回null  【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetSingle``1(System.String,System.Object)">
            <summary>
            获取一条记录实体 默认条件“=” 不存在返回null  【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetSingle``1(System.Object[])">
            <summary>
            获取一条记录实体,不存在返回null  【可重写】
            </summary>
            <param name="ids">主键值参数(默认使用主键字段" = "匹配)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetSingle``1(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetSingle``1(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetSingle``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取一条记录实体 不存在返回null[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetSingle``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetTopList``1(System.Int32,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetTopList``1(System.Int32,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetTopList``1(System.Int32,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldNames">条件字段名称</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetList``1(System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段记录集合[可重写]
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段记录集合[可重写]
            </summary>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetList``1(System.String,System.Object)">
            <summary>
            获取实体记录集合[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetList``1(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取实体记录集合[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetList``1(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合【重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetList``1(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录实体集合[可重写]
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetList``1">
            <summary>
            获取所有记录实体集合  【可重写】
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetList``1(System.String[],System.Object[])">
            <summary>
            获取实体记录集合 默认“=” 【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetPageList``1(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取实体集合[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetPageList``1(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取实体  【可重写】
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Insert``1(``0,System.String[])">
            <summary>
            插入一条记录(默认排除自动增长型字段，插入成功后自动设置自增长型字段)  【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">插入需排除的字段(譬如自增长型字段)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Insert``1(``0)">
            <summary>
            插入一条记录(默认排除自动增长型字段，插入成功后自动设置自增长型字段)  【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Update``1(``0,System.String[],System.Object[])">
            <summary>
            更新一条记录【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldNames">更新条件字段集合(请指定为主键字段)</param>
            <param name="conditionFieldValues">更新条件字段值集合(请指定为主键字段的原始值)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Update``1(``0,System.String,System.Object)">
            <summary>
            更新一条记录【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldName">更新条件字段(请指定为主键字段)</param>
            <param name="conditionFieldValue">更新条件字段值(请指定为主键字段的原始值)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Update``1(``0,System.String[],System.Object[],System.String[])">
            <summary>
            更新一条记录【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldNames">更新条件字段(请指定为主键字段)</param>
            <param name="conditionFieldValues">更新条件字段值(请指定为主键字段的原始值)</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Update``1(``0,System.String,System.Object,System.String[])">
            <summary>
            更新一条记录【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldName">更新条件字段(请指定为主键字段)</param>
            <param name="conditionFieldValue">更新条件字段值(请指定为主键字段的原始值)</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Update``1(``0,System.String[])">
            <summary>
            更新一条记录(默认移除主键字段)  【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Update(System.String[],System.Object[],System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            更新符合条件的记录的指定字段[可重写]
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="conditionFieldName">更新记录的条件字段</param>
            <param name="conditionFieldValue">更新记录的条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新符合条件的记录的指定字段[可重写]
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="conditionFieldName">更新记录的条件字段</param>
            <param name="conditionFieldValue">更新记录的条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Update``1(``0)">
            <summary>
            更新一条记录(默认移除主键字段)  【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Update(System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新单条记录的指定字段
            </summary>
            <param name="fieldName">更新的字段</param>
            <param name="fieldValue">对应字段的值</param>
            <param name="conditionFieldName">更新条件字段集合</param>
            <param name="conditionFieldValue">更新记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Update(System.Data.DataTable)">
            <summary>
            更新数据表
            </summary>
            <param name="table">DataTable数据表</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Delete(System.String[],System.Object[])">
            <summary>
            删除符合条件的记录  默认条件“=”  【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Delete(System.String,System.Object)">
            <summary>
            删除符合条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.Delete(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除符合条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetMaxValue``1(System.String)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetMaxValue``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">t条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetMaxValue``1(System.String,System.String,System.Object)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetMaxValue``1(System.String,System.String[],System.Object[])">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetMaxNext(System.String)">
            <summary>
            获取int型字段的最大值+1  【可重写】
            </summary>
            <param name="intTypeField">int型字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRecordCount(System.String,System.Object)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRecordCount(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRecordCount(System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="fieldNames">条件字段名</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.IsExists(System.String,System.Object)">
            <summary>
            数据表中是否存在满足指定条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.IsExists(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            数据表中是否存在满足指定条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.IsExists(System.String[],System.Object[])">
            <summary>
            数据表中是否存在满足指定条件的记录【可重写】
            </summary>
            <param name="fieldNames">条件字段集合</param>
            <param name="fieldValues">条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.CheckRecord(System.String,System.Object,System.String[],System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="primaryKeyFields">主键字段集合</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.CheckRecord(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String[],System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="primaryKeyFields">主键字段集合</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetTable">
            <summary>
            获取所有记录的数据表[可重写]
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetTable(System.String,System.Object)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetTable(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetTable(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetTable(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录数据表【可重写】
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetTable(System.String[],System.Object[])">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetScalar``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetScalar``1(System.String,System.String,System.Object)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetScalar``1(System.String,System.String[],System.Object[])">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetPageTable(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取数据表[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetPageTable(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取数据表[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.IsExistsRelation``1(System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.IsExistsRelation``1(System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.IsExistsRelation(System.String,System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.IsExistsRelation(System.String,System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationList``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationList``1(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationList``1(System.String,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationList``1(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationList``1(System.String,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationList``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationList``1(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationList``1(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationList``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationList``1(System.String,System.Object)">
            <summary>
            加载关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.InsertRelationEntity``1(``0,System.String[])">
            <summary>
            插入关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <param name="exCludeFields">插入需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.InsertRelationEntity``1(``0)">
            <summary>
            插入关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.UpdateRelationEntity``1(System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.UpdateRelationEntity``1(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.UpdateRelationEntity``1(``0,System.String[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <param name="exCludeFields">更新需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.UpdateRelationEntity``1(``0)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.UpdateRelationEntity``1(System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.UpdateRelationEntity``1(System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.UpdateRelationEntity(System.String,System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.UpdateRelationEntity(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.DeleteRelationEntity``1(System.String,System.Object)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.DeleteRelationEntity``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.DeleteRelationEntity(System.String,System.String,System.Object)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.DeleteRelationEntity(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.DeleteRelationEntity``1(System.String[],System.Object[])">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldNames">关系键字段名称</param>
            <param name="fieldValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.DeleteRelationEntity(System.String,System.String[],System.Object[])">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">关系键字段名称</param>
            <param name="fieldValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.CheckRelationRecord(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            数据表中指定关系键值的记录是否满足指定的比较值
            </summary>
            <param name="tableName">关系表名</param>
            <param name="fieldName">比较的字段</param>
            <param name="fieldValue">比较的字段值</param>
            <param name="relationKeyName">关系字段</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.CheckRelationRecord(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,System.Object)">
            <summary>
            数据表中指定关系键值的记录是否满足指定的比较值
            </summary>
            <param name="tableName">关系表名</param>
            <param name="fieldName">比较的字段</param>
            <param name="fieldValue">比较的字段值</param>
            <param name="compareEnum">比较的枚举</param>
            <param name="relationKeyName">关系字段</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationTable(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationTable(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationTable(System.String,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationTable(System.String,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationScalar``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationScalar``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationScalar``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationSingle``1(System.String,System.String,System.Object)">
            <summary>
            获取一条关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationSingle``1(System.String,System.Object)">
            <summary>
            加载一条关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationSingle``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationSingle``1(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationMaxValue``1(System.String,System.String)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName"> 数据表名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationMaxValue``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationRecordCount(System.String,System.String,System.Object)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationRecordCount(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.IDataAccess.GetRelationRecordCount(System.String,System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldNames">条件字段名</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="P:DevNet.DBAccess.IDataAccess.TableName">
            <summary>
            操作的数据表名
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.IDataAccess.KeepConnection">
            <summary>
            在该类执行范围内是否保持数据库连接状态
            【如设置为true，请使用using代码块或显式调用Dispose()释放资源】
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.IDataAccess.DBCon">
            <summary>
            获取或设置数据连接对象[可重写]
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.IDataAccess.Script">
            <summary>
            获取ScriptQuery查询类【该类使用参数模式封装了sql语句，提供简单的数据帮助方法】[可重写]
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.IDataAccess.Mapper">
            <summary>
            数据映射对象[可重写]
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.IDataAccess.BeforeInsert">
            <summary>
            Insert前事件
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.IDataAccess.AfterInsert">
            <summary>
            Insert后事件
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.IDataAccess.BeforeUpdate">
            <summary>
            Update前事件
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.IDataAccess.AfterUpdate">
            <summary>
            Update后事件
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.IDataAccess.BeforeDelete">
            <summary>
            Delete前事件
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.IDataAccess.AfterDelete">
            <summary>
            Delete后事件
            </summary>
        </member>
        <member name="T:DevNet.Permission.Entity.UserGroup">
            <summary>
            表 UserGroup 用户组的实体类
            </summary>
        </member>
        <member name="T:DevNet.Entity.EntityBase">
            <summary>
            实体基类
            </summary>
        </member>
        <member name="T:DevNet.Entity.IEntityBase">
            <summary>
            实体类接口
            </summary>
        </member>
        <member name="P:DevNet.Entity.IEntityBase.TableName">
            <summary>
            实体对应的数据表名称
            </summary>
        </member>
        <member name="P:DevNet.Entity.IEntityBase.PrimaryKeyFields">
            <summary>
            主键字段集合  
            </summary>
        </member>
        <member name="P:DevNet.Entity.IEntityBase.AutoIncrements">
            <summary> 
            自增长型字段名称
            </summary>
        </member>
        <member name="F:DevNet.Entity.EntityBase._fieldNames">
            <summary>
            为了兼容4.2.1.35以前版本的实体，建议获取该数组前先执行checkFieldNames方法检查实体是否初始化
            </summary>
        </member>
        <member name="M:DevNet.Entity.EntityBase.#ctor">
            <summary>
            构造函数，初始化变量
            </summary>
        </member>
        <member name="M:DevNet.Entity.EntityBase.IniMember(System.String[],System.Object[])">
            <summary>
            初始化变量，由于WCF中的DataContract序列化不调用构造函数，子类可以调用该方法解决变量初始化问题
            </summary>
        </member>
        <member name="M:DevNet.Entity.EntityBase.AccecptChange">
            <summary>
            提交更改
            </summary>
        </member>
        <member name="M:DevNet.Entity.EntityBase.RejectChange">
            <summary>
            撤销自上次AcceptChange后的所有更改
            </summary>
        </member>
        <member name="M:DevNet.Entity.EntityBase.Import(DevNet.Entity.EntityBase)">
            <summary>
            导入实体数据，只导入字段名称相同的属性值，不导入自增型字段
            </summary>
            <param name="entity">EntityBase派生类实体</param>
        </member>
        <member name="M:DevNet.Entity.EntityBase.Import(System.Data.DataRow)">
            <summary>
            导入实体数据，只导入字段名称相同的属性值，不导入自增型字段
            </summary>
            <param name="dataRow"></param>
        </member>
        <member name="M:DevNet.Entity.EntityBase.ImportObj``1(``0)">
            <summary>
            导入实体数据，使用反射，只导入字段名称相同的属性值，不导入自增型字段
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="objEntity">实体类对象</param>
        </member>
        <member name="M:DevNet.Entity.EntityBase.AddProperty(System.String,System.Object)">
            <summary>
            添加实体属性，不存在字段名的属性自动增加，请在构造函数之后或子类的构造函数后随即调用该方法，如已经调用IniMember方法或者对该实体属性进行了Get和Set方法，则不能再调用该方法，否则引发异常
            </summary>
            <param name="fieldName">字段名称，请与数据表字段名称相同</param>
            <param name="fieldValue">属性值</param>
        </member>
        <member name="M:DevNet.Entity.EntityBase.Contains(System.String)">
            <summary>
            该实体是否已包含指定的字段
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.EntityBase.SetProperty(System.String,System.Object)">
            <summary>
            设置属性值【引发PropertySetted事件】,如不包含该字段名称，则抛异常
            </summary>
            <param name="fieldName">字段名称，请与数据表字段名称相同</param>
            <param name="fieldValue">属性值</param>
        </member>
        <member name="M:DevNet.Entity.EntityBase.GetProperty(System.String)">
            <summary>
            获取属性值，不存在字段名的属性引发异常【引发PropertyGetting事件】
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.EntityBase.GetProperty``1(System.String)">
            <summary>
            获取属性值，不存在字段名的属性或类型转换失败引发异常【引发PropertyGetting事件】
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.EntityBase.OnPropertyGetting(System.Object,System.String)">
            <summary>
            获取属性值时触发的事件[可重写]
            </summary>
            <param name="sender"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:DevNet.Entity.EntityBase.OnPropertySetted(System.Object,System.String)">
            <summary>
            设置属性值后触发的事件[可重写]
            </summary>
            <param name="sender"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:DevNet.Entity.EntityBase.SetPropertyValue(System.String,System.Object)">
            <summary>
            设置属性值，不存在该属性名则返回
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:DevNet.Entity.EntityBase.getFieldNameIndex(System.String)">
            <summary>
            获取字段所在的索引
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.EntityBase.checkFieldNames">
            <summary>
            为了兼容以前版本的实体AddProperty方法加入该方法检查初始化信息
            </summary>
        </member>
        <member name="M:DevNet.Entity.EntityBase.Clone">
            <summary>
            克隆类的新实例 [可重写.NET2.0重写成(Activator.CreateInstance(this.GetType());)]
            </summary>
            <returns></returns>
        </member>
        <member name="E:DevNet.Entity.EntityBase.PropertyGettingEvent">
            <summary>
            获取属性值时触发的事件
            </summary>
        </member>
        <member name="E:DevNet.Entity.EntityBase.PropertySettedEvent">
            <summary>
            设置属性值后时触发的事件(属性值更改后)
            </summary>
        </member>
        <member name="P:DevNet.Entity.EntityBase.TableName">
            <summary>
            实体对应的数据表名称
            </summary>
        </member>
        <member name="P:DevNet.Entity.EntityBase.PrimaryKeyFields">
            <summary>
            主键字段集合  
            </summary>
        </member>
        <member name="P:DevNet.Entity.EntityBase.AutoIncrements">
            <summary> 
            自增长型字段名称
            </summary>
        </member>
        <member name="P:DevNet.Entity.EntityBase.AllowRejectChange">
            <summary>
            允许撤消更改属性值，默认false
            </summary>
        </member>
        <member name="P:DevNet.Entity.EntityBase.Item(System.Int32)">
            <summary>
            获取或设置指定索引的字段的值
            </summary>
            <param name="index">字段索引</param>
            <returns></returns>
        </member>
        <member name="P:DevNet.Entity.EntityBase.Item(System.String)">
            <summary>
            获取或设置指定字段的值
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroup.UserGroup_TableName">
            <summary>
             表 UserGroup 数据表名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroup.AutoIncrement">
            <summary>
             表 UserGroup 自动增长型字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroup.GroupID_FieldName">
            <summary>
            GroupID 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroup.GroupName_FieldName">
            <summary>
            用户组名 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroup.GroupMemo_FieldName">
            <summary>
            用户组说明 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroup.GroupState_FieldName">
            <summary>
            用户组状态 1正常  2禁用 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroup.IsInnerGroup_FieldName">
            <summary>
            是否内置用户组 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroup.OwnerCode_FieldName">
            <summary>
            用户组所有者编号 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroup.Owner_FieldName">
            <summary>
            用户组所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......） 字段名称
            </summary>
        </member>
        <member name="M:DevNet.Permission.Entity.UserGroup.#ctor">
            <summary>
            用户组构造函数
            </summary>
        </member>
        <member name="M:DevNet.Permission.Entity.UserGroup.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化时调用该方法，由于WCF的DataContract序列化不调用构造函数，由该方法初始化成员变量
            </summary>
            <param name="context"></param>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroup.PrimaryKeyField">
            <summary>
             表 UserGroup 主键字段集合
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.UserGroup.GroupID">
            <summary>
            GroupID 列自动增长型
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.UserGroup.GroupName">
            <summary>
            用户组名 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.UserGroup.GroupMemo">
            <summary>
            用户组说明 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.UserGroup.GroupState">
            <summary>
            用户组状态 1正常  2禁用 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.UserGroup.IsInnerGroup">
            <summary>
            是否内置用户组 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.UserGroup.OwnerCode">
            <summary>
            用户组所有者编号 列默认-1
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.UserGroup.Owner">
            <summary>
            用户组所属后台系统默认1（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......） 列
            </summary>
        </member>
        <member name="T:DevNet.Logger.Log">
            <summary>
            简单日志类，静态方法。 AppConfig配置日志文件路径"Log"值[key="Log" value="Log"]
            </summary>
        </member>
        <member name="F:DevNet.Logger.Log.ILog">
            <summary>
            日志接口对象，外部可以设置实现ILogger接口的类
            </summary>
        </member>
        <member name="M:DevNet.Logger.Log.Error(System.String)">
            <summary>
            写Error错误
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:DevNet.Logger.Log.Error(System.String,System.Exception)">
            <summary>
            写Error错误
            </summary>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="M:DevNet.Logger.Log.Info(System.String)">
            <summary>
            写Info错误
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:DevNet.Logger.Log.Info(System.String,System.Exception)">
            <summary>
            写Info错误
            </summary>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="M:DevNet.Logger.Log.Warning(System.String)">
            <summary>
            写Warning错误
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:DevNet.Logger.Log.Warning(System.String,System.Exception)">
            <summary>
            写Warning错误
            </summary>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement">
            <summary>
            Represents a single SQL statement in SQLite.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement._sql">
            <summary>
            The underlying SQLite object this statement is bound to
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement._sqlStatement">
            <summary>
            The command text of this SQL statement
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement._sqlite_stmt">
            <summary>
            The actual statement pointer
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement._unnamedParameters">
            <summary>
            An index from which unnamed parameters begin
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement._paramNames">
            <summary>
            Names of the parameters as SQLite understands them to be
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement._paramValues">
            <summary>
            Parameters for this statement
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement._command">
            <summary>
            Command this statement belongs to (if any)
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement.#ctor(DevNet.DBAccess.SQLiteDBAccess.SQLiteBase,DevNet.DBAccess.SQLiteDBAccess.SQLiteStatementHandle,System.String,DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement)">
            <summary>
            Initializes the statement and attempts to get all information about parameters in the statement
            </summary>
            <param name="sqlbase">The base SQLite object</param>
            <param name="stmt">The statement</param>
            <param name="strCommand">The command text for this statement</param>
            <param name="previous">The previous command in a multi-statement command</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement.Dispose">
            <summary>
            Disposes and finalizes the statement
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement.MapParameter(System.String,DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter)">
            <summary>
            Called by SQLiteParameterCollection, this function determines if the specified parameter name belongs to
            this statement, and if so, keeps a reference to the parameter so it can be bound later.
            </summary>
            <param name="s">The parameter name to map</param>
            <param name="p">The parameter to assign it</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement.BindParameters">
            <summary>
             Bind all parameters, making sure the caller didn't miss any
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement.ToBoolean(System.Object,System.IFormatProvider)">
            <summary>
            Attempts to convert an arbitrary object to the Boolean data type.
            Null object values are converted to false.  Throws a SQLiteException
            upon failure.
            </summary>
            <param name="obj">The object value to convert.</param>
            <param name="provider">The format provider to use.</param>
            <returns>The converted boolean value.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement.BindParameter(System.Int32,DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter)">
            <summary>
            Perform the bind operation for an individual parameter
            </summary>
            <param name="index">The index of the parameter to bind</param>
            <param name="param">The parameter we're binding</param>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase">
            <summary>
            This internal class provides the foundation of SQLite support.  It defines all the abstract members needed to implement
            a SQLite data provider, and inherits from SQLiteConvert which allows for simple translations of string to and from SQLite.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert">
            <summary>
            This base class provides datatype conversion services for the SQLite provider.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.FullFormat">
            <summary>
            The format string for DateTime values when using the InvariantCulture or CurrentCulture formats.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.UnixEpoch">
            <summary>
            The value for the Unix epoch (e.g. January 1, 1970 at midnight, in UTC).
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.OleAutomationEpochAsJulianDay">
            <summary>
            The value of the OLE Automation epoch represented as a Julian day.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert._datetimeFormats">
            <summary>
            An array of ISO8601 datetime formats we support conversion from
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert._utf8">
            <summary>
            An UTF-8 Encoding instance, so we can convert strings to and from UTF-8
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert._datetimeFormat">
            <summary>
            The default DateTime format for this instance
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert._datetimeKind">
            <summary>
            The default DateTimeKind for this instance.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.#ctor(DevNet.DBAccess.SQLiteDBAccess.SQLiteDateFormats,System.DateTimeKind)">
            <summary>
            Initializes the conversion class
            </summary>
            <param name="fmt">The default date/time format to use for this instance</param>
            <param name="kind">The DateTimeKind to use.</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.ToUTF8(System.String)">
            <summary>
            Converts a string to a UTF-8 encoded byte array sized to include a null-terminating character.
            </summary>
            <param name="sourceText">The string to convert to UTF-8</param>
            <returns>A byte array containing the converted string plus an extra 0 terminating byte at the end of the array.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.ToUTF8(System.DateTime)">
            <summary>
            Convert a DateTime to a UTF-8 encoded, zero-terminated byte array.
            </summary>
            <remarks>
            This function is a convenience function, which first calls ToString() on the DateTime, and then calls ToUTF8() with the
            string result.
            </remarks>
            <param name="dateTimeValue">The DateTime to convert.</param>
            <returns>The UTF-8 encoded string, including a 0 terminating byte at the end of the array.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.ToString(System.IntPtr,System.Int32)">
            <summary>
            Converts a UTF-8 encoded IntPtr of the specified length into a .NET string
            </summary>
            <param name="nativestring">The pointer to the memory where the UTF-8 string is encoded</param>
            <param name="nativestringlen">The number of bytes to decode</param>
            <returns>A string containing the translated character(s)</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.UTF8ToString(System.IntPtr,System.Int32)">
            <summary>
            Converts a UTF-8 encoded IntPtr of the specified length into a .NET string
            </summary>
            <param name="nativestring">The pointer to the memory where the UTF-8 string is encoded</param>
            <param name="nativestringlen">The number of bytes to decode</param>
            <returns>A string containing the translated character(s)</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.ToDateTime(System.String)">
            <summary>
            Converts a string into a DateTime, using the current DateTimeFormat specified for the connection when it was opened.
            </summary>
            <remarks>
            Acceptable ISO8601 DateTime formats are:
            <list type="bullet">
            <item><description>THHmmssK</description></item>
            <item><description>THHmmK</description></item>
            <item><description>HH:mm:ss.FFFFFFFK</description></item>
            <item><description>HH:mm:ssK</description></item>
            <item><description>HH:mmK</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss.FFFFFFFK</description></item>
            <item><description>yyyy-MM-dd HH:mm:ssK</description></item>
            <item><description>yyyy-MM-dd HH:mmK</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss.FFFFFFFK</description></item>
            <item><description>yyyy-MM-ddTHH:mmK</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ssK</description></item>
            <item><description>yyyyMMddHHmmssK</description></item>
            <item><description>yyyyMMddHHmmK</description></item>
            <item><description>yyyyMMddTHHmmssFFFFFFFK</description></item>
            <item><description>THHmmss</description></item>
            <item><description>THHmm</description></item>
            <item><description>HH:mm:ss.FFFFFFF</description></item>
            <item><description>HH:mm:ss</description></item>
            <item><description>HH:mm</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss.FFFFFFF</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss</description></item>
            <item><description>yyyy-MM-dd HH:mm</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss.FFFFFFF</description></item>
            <item><description>yyyy-MM-ddTHH:mm</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss</description></item>
            <item><description>yyyyMMddHHmmss</description></item>
            <item><description>yyyyMMddHHmm</description></item>
            <item><description>yyyyMMddTHHmmssFFFFFFF</description></item>
            <item><description>yyyy-MM-dd</description></item>
            <item><description>yyyyMMdd</description></item>
            <item><description>yy-MM-dd</description></item>
            </list>
            If the string cannot be matched to one of the above formats, an exception will be thrown.
            </remarks>
            <param name="dateText">The string containing either a long integer number of 100-nanosecond units since
            System.DateTime.MinValue, a Julian day double, an integer number of seconds since the Unix epoch, a
            culture-independent formatted date and time string, a formatted date and time string in the current
            culture, or an ISO8601-format string.</param>
            <returns>A DateTime value</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.ToDateTime(System.String,DevNet.DBAccess.SQLiteDBAccess.SQLiteDateFormats,System.DateTimeKind)">
            <summary>
            Converts a string into a DateTime, using the specified DateTimeFormat and DateTimeKind.
            </summary>
            <remarks>
            Acceptable ISO8601 DateTime formats are:
            <list type="bullet">
            <item><description>THHmmssK</description></item>
            <item><description>THHmmK</description></item>
            <item><description>HH:mm:ss.FFFFFFFK</description></item>
            <item><description>HH:mm:ssK</description></item>
            <item><description>HH:mmK</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss.FFFFFFFK</description></item>
            <item><description>yyyy-MM-dd HH:mm:ssK</description></item>
            <item><description>yyyy-MM-dd HH:mmK</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss.FFFFFFFK</description></item>
            <item><description>yyyy-MM-ddTHH:mmK</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ssK</description></item>
            <item><description>yyyyMMddHHmmssK</description></item>
            <item><description>yyyyMMddHHmmK</description></item>
            <item><description>yyyyMMddTHHmmssFFFFFFFK</description></item>
            <item><description>THHmmss</description></item>
            <item><description>THHmm</description></item>
            <item><description>HH:mm:ss.FFFFFFF</description></item>
            <item><description>HH:mm:ss</description></item>
            <item><description>HH:mm</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss.FFFFFFF</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss</description></item>
            <item><description>yyyy-MM-dd HH:mm</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss.FFFFFFF</description></item>
            <item><description>yyyy-MM-ddTHH:mm</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss</description></item>
            <item><description>yyyyMMddHHmmss</description></item>
            <item><description>yyyyMMddHHmm</description></item>
            <item><description>yyyyMMddTHHmmssFFFFFFF</description></item>
            <item><description>yyyy-MM-dd</description></item>
            <item><description>yyyyMMdd</description></item>
            <item><description>yy-MM-dd</description></item>
            </list>
            If the string cannot be matched to one of the above formats, an exception will be thrown.
            </remarks>
            <param name="dateText">The string containing either a long integer number of 100-nanosecond units since
            System.DateTime.MinValue, a Julian day double, an integer number of seconds since the Unix epoch, a
            culture-independent formatted date and time string, a formatted date and time string in the current
            culture, or an ISO8601-format string.</param>
            <param name="format">The SQLiteDateFormats to use.</param>
            <param name="kind">The DateTimeKind to use.</param>
            <returns>A DateTime value</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.ToDateTime(System.Double)">
            <summary>
            Converts a julianday value into a DateTime
            </summary>
            <param name="julianDay">The value to convert</param>
            <returns>A .NET DateTime</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.ToDateTime(System.Double,System.DateTimeKind)">
            <summary>
            Converts a julianday value into a DateTime
            </summary>
            <param name="julianDay">The value to convert</param>
            <param name="kind">The DateTimeKind to use.</param>
            <returns>A .NET DateTime</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.ToJulianDay(System.DateTime)">
            <summary>
            Converts a DateTime struct to a JulianDay double
            </summary>
            <param name="value">The DateTime to convert</param>
            <returns>The JulianDay value the Datetime represents</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.ToString(System.DateTime)">
            <summary>
            Converts a DateTime to a string value, using the current DateTimeFormat specified for the connection when it was opened.
            </summary>
            <param name="dateValue">The DateTime value to convert</param>
            <returns>Either a string containing the long integer number of 100-nanosecond units since System.DateTime.MinValue, a
            Julian day double, an integer number of seconds since the Unix epoch, a culture-independent formatted date and time
            string, a formatted date and time string in the current culture, or an ISO8601-format date/time string.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.ToDateTime(System.IntPtr,System.Int32)">
            <summary>
            Internal function to convert a UTF-8 encoded IntPtr of the specified length to a DateTime.
            </summary>
            <remarks>
            This is a convenience function, which first calls ToString() on the IntPtr to convert it to a string, then calls
            ToDateTime() on the string to return a DateTime.
            </remarks>
            <param name="ptr">A pointer to the UTF-8 encoded string</param>
            <param name="len">The length in bytes of the string</param>
            <returns>The parsed DateTime value</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.Split(System.String,System.Char)">
            <summary>
            Smart method of splitting a string.  Skips quoted elements, removes the quotes.
            </summary>
            <remarks>
            This split function works somewhat like the String.Split() function in that it breaks apart a string into
            pieces and returns the pieces as an array.  The primary differences are:
            <list type="bullet">
            <item><description>Only one character can be provided as a separator character</description></item>
            <item><description>Quoted text inside the string is skipped over when searching for the separator, and the quotes are removed.</description></item>
            </list>
            Thus, if splitting the following string looking for a comma:<br/>
            One,Two, "Three, Four", Five<br/>
            <br/>
            The resulting array would contain<br/>
            [0] One<br/>
            [1] Two<br/>
            [2] Three, Four<br/>
            [3] Five<br/>
            <br/>
            Note that the leading and trailing spaces were removed from each item during the split.
            </remarks>
            <param name="source">Source string to split apart</param>
            <param name="separator">Separator character</param>
            <returns>A string array of the split up elements</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.ToBoolean(System.Object)">
            <summary>
            Convert a value to true or false.
            </summary>
            <param name="source">A string or number representing true or false</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.ToBoolean(System.String)">
            <summary>
            Convert a string to true or false.
            </summary>
            <param name="source">A string representing true or false</param>
            <returns></returns>
            <remarks>
            "yes", "no", "y", "n", "0", "1", "on", "off" as well as Boolean.FalseString and Boolean.TrueString will all be
            converted to a proper boolean value.
            </remarks>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.ColumnToType(DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement,System.Int32,DevNet.DBAccess.SQLiteDBAccess.SQLiteType)">
            <summary>
            Determines the data type of a column in a statement
            </summary>
            <param name="stmt">The statement to retrieve information for</param>
            <param name="i">The column to retrieve type information on</param>
            <param name="typ">The SQLiteType to receive the affinity for the given column</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.SQLiteTypeToType(DevNet.DBAccess.SQLiteDBAccess.SQLiteType)">
            <summary>
            Converts a SQLiteType to a .NET Type object
            </summary>
            <param name="t">The SQLiteType to convert</param>
            <returns>Returns a .NET Type object</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.TypeToDbType(System.Type)">
            <summary>
            For a given intrinsic type, return a DbType
            </summary>
            <param name="typ">The native type to convert</param>
            <returns>The corresponding (closest match) DbType</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.DbTypeToColumnSize(System.Data.DbType)">
            <summary>
            Returns the ColumnSize for the given DbType
            </summary>
            <param name="typ">The DbType to get the size of</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.DbTypeToType(System.Data.DbType)">
            <summary>
            Convert a DbType to a Type
            </summary>
            <param name="typ">The DbType to convert from</param>
            <returns>The closest-match .NET type</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.TypeToAffinity(System.Type)">
            <summary>
            For a given type, return the closest-match SQLite TypeAffinity, which only understands a very limited subset of types.
            </summary>
            <param name="typ">The type to evaluate</param>
            <returns>The SQLite type affinity for that type.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConvert.TypeNameToDbType(System.String)">
            <summary>
            For a given type name, return a closest-match .NET type
            </summary>
            <param name="Name">The name of the type to match</param>
            <returns>The .NET DBType the text evaluates to.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.Shutdown">
            <summary>
            Shutdown the SQLite engine so that it can be restarted with different config options.
            We depend on auto initialization to recover.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.IsOpen">
            <summary>
            Returns non-zero if a database connection is open.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.Open(System.String,DevNet.DBAccess.SQLiteDBAccess.SQLiteOpenFlagsEnum,System.Int32,System.Boolean)">
            <summary>
            Opens a database.
            </summary>
            <remarks>
            Implementers should call SQLiteFunction.BindFunctions() and save the array after opening a connection
            to bind all attributed user-defined functions and collating sequences to the new connection.
            </remarks>
            <param name="strFilename">The filename of the database to open.  SQLite automatically creates it if it doesn't exist.</param>
            <param name="flags">The open flags to use when creating the connection</param>
            <param name="maxPoolSize">The maximum size of the pool for the given filename</param>
            <param name="usePool">If true, the connection can be pulled from the connection pool</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.Close">
            <summary>
            Closes the currently-open database.
            </summary>
            <remarks>
            After the database has been closed implemeters should call SQLiteFunction.UnbindFunctions() to deallocate all interop allocated
            memory associated with the user-defined functions and collating sequences tied to the closed connection.
            </remarks>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.SetTimeout(System.Int32)">
            <summary>
            Sets the busy timeout on the connection.  SQLiteCommand will call this before executing any command.
            </summary>
            <param name="nTimeoutMS">The number of milliseconds to wait before returning SQLITE_BUSY</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.SQLiteLastError">
            <summary>
            Returns the text of the last error issued by SQLite
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.ClearPool">
            <summary>
            When pooling is enabled, force this connection to be disposed rather than returned to the pool
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.Prepare(DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection,System.String,DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement,System.UInt32,System.String@)">
            <summary>
            Prepares a SQL statement for execution.
            </summary>
            <param name="cnn">The source connection preparing the command.  Can be null for any caller except LINQ</param>
            <param name="strSql">The SQL command text to prepare</param>
            <param name="previous">The previous statement in a multi-statement command, or null if no previous statement exists</param>
            <param name="timeoutMS">The timeout to wait before aborting the prepare</param>
            <param name="strRemain">The remainder of the statement that was not processed.  Each call to prepare parses the
            SQL up to to either the end of the text or to the first semi-colon delimiter.  The remaining text is returned
            here for a subsequent call to Prepare() until all the text has been processed.</param>
            <returns>Returns an initialized SQLiteStatement.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.Step(DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement)">
            <summary>
            Steps through a prepared statement.
            </summary>
            <param name="stmt">The SQLiteStatement to step through</param>
            <returns>True if a row was returned, False if not.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.Reset(DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement)">
            <summary>
            Resets a prepared statement so it can be executed again.  If the error returned is SQLITE_SCHEMA, 
            transparently attempt to rebuild the SQL statement and throw an error if that was not possible.
            </summary>
            <param name="stmt">The statement to reset</param>
            <returns>Returns -1 if the schema changed while resetting, 0 if the reset was sucessful or 6 (SQLITE_LOCKED) if the reset failed due to a lock</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.SetExtendedResultCodes(System.Boolean)">
            <summary>
            Enables or disabled extened result codes returned by SQLite
            </summary>
            <param name="bOnOff">true to enable extended result codes, false to disable.</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.ResultCode">
            <summary>
            Returns the numeric result code for the most recent failed SQLite API call 
            associated with the database connection. 
            </summary>
            <returns>Result code</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.ExtendedResultCode">
            <summary>
            Returns the extended numeric result code for the most recent failed SQLite API call 
            associated with the database connection. 
            </summary>
            <returns>Extended result code</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.LogMessage(System.Int32,System.String)">
            <summary>
            Add a log message via the SQLite sqlite3_log interface.
            </summary>
            <param name="iErrCode">Error code to be logged with the message.</param>
            <param name="zMessage">String to be logged.  Unlike the SQLite sqlite3_log() 
            interface, this should be pre-formatted.  Consider using the 
            String.Format() function.</param>
            <returns></returns>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.Version">
            <summary>
            Returns a string representing the active version of SQLite
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.LastInsertRowId">
            <summary>
            Returns the rowid of the most recent successful INSERT into the database from this connection.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.Changes">
            <summary>
            Returns the number of changes the last executing insert/update caused.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.MemoryUsed">
            <summary>
            Returns the amount of memory (in bytes) currently in use by the SQLite core library.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteBase.MemoryHighwater">
            <summary>
            Returns the maximum amount of memory (in bytes) used by the SQLite core library since the high-water mark was last reset.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionFlags">
            <summary>
            The extra behavioral flags that can be applied to a connection.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionFlags.None">
            <summary>
            No extra flags.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionFlags.LogPrepare">
            <summary>
            Enable logging of all SQL statements to be prepared.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionFlags.Default">
            <summary>
            The default extra flags for new connections.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteFactory">
            <summary>
            SQLite implementation of DbProviderFactory.
            </summary>
            <summary>
            SQLite implementation of DbProviderFactory.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFactory.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Will provide a DbProviderServices object in .NET 3.5
            </summary>
            <param name="serviceType">The class or interface type to query for</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFactory.#ctor">
            <overloads>
            Constructs a new SQLiteFactory object
            </overloads>
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteFactory.Instance">
            <summary>
            Static instance member which returns an instanced SQLiteFactory class.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFactory.CreateCommand">
            <summary>
            Returns a new SQLiteCommand object.
            </summary>
            <returns>A SQLiteCommand object.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFactory.CreateCommandBuilder">
            <summary>
            Returns a new SQLiteCommandBuilder object.
            </summary>
            <returns>A SQLiteCommandBuilder object.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFactory.CreateConnection">
            <summary>
            Creates a new SQLiteConnection.
            </summary>
            <returns>A SQLiteConnection object.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFactory.CreateConnectionStringBuilder">
            <summary>
            Creates a new SQLiteConnectionStringBuilder.
            </summary>
            <returns>A SQLiteConnectionStringBuilder object.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFactory.CreateDataAdapter">
            <summary>
            Creates a new SQLiteDataAdapter.
            </summary>
            <returns>A SQLiteDataAdapter object.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFactory.CreateParameter">
            <summary>
            Creates a new SQLiteParameter.
            </summary>
            <returns>A SQLiteParameter object.</returns>
        </member>
        <member name="E:DevNet.DBAccess.SQLiteDBAccess.SQLiteFactory.Log">
            <summary>
            This event is raised whenever SQLite raises a logging event.
            Note that this should be set as one of the first things in the
            application.  This event is provided for backward compatibility only.
            New code should use the SQLiteLog class instead.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SqlDBAccess.SqlHelper">
             <summary>
            SqlHelper帮助类
             </summary>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.AddParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
             <summary>
            为SqlCommand添加参数
             </summary>
             <param name="command">SqlCommand</param>
             <param name="commandParameters">SqlParameter集合</param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.SetParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            根据DataRow行的值给SqlParameter集合设置参数值
            </summary>
            <param name="commandParameters">SqlParameter集合</param>
            <param name="dataRow">DataRow</param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.SetParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            设置参数值
            </summary>
            <param name="commandParameters">SqlParameter集合</param>
            <param name="parameterValues">参数值集合</param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
             <summary>
            执行Sql命令
             </summary>
             <param name="connectionString"> SqlConnection连接字符串</param>
             <param name="commandType"> CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">Sql文本</param>
             <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
             <summary>
            执行Sql命令
             </summary>
             <param name="connectionString">SqlConnection连接字符串</param>
             <param name="commandType">CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">Sql命令文本</param>
             <param name="commandParameters">SqlParameter集合</param>
             <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            执行Sql命令
            </summary>
            <param name="connectionString">SqlConnection连接字符串</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">存储过程参数值集合（可以为null）</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行Sql命令
            </summary>
            <param name="connection">SqlConnection</param>
            <param name="commandType">CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">Sql文本</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行Sql命令
            </summary>
            <param name="connection">SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <!-- 对于成员“M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])”忽略有格式错误的 XML 注释 -->
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行Sql命令
            </summary>
            <param name="transaction">SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
             <summary>
            执行Sql命令
             </summary>
             <param name="transaction">A valid SqlTransaction</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <param name="commandParameters">An array of SqlParamters used to execute the command</param>
             <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Sql命令
            </summary>
            <param name="transaction">SqlTransaction</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">存储过程参数值集合</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            获取DataSet
            </summary>
            <param name="connectionString">connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取DataSet
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            获取DataSet
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">存储过程参数值集合</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            获取DataSet
            </summary>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取DataSet
            </summary>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            获取DataSet
            </summary>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">存储过程参数值集合</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            获取DataSet
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取DataSet
            </summary>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            获取DataSet
            </summary>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">存储过程参数值集合</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],DevNet.DBAccess.SqlDBAccess.SqlHelper.SqlConnectionOwnership)">
            <summary>
            获取SqlDataReader
            </summary>
            <remarks>
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            获取SqlDataReader
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取SqlDataReader
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            获取SqlDataReader
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            获取SqlDataReader
            </summary>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取SqlDataReader
            </summary>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            获取SqlDataReader
            </summary>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            获取SqlDataReader
            </summary>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取SqlDataReader
            </summary>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            获取SqlDataReader
            </summary>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
             <summary>
            执行ExecuteScalar获取第一行第一列的值，其它值忽略
             </summary>
             <param name="connectionString">A valid connection string for a SqlConnection</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
             <summary>
            执行ExecuteScalar获取第一行第一列的值，其它值忽略
             </summary>
             <param name="connectionString">A valid connection string for a SqlConnection</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <param name="commandParameters">An array of SqlParamters used to execute the command</param>
             <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
             <summary>
            执行ExecuteScalar获取第一行第一列的值，其它值忽略
             </summary>
             <param name="connectionString">A valid connection string for a SqlConnection</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
             <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
             <summary>
            执行ExecuteScalar获取第一行第一列的值，其它值忽略
             </summary>
             <param name="connection">A valid SqlConnection</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
             <summary>
            执行ExecuteScalar获取第一行第一列的值，其它值忽略
             </summary>
             <param name="connection">A valid SqlConnection</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <param name="commandParameters">An array of SqlParamters used to execute the command</param>
             <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
             <summary>
            执行ExecuteScalar获取第一行第一列的值，其它值忽略
             </summary>
             <param name="connection">A valid SqlConnection</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
             <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
             <summary>
            执行ExecuteScalar获取第一行第一列的值，其它值忽略
             </summary>
             <param name="transaction">A valid SqlTransaction</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
             <summary>
            执行ExecuteScalar获取第一行第一列的值，其它值忽略
             </summary>
             <param name="transaction">A valid SqlTransaction</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <param name="commandParameters">An array of SqlParamters used to execute the command</param>
             <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
             <summary>
            执行ExecuteScalar获取第一行第一列的值，其它值忽略
             </summary>
             <param name="transaction">A valid SqlTransaction</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
             <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            获取XmlReader
            </summary>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取XmlReader
            </summary>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            获取XmlReader
            </summary>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            获取XmlReader
            </summary>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            获取XmlReader
            </summary>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            获取XmlReader
            </summary>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
             <summary>
            填充DataSet
             </summary>
             <param name="connectionString">A valid connection string for a SqlConnection</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
             <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
             by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
             <summary>
            填充DataSet
             </summary>
             <param name="connectionString">A valid connection string for a SqlConnection</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <param name="commandParameters">An array of SqlParamters used to execute the command</param>
             <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
             <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
             by a user defined name (probably the actual table name)
             </param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
             <summary>
            填充DataSet
             </summary>
             <param name="connectionString">A valid connection string for a SqlConnection</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
             <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
             by a user defined name (probably the actual table name)
             </param>    
             <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
             <summary>
            填充DataSet
             </summary>
             <param name="connection">A valid SqlConnection</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
             <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
             by a user defined name (probably the actual table name)
             </param>    
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
             <summary>
            填充DataSet
             </summary>
             <param name="connection">A valid SqlConnection</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
             <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
             by a user defined name (probably the actual table name)
             </param>
             <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
             <summary>
            填充DataSet
             </summary>
             <param name="connection">A valid SqlConnection</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
             <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
             by a user defined name (probably the actual table name)
             </param>
             <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
             <summary>
            填充DataSet
             </summary>
             <param name="transaction">A valid SqlTransaction</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
             <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
             by a user defined name (probably the actual table name)
             </param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
             <summary>
            填充DataSet
             </summary>
             <param name="transaction">A valid SqlTransaction</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
             <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
             by a user defined name (probably the actual table name)
             </param>
             <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
             <summary>
            填充DataSet
             </summary>
             <param name="transaction">A valid SqlTransaction</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
             <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
             by a user defined name (probably the actual table name)
             </param>
             <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
             <summary>
            填充DataSet
             </summary>
             <param name="connection">A valid SqlConnection</param>
             <param name="transaction">A valid SqlTransaction</param>
             <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
             <param name="commandText">The stored procedure name or T-SQL command</param>
             <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
             <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
             by a user defined name (probably the actual table name)
             </param>
             <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            更新DataSet数据
            </summary>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            创建SqlCommand
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程，使用DataRow的值作为参数值
             </summary>
             <param name="connectionString">A valid connection string for a SqlConnection</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程，使用DataRow的值作为参数值
             </summary>
             <param name="connection">A valid SqlConnection object</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程，使用DataRow的值作为参数值
             </summary>
             <param name="transaction">A valid SqlTransaction object</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程获取DataSet，使用DataRow的值作为参数值
             </summary>
             <param name="connectionString">A valid connection string for a SqlConnection</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程获取DataSet，使用DataRow的值作为参数值
             </summary>
             <param name="connection">A valid SqlConnection object</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程获取DataSet，使用DataRow的值作为参数值
             </summary>
             <param name="transaction">A valid SqlTransaction object</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程获取SqlDataReader，使用DataRow的值作为参数值
             </summary>
             <param name="connectionString">A valid connection string for a SqlConnection</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程获取SqlDataReader，使用DataRow的值作为参数值
             </summary>
             <param name="connection">A valid SqlConnection object</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程获取SqlDataReader，使用DataRow的值作为参数值
             </summary>
             <param name="transaction">A valid SqlTransaction object</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程获取第一行第一列的值Scalar，使用DataRow的值作为参数值
             </summary>
             <param name="connectionString">A valid connection string for a SqlConnection</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程获取第一行第一列的值Scalar，使用DataRow的值作为参数值
             </summary>
             <param name="connection">A valid SqlConnection object</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程获取第一行第一列的值Scalar，使用DataRow的值作为参数值
             </summary>
             <param name="transaction">A valid SqlTransaction object</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程获取XmlReader，使用DataRow的值作为参数值
             </summary>
             <param name="connection">A valid SqlConnection object</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
             <summary>
            执行存储过程获取XmlReader，使用DataRow的值作为参数值
             </summary>
             <param name="transaction">A valid SqlTransaction object</param>
             <param name="spName">The name of the stored procedure</param>
             <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
             <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:DevNet.DBAccess.SqlDBAccess.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SqlDBAccess.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:DevNet.DBAccess.SqlDBAccess.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:DevNet.DBAccess.SqlDBAccess.SqlParameterCache">
             <summary>
            Sql参数缓存类，提供存储过程参数缓存及命令文本参数缓存
             </summary>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            从存储过程获取并创建参数集合
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            克隆、复制Sqlparameter集合
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlParameterCache.SetCacheParameter(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            设置缓存参数，使用connectionString：commandText作为key
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlParameterCache.GetCachedParameter(System.String,System.String)">
            <summary>
            获取缓存参数，不存在返回null
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlParameterCache.GetSpParameter(System.String,System.String)">
            <summary>
            获取存储过程参数，不存在自动创建
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlParameterCache.GetSpParameter(System.String,System.String,System.Boolean)">
            <summary>
            获取存储过程参数，不存在自动创建
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlParameterCache.GetSpParameter(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            获取存储过程参数，不存在自动创建
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlParameterCache.GetSpParameter(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            获取存储过程参数，不存在自动创建
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:DevNet.Permission.Entity.UserGroupPermission">
            <summary>
            表 UserGroupPermission 用户组权限的实体类
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroupPermission.UserGroupPermission_TableName">
            <summary>
             表 UserGroupPermission 数据表名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroupPermission.AutoIncrement">
            <summary>
             表 UserGroupPermission 自动增长型字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroupPermission.GroupID_FieldName">
            <summary>
            GroupID 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroupPermission.PermissionID_FieldName">
            <summary>
            PermissionID 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroupPermission.OwnerCode_FieldName">
            <summary>
            用户组权限所有者编号 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroupPermission.Owner_FieldName">
            <summary>
            用户组权限所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......） 字段名称
            </summary>
        </member>
        <member name="M:DevNet.Permission.Entity.UserGroupPermission.#ctor">
            <summary>
            用户组权限构造函数
            </summary>
        </member>
        <member name="M:DevNet.Permission.Entity.UserGroupPermission.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化时调用该方法，由于WCF的DataContract序列化不调用构造函数，由该方法初始化成员变量
            </summary>
            <param name="context"></param>
        </member>
        <member name="F:DevNet.Permission.Entity.UserGroupPermission.PrimaryKeyField">
            <summary>
             表 UserGroupPermission 主键字段集合
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.UserGroupPermission.GroupID">
            <summary>
            GroupID 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.UserGroupPermission.PermissionID">
            <summary>
            PermissionID 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.UserGroupPermission.OwnerCode">
            <summary>
            用户组权限所有者编号 列默认-1
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.UserGroupPermission.Owner">
            <summary>
            用户组权限所属后台系统默认1（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......） 列
            </summary>
        </member>
        <member name="T:DevNet.Logger.ILogger">
            <summary>
            简单日志接口
            </summary>
        </member>
        <member name="M:DevNet.Logger.ILogger.Error(System.String)">
            <summary>
            写Error错误
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:DevNet.Logger.ILogger.Error(System.String,System.Exception)">
            <summary>
            写Error错误
            </summary>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="M:DevNet.Logger.ILogger.Info(System.String)">
            <summary>
            写Info错误
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:DevNet.Logger.ILogger.Info(System.String,System.Exception)">
            <summary>
            写Info错误
            </summary>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="M:DevNet.Logger.ILogger.Warning(System.String)">
            <summary>
            写Warning错误
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:DevNet.Logger.ILogger.Warning(System.String,System.Exception)">
            <summary>
            写Warning错误
            </summary>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="P:DevNet.Logger.ILogger.FilePath">
            <summary>
            日志文件路径
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.DBProcedureParams">
            <summary>
            存储过程参数帮助类
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DBProcedureParams.DiscoverSpParameterSet(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            从存储过程获取并创建参数集合
            </summary>
            <param name="connection"></param>
            <param name="spName"></param>
            <param name="includeReturnValueParameter"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBProcedureParams.CloneParameters(System.Data.Common.DbParameter[])">
            <summary>
            克隆、复制DbParameter集合
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBProcedureParams.GetSpParameter(System.Data.Common.DbConnection,System.String)">
            <summary>
            获取存储过程参数，不存在自动创建
            </summary>
            <param name="connection">Conncetin 默认不包含返回值参数，从缓存中获取</param>
            <param name="spName"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBProcedureParams.GetSpParameter(System.String)">
            <summary>
            获取存储过程参数，不存在自动创建
            </summary>
            <param name="spName">存储过程名 默认不包含返回值参数，从缓存中获取</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBProcedureParams.GetSpParameter(System.Data.Common.DbConnection,System.String,System.Boolean,System.Boolean)">
            <summary>
            获取存储过程参数，不存在自动创建
            </summary>
            <param name="connection"></param>
            <param name="spName"></param>
            <param name="includeReturnValueParameter"></param>
            <param name="setCache">是否设置缓存</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBProcedureParams.GetSpParameter(System.String,System.Boolean,System.Boolean)">
            <summary>
            获取存储过程参数，不存在自动创建
            </summary>
            <param name="spName"></param>
            <param name="includeReturnValueParameter"></param>
            <param name="setCache">是否设置缓存</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBProcedureParams.GetSpParameter(System.String,System.Boolean)">
            <summary>
            获取存储过程参数，不存在自动创建
            </summary>
            <param name="spName"></param>
            <param name="includeReturnValueParameter"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBProcedureParams.GetSpParamSetValue``1(System.Data.Common.DbConnection,System.String,System.Boolean,System.Boolean,``0)">
            <summary>
            获取存储过程DbParameter参数集合，并根据Object对象[实体类]设置DbParameter参数值
            </summary>
            <param name="connection"></param>
            <param name="spName"></param>
            <param name="includeReturnValueParameter"></param>
            <param name="setParamCache">是否将参数缓存</param>
            <param name="objEntity">Object对象[实体类]（属性名称请与数据库存储过程参数名称保持一致）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBProcedureParams.GetSpParamSetValue``1(System.Data.Common.DbConnection,System.String,System.Boolean,``0)">
            <summary>
            获取存储过程DbParameter参数集合，并根据Object对象[实体类]设置DbParameter参数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="spName"></param>
            <param name="includeReturnValueParameter"></param>
            <param name="objEntity"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBProcedureParams.GetSpParamSetValue``1(System.Data.Common.DbConnection,System.String,``0)">
            <summary>
            获取存储过程DbParameter参数集合，并根据Object对象[实体类]设置DbParameter参数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="spName"></param>
            <param name="objEntity"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBProcedureParams.GetSpParamSetValue``1(System.String,System.Boolean,System.Boolean,``0)">
            <summary>
            获取存储过程DbParameter参数集合，并根据Object对象[实体类]设置DbParameter参数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="spName"></param>
            <param name="includeReturnValueParameter"></param>
            <param name="setParamCache">是否将参数缓存</param>
            <param name="objEntity">Object对象[实体类]（属性名称请与数据库存储过程参数名称保持一致）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBProcedureParams.GetSpParamSetValue``1(System.String,System.Boolean,``0)">
            <summary>
            获取存储过程DbParameter参数集合，并根据Object对象[实体类]设置DbParameter参数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="spName"></param>
            <param name="includeReturnValueParameter"></param>
            <param name="objEntity"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBProcedureParams.GetSpParamSetValue``1(System.String,``0)">
            <summary>
            获取存储过程DbParameter参数集合，并根据Object对象[实体类]设置DbParameter参数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="spName"></param>
            <param name="objEntity"></param>
            <returns></returns>
        </member>
        <member name="T:DevNet.StrongTable.DataTableManager`3">
            <summary>
            强类型表数据抽象基类 [作为数据层基类以提高代码复用性]  [可重写]
            </summary>
            <typeparam name="TTable">泛型强类型数据表(请继承自StrongTableBase)</typeparam>
            <typeparam name="TRow">泛型强类型数据行(请继承自DataRow)</typeparam>
            <typeparam name="TCondition">条件查询的类实体【如不需要，可以用“object”替代】</typeparam>
        </member>
        <member name="T:DevNet.StrongTable.IDataTableManager`3">
            <summary>
            强类型表操作模式数据管理接口 提供基本的数据操作方法
            </summary>
            <typeparam name="TTable">泛型强类型数据表(请继承自StrongTableBase)</typeparam>
            <typeparam name="TRow">泛型强类型数据行(请继承自DataRow)</typeparam>
            <typeparam name="TCondition">条件查询的类实体【如不需要，可以用“object”替代】</typeparam>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetSingle(System.Object[])">
            <summary>
            获取一行强类型Row  不存在返回null
            </summary>
            <param name="ids">唯一值参数</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetSingle(System.String[],System.Object[])">
            <summary>
            获取一行强类型 不存在返回null
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetSingle(System.String,System.Object)">
            <summary>
            获取一行强类型 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetSingle(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetSingle(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetTopList(System.Int32,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetTopList(System.Int32,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetTopList(System.Int32,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldNames">条件字段名称</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段强类型表
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段强类型表
            </summary>
            <param name="filterFieldName">条件字段</param>
            <param name="filterFieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetList(System.String,System.Object)">
            <summary>
            获取实体记录强类型表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetList(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录强类型表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取实体记录强类型表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录强类型表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetList(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录强类型表
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录强类型表
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetList(`2,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取强类型表
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetList">
            <summary>
            获取所有记录强类型表
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetList(System.String[],System.Object[])">
            <summary>
            获取强类型表
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetList(`2)">
            <summary>
            根据条件对象获取强类型表
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetPageList(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取强类型表
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetPageList(`2,DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取强类型表
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetPageList(`2,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取强类型表
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetPageList(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取强类型表
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetTable(`2)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetTable(`2,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetPageTable(`2,DevNet.Common.Pagination)">
            <summary>
            根据条件和分页信息获取数据表 
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetPageTable(`2,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件和分页信息获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetPageTable(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取数据表
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetPageTable(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取数据表
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Insert(`1)">
            <summary>
            插入一行
            </summary>
            <param name="row">强类型行</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Update(`1,System.String[],System.Object[])">
            <summary>
            更新一条记录
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldNames">更新条件字段集合</param>
            <param name="fieldValues">更新条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Update(`1,System.String,System.Object)">
            <summary>
            更新一条记录
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldName">更新条件字段</param>
            <param name="fieldValue">更新条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Update(`1,System.String[],System.Object[],System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldNames">更新条件字段集合</param>
            <param name="fieldValues">更新条件字段值集合</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Update(`1,System.String,System.Object,System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldName">更新条件字段</param>
            <param name="fieldValue">更新条件字段值</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Update(`0)">
            <summary>
            更新强类型表
            </summary>
            <param name="strongTable">TTable泛型强类型数据表</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Update(System.Data.DataTable)">
            <summary>
            更新数据表
            </summary>
            <param name="table">DataTable数据表</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Update(System.String,System.Object,System.Object[])">
            <summary>
            更新单条记录的指定字段
            </summary>
            <param name="fieldName">更新的字段</param>
            <param name="fieldValue">对应字段的值</param>
            <param name="ids">更新记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Update(System.String[],System.Object[],System.Object[])">
            <summary>
            更新单条记录的指定字段
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="ids">更新记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Update(System.String[],System.Object[],System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            更新符合条件的记录的指定字段
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="filterFieldName">更新记录的条件字段</param>
            <param name="filterFieldValue">更新记录的条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新符合条件的记录的指定字段
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="filterFieldName">更新记录的条件字段</param>
            <param name="filterFieldValue">更新记录的条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Delete(System.Object[])">
            <summary>
            删除一条记录
            </summary>
            <param name="ids">删除记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Delete(System.String[],System.Object[])">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Delete(System.String,System.Object)">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.Delete(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetMaxValue``1(System.String)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetMaxValue``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">t条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetMaxValue``1(System.String,System.String,System.Object)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetMaxValue``1(System.String,System.String[],System.Object[])">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRecordCount(System.String,System.Object)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRecordCount(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRecordCount(System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="fieldNames">字段名</param>
            <param name="fieldValues">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationMaxValue``1(System.String,System.String)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName"> 数据表名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationMaxValue``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRecordCount(System.String,System.String,System.Object)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRecordCount(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRecordCount(System.String,System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldNames">字段名</param>
            <param name="fieldValues">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetMaxNext(System.String)">
            <summary>
            获取int型字段的最大值+1
            </summary>
            <param name="intTypeField">int型字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.IsExists(System.String,System.Object)">
            <summary>
            数据表中是否存在满足指定条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.IsExists(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            数据表中是否存在满足指定条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.CheckRecord(System.String,System.Object,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.CheckRecord(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.IsExists(System.String[],System.Object[])">
            <summary>
            数据表中是否存在满足指定条件的记录
            </summary>
            <param name="fieldNames">条件字段集合</param>
            <param name="fieldValues">条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.BeginTrans">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.CommitTrans">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.RollBackTrans">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationSingle``2(``1,System.String,System.Object)">
            <summary>
            获取一条关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <typeparam name="TRelationTable">关系表类型</typeparam>
            <param name="relationTable">关系表对象</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationList``1(System.String,System.Object)">
            <summary>
            获取关系数据表【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationTable">关系数据表类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.InsertRelationRow``1(``0,System.String[])">
            <summary>
            插入关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系实体对象</param>
            <param name="exCludeFields">插入需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.InsertRelationRow``1(``0)">
            <summary>
            插入关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.UpdateRelationRow``1(``0,System.String[])">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="exCludeFields">更新需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.UpdateRelationRow``1(``0)">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.UpdateRelationRow``1(``0,System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.UpdateRelationRow``1(``0,System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.DeleteRelationRow``1(``0,System.String,System.Object)">
            <summary>
            删除关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.DeleteRelationRow``1(``0,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.IsExistsRelation(System.String,System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.IsExistsRelation(System.String,System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationSingle``2(``1,System.String[],System.Object[])">
            <summary>
            获取一条关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <typeparam name="TRelationTable">关系表类型</typeparam>
            <param name="relationTable">关系表对象</param>
            <param name="relationKeyNames">关系键字段名称</param>
            <param name="relationKeyValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationList``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系数据表【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationTable">关系数据表</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系数据表【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationTable">关系数据表</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.UpdateRelationEntity(System.String,System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationTable(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationTable(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetTable(System.String,System.Object)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetTable(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetTable(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetTable(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录数据表
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetTable(System.String[],System.Object[])">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetScalar``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetScalar``1(System.String,System.String,System.Object)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetScalar``1(System.String,System.String[],System.Object[])">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationScalar``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationScalar``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IDataTableManager`3.GetRelationScalar``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="P:DevNet.StrongTable.IDataTableManager`3.KeepConnection">
            <summary>
            在该类执行范围内是否保持数据库连接状态
            【如设置为true，请使用using代码块或显式调用Dispose()释放资源】
            </summary>
        </member>
        <member name="P:DevNet.StrongTable.IDataTableManager`3.Script">
            <summary>
            获取ScriptQuery查询类【该类使用参数模式封装了sql语句，提供简单的数据帮助方法】
            </summary>
        </member>
        <member name="E:DevNet.StrongTable.IDataTableManager`3.BeforeInsert">
            <summary>
            Insert前事件
            </summary>
        </member>
        <member name="E:DevNet.StrongTable.IDataTableManager`3.AfterInsert">
            <summary>
            Insert后事件
            </summary>
        </member>
        <member name="E:DevNet.StrongTable.IDataTableManager`3.BeforeUpdate">
            <summary>
            Update前事件
            </summary>
        </member>
        <member name="E:DevNet.StrongTable.IDataTableManager`3.AfterUpdate">
            <summary>
            Update后事件
            </summary>
        </member>
        <member name="E:DevNet.StrongTable.IDataTableManager`3.BeforeDelete">
            <summary>
            Delete前事件
            </summary>
        </member>
        <member name="E:DevNet.StrongTable.IDataTableManager`3.AfterDelete">
            <summary>
            Delete后事件
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetList(`2)">
            <summary>
            根据条件对象获取强类型表
            </summary>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetPageList(`2,DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取强类型表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetList(`2,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取强类型表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetPageList(`2,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取强类型表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetTable(`2)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetTable(`2,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetPageTable(`2,DevNet.Common.Pagination)">
            <summary>
            根据条件和分页信息获取数据表 
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetPageTable(`2,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件和分页信息获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetPageTable(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取数据表[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetPageTable(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取数据表[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetSingle(System.Object[])">
            <summary>
            获取一行强类型Row  不存在返回null
            </summary>
            <param name="ids">主键值参数</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetSingle(System.String[],System.Object[])">
            <summary>
            获取一行强类型 不存在返回null
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetSingle(System.String,System.Object)">
            <summary>
            获取一行强类型 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.IsExists(System.String,System.Object)">
            <summary>
            数据表中是否存在满足指定条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.IsExists(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            数据表中是否存在满足指定条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.CheckRecord(System.String,System.Object,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.CheckRecord(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.IsExists(System.String[],System.Object[])">
            <summary>
            数据表中是否存在满足指定条件的记录【可重写】
            </summary>
            <param name="fieldNames">条件字段集合</param>
            <param name="fieldValues">条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetTopList(System.Int32,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetTopList(System.Int32,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetTopList(System.Int32,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldNames">条件字段名称</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetList">
            <summary>
            获取所有记录强类型表
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetList(System.String[],System.Object[])">
            <summary>
            获取强类型表
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetPageList(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取强类型表
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Update(`1,System.String[],System.Object[])">
            <summary>
            更新一条记录
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldNames">更新条件字段集合(请指定为主键字段)</param>
            <param name="fieldValues">更新条件字段值集合(请指定为主键字段的原始值)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Update(`1,System.String,System.Object)">
            <summary>
            更新一条记录
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldName">更新条件字段集合(请指定为主键字段)</param>
            <param name="fieldValue">更新条件字段值集合(请指定为主键字段的原始值)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Update(`1,System.String[],System.Object[],System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldNames">更新条件字段集合(请指定为主键字段)</param>
            <param name="fieldValues">更新条件字段值集合(请指定为主键字段的原始值)</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Update(`1,System.String,System.Object,System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldName">更新条件字段集合(请指定为主键字段)</param>
            <param name="fieldValue">更新条件字段值集合(请指定为主键字段的原始值)</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Update(`0)">
            <summary>
            更新数据表
            </summary>
            <param name="strongTable">TTable泛型强类型数据表</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Update(System.Data.DataTable)">
            <summary>
            更新数据表
            </summary>
            <param name="table">DataTable数据表</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Update(System.String[],System.Object[],System.Object[])">
            <summary>
            更新单条记录的指定字段
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="ids">更新记录的条件值(默认使用主键“=”)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Update(System.String,System.Object,System.Object[])">
            <summary>
            更新单条记录的指定字段
            </summary>
            <param name="fieldName">更新的字段</param>
            <param name="fieldValue">对应字段的值</param>
            <param name="ids">更新记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Delete(System.Object[])">
            <summary>
            删除一条记录
            </summary>
            <param name="ids">删除记录的条件值(默认使用主键“=”)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Delete(System.String[],System.Object[])">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Delete(System.String,System.Object)">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Delete(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetMaxNext(System.String)">
            <summary>
            获取int型字段的最大值+1
            </summary>
            <param name="intTypeField">int型字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetMaxValue``1(System.String)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetMaxValue``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">t条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetMaxValue``1(System.String,System.String,System.Object)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetMaxValue``1(System.String,System.String[],System.Object[])">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRecordCount(System.String,System.Object)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRecordCount(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRecordCount(System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="fieldNames">字段名</param>
            <param name="fieldValues">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationMaxValue``1(System.String,System.String)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName"> 数据表名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationMaxValue``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRecordCount(System.String,System.String,System.Object)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRecordCount(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRecordCount(System.String,System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldNames">字段名</param>
            <param name="fieldValues">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.BeginTrans">
            <summary>
            开始事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.CommitTrans">
            <summary>
            提交事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.RollBackTrans">
            <summary>
            回滚事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Clone">
            <summary>
            克隆类的新实例 [可重写.NET2.0重写成(Activator.CreateInstance(this.GetType());)]
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetSingle(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录 不存在返回null[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetSingle(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录 不存在返回null[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段强类型表[可重写]
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段强类型表[可重写]
            </summary>
            <param name="filterFieldName">条件字段</param>
            <param name="filterFieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetList(System.String,System.Object)">
            <summary>
            获取实体记录强类型表[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetList(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录强类型表[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取实体记录强类型表[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录强类型表[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetList(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录强类型表[可重写]
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录强类型表[可重写]
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetPageList(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取强类型表[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Insert(`1)">
            <summary>
            插入一行[可重写]
            </summary>
            <param name="row">强类型行</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Update(System.String[],System.Object[],System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            更新符合条件的记录的指定字段[可重写]
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="filterFieldName">更新记录的条件字段</param>
            <param name="filterFieldValue">更新记录的条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新符合条件的记录的指定字段[可重写]
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="filterFieldName">更新记录的条件字段</param>
            <param name="filterFieldValue">更新记录的条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationSingle``2(``1,System.String,System.Object)">
            <summary>
            获取一条关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <typeparam name="TRelationTable">关系表类型</typeparam>
            <param name="relationTable">关系表对象</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationList``1(System.String,System.Object)">
            <summary>
            获取关系数据表【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationTable">关系数据表类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.InsertRelationRow``1(``0,System.String[])">
            <summary>
            插入关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系实体对象</param>
            <param name="exCludeFields">插入需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.InsertRelationRow``1(``0)">
            <summary>
            插入关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.UpdateRelationRow``1(``0,System.String[])">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="exCludeFields">更新需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.UpdateRelationRow``1(``0)">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.UpdateRelationRow``1(``0,System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.UpdateRelationRow``1(``0,System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.DeleteRelationRow``1(``0,System.String,System.Object)">
            <summary>
            删除关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.DeleteRelationRow``1(``0,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.IsExistsRelation(System.String,System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.IsExistsRelation(System.String,System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationSingle``2(``1,System.String[],System.Object[])">
            <summary>
            获取一条关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <typeparam name="TRelationTable">关系表类型</typeparam>
            <param name="relationTable">关系表对象</param>
            <param name="relationKeyNames">关系键字段名称</param>
            <param name="relationKeyValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationList``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系数据表【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationTable">关系数据表</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系数据表【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationTable">关系数据表</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.UpdateRelationEntity(System.String,System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationTable(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationTable(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetTable(System.String,System.Object)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetTable(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetTable(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetTable(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录数据表【可重写】
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetTable(System.String[],System.Object[])">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetScalar``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetScalar``1(System.String,System.String,System.Object)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetScalar``1(System.String,System.String[],System.Object[])">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationScalar``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationScalar``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.GetRelationScalar``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.OnBeforeInsert(DevNet.Handle.InsertHandleArg)">
            <summary>
            Insert前方法
            </summary>
            <param name="insertHandleArg"></param>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.OnAfterInsert(DevNet.Handle.InsertHandleArg)">
            <summary>
            Insert后方法
            </summary>
            <param name="insertHandleArg"></param>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.OnBeforeUpdate(DevNet.Handle.UpdateHandleArg)">
            <summary>
            Update前方法
            </summary>
            <param name="updateHandleArg"></param>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.OnAfterUpdate(DevNet.Handle.UpdateHandleArg)">
            <summary>
            Update后方法
            </summary>
            <param name="updateHandleArg"></param>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.OnBeforeDelete(DevNet.Handle.DeleteHandleArg)">
            <summary>
            Delete前方法
            </summary>
            <param name="deleteHandleArg"></param>
        </member>
        <member name="M:DevNet.StrongTable.DataTableManager`3.OnAfterDelete(DevNet.Handle.DeleteHandleArg)">
            <summary>
            Delete后方法
            </summary>
            <param name="deleteHandleArg"></param>
        </member>
        <member name="P:DevNet.StrongTable.DataTableManager`3.DBCon">
            <summary>
            获取或设置数据连接对象[可重写]
            </summary>
        </member>
        <member name="P:DevNet.StrongTable.DataTableManager`3.Script">
            <summary>
            获取ScriptQuery查询类【可重写, 该可重写类使用参数模式封装了sql语句，提供简单的数据帮助方法】
            </summary>
        </member>
        <member name="P:DevNet.StrongTable.DataTableManager`3.TTTable">
            <summary>
            泛型实体实例[可重写]
            </summary>
        </member>
        <member name="P:DevNet.StrongTable.DataTableManager`3.KeepConnection">
            <summary>
            在该类执行范围内是否保持数据库连接状态
            【如设置为true，请使用using代码块或显式调用Dispose()释放资源】
            </summary>
        </member>
        <member name="E:DevNet.StrongTable.DataTableManager`3.BeforeInsert">
            <summary>
            Insert前事件
            </summary>
        </member>
        <member name="E:DevNet.StrongTable.DataTableManager`3.AfterInsert">
            <summary>
            Insert后事件
            </summary>
        </member>
        <member name="E:DevNet.StrongTable.DataTableManager`3.BeforeUpdate">
            <summary>
            Update前事件
            </summary>
        </member>
        <member name="E:DevNet.StrongTable.DataTableManager`3.AfterUpdate">
            <summary>
            Update后事件
            </summary>
        </member>
        <member name="E:DevNet.StrongTable.DataTableManager`3.BeforeDelete">
            <summary>
            Delete前事件
            </summary>
        </member>
        <member name="E:DevNet.StrongTable.DataTableManager`3.AfterDelete">
            <summary>
            Delete后事件
            </summary>
        </member>
        <member name="T:DevNet.Entity.PropertyEventArgs">
            <summary>
            获取属性值时的事件
            </summary>
        </member>
        <member name="M:DevNet.Entity.PropertyEventArgs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="P:DevNet.Entity.PropertyEventArgs.PropertyName">
            <summary>
            获取的属性字段名称
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand">
            <summary>
            SQLite implementation of DbCommand.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand._commandText">
            <summary>
            The command text this command is based on
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand._cnn">
            <summary>
            The connection the command is associated with
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand._version">
            <summary>
            The version of the connection the command is associated with
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand._activeReader">
            <summary>
            Indicates whether or not a DataReader is active on the command.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand._commandTimeout">
            <summary>
            The timeout for the command, kludged because SQLite doesn't support per-command timeout values
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand._designTimeVisible">
            <summary>
            Designer support
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand._updateRowSource">
            <summary>
            Used by DbDataAdapter to determine updating behavior
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand._parameterCollection">
            <summary>
            The collection of parameters for the command
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand._statementList">
            <summary>
            The SQL command text, broken into individual SQL statements as they are executed
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand._remainingText">
            <summary>
            Unprocessed SQL text that has not been executed
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand._transaction">
            <summary>
            Transaction associated with this command
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.#ctor">
            <overloads>
             Constructs a new SQLiteCommand
             </overloads>
             <summary>
             Default constructor
             </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.#ctor(System.String)">
            <summary>
            Initializes the command with the given command text
            </summary>
            <param name="commandText">The SQL command text</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.#ctor(System.String,DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection)">
            <summary>
            Initializes the command with the given SQL command text and attach the command to the specified
            connection.
            </summary>
            <param name="commandText">The SQL command text</param>
            <param name="connection">The connection to associate with the command</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.#ctor(DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection)">
            <summary>
            Initializes the command and associates it with the specified connection.
            </summary>
            <param name="connection">The connection to associate with the command</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.#ctor(System.String,DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection,DevNet.DBAccess.SQLiteDBAccess.SQLiteTransaction)">
            <summary>
            Initializes a command with the given SQL, connection and transaction
            </summary>
            <param name="commandText">The SQL command text</param>
            <param name="connection">The connection to associate with the command</param>
            <param name="transaction">The transaction the command should be associated with</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.Dispose(System.Boolean)">
            <summary>
            Disposes of the command and clears all member variables
            </summary>
            <param name="disposing">Whether or not the class is being explicitly or implicitly disposed</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.ClearCommands">
            <summary>
            Clears and destroys all statements currently prepared
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.BuildNextCommand">
            <summary>
            Builds an array of prepared statements for each complete SQL statement in the command text
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.Cancel">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.CreateDbParameter">
            <summary>
            Forwards to the local CreateParameter() function
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.CreateParameter">
            <summary>
            Create a new parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.InitializeForReader">
            <summary>
            This function ensures there are no active readers, that we have a valid connection,
            that the connection is open, that all statements are prepared and all parameters are assigned
            in preparation for allocating a data reader.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>
            Creates a new SQLiteDataReader to execute/iterate the array of SQLite prepared statements
            </summary>
            <param name="behavior">The behavior the data reader should adopt</param>
            <returns>Returns a SQLiteDataReader object</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Overrides the default behavior to return a SQLiteDataReader specialization class
            </summary>
            <param name="behavior">The flags to be associated with the reader</param>
            <returns>A SQLiteDataReader</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.ExecuteReader">
            <summary>
            Overrides the default behavior of DbDataReader to return a specialized SQLiteDataReader class
            </summary>
            <returns>A SQLiteDataReader</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.ClearDataReader">
            <summary>
            Called by the SQLiteDataReader when the data reader is closed.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.ExecuteNonQuery">
            <summary>
            Execute the command and return the number of rows inserted/updated affected by it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.ExecuteScalar">
            <summary>
            Execute the command and return the first column of the first row of the resultset
            (if present), or null if no resultset was returned.
            </summary>
            <returns>The first column of the first row of the first resultset from the query</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.Prepare">
            <summary>
            Does nothing.  Commands are prepared as they are executed the first time, and kept in prepared state afterwards.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.Clone">
            <summary>
            Clones a command, including all its parameters
            </summary>
            <returns>A new SQLiteCommand with the same commandtext, connection and parameters</returns>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.CommandText">
            <summary>
            The SQL command text associated with the command
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.CommandTimeout">
            <summary>
            The amount of time to wait for the connection to become available before erroring out
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.CommandType">
            <summary>
            The type of the command.  SQLite only supports CommandType.Text
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.Connection">
            <summary>
            The connection associated with this command
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.DbConnection">
            <summary>
            Forwards to the local Connection property
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.Parameters">
            <summary>
            Returns the SQLiteParameterCollection for the given command
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.DbParameterCollection">
            <summary>
            Forwards to the local Parameters property
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.Transaction">
            <summary>
            The transaction associated with this command.  SQLite only supports one transaction per connection, so this property forwards to the
            command's underlying connection.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.DbTransaction">
            <summary>
            Forwards to the local Transaction property
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.UpdatedRowSource">
            <summary>
            Sets the method the SQLiteCommandBuilder uses to determine how to update inserted or updated rows in a DataTable.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand.DesignTimeVisible">
            <summary>
            Determines if the command is visible at design time.  Defaults to True.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.MySqlDBAccess.MySqlDbDirect">
            <summary>
            MySql访问数据库类
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.DataBase.DBAccessBase">
            <summary>
            通用数据库访问基类
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.DataBase.DBAccessBase.C_PROP_SQL">
            <summary>
            静态的 DataTable ExtendedProperties 属性
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.DataBase.DBAccessBase.con">
            <summary>
            连接对象
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.DataBase.DBAccessBase.trans">
            <summary>
            事务对象
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.#ctor(System.Data.Common.DbConnection)">
            <summary>
            构造函数
            </summary>
            <param name="dbConnection">DbConnection</param>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.Open">
            <summary>
            打开连接
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.BeginTransaction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开始事务
            </summary>
            <param name="isoLationLevel">事务锁定行为</param>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.RollBackTransaction">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.CommitTransaction">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.CreateCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.ParameterDirection,System.Data.DbType,System.Int32)">
            <summary>
            创建参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="direction"></param>
            <param name="paraType"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.CreateCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.ParameterDirection,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            创建参数
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="direction"></param>
            <param name="paraType"></param>
            <param name="size"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.AddCmdParamWithValue(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            增加一个参数
            </summary>
            <param name="cmd"></param>
            <param name="paramName"></param>
            <param name="paramValue"></param>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.CreateCommandBuilder(System.Data.Common.DbDataAdapter)">
            <summary>
            创建 DbCommandBuilder
            </summary>
            <param name="da"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.CreateDbAdapter(System.Data.Common.DbCommand)">
            <summary>
            创建 DbDataAdapter
            </summary>
            <param name="selectCmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.CreateDbAdapter(System.String)">
            <summary>
            创建DbDataAdapter 
            </summary>
            <param name="selectCmd"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteDataTable(System.Data.Common.DbCommand)">
            <summary>
            执行DbCommand
            </summary>
            <param name="selectCommand"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteDataTable(System.String)">
            <summary>
            获取一个DataTable
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteDataTable(System.Data.Common.DbCommand,System.String)">
            <summary>
            获取一个DataTable
            </summary>
            <param name="selectCommand"></param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteDataTable(System.String,System.String)">
            <summary>
            获取一个DataTable
            </summary>
            <param name="commandText"></param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteDataTable(System.String,System.Int32,System.Int32)">
            <summary>
            获取指定记录数集合的表
            </summary>
            <param name="commandText"></param>
            <param name="startIndex"></param>
            <param name="maxRecords"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteDataTable(System.Data.Common.DbCommand,System.Int32,System.Int32)">
            <summary>
            获取指定记录数集合的表
            </summary>
            <param name="selectCmd"></param>
            <param name="startIndex"></param>
            <param name="maxRecords"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            获取一个DataTable 
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteNonQuery(System.String)">
            <summary>
            执行ExecuteNonQuery
            </summary>
            <param name="cmdText"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行ExecuteNonQuery
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteReader(System.String)">
            <summary>
            获取DbDataReader
            </summary>
            <param name="cmdText"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            获取DbDataReader
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteReader(System.Data.CommandType,System.String,System.Data.CommandBehavior,System.Data.Common.DbParameter[])">
            <summary>
            获取DbDataReader
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdBehavior"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteScalar(System.String)">
            <summary>
            获取ExecuteScalar
            </summary>
            <param name="cmdText"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            获取ExecuteScalar
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.CreateCommand">
            <summary>
            创建DbCommand
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.CreateCommand(System.String)">
            <summary>
            创建DbCommand
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.PrepareCommand(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.UpdateDataTable(System.Data.DataTable)">
            <summary>
            更新DataTable
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.UpdateDataTable(System.Data.DataTable,System.String)">
            <summary>
            更新DataTable
            </summary>
            <param name="dataTable"></param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.UpdateDataTable(System.Data.DataTable,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand)">
            <summary>
            默认的稍微高效点的通用表格更新
            </summary>
            <param name="dataTable"></param>
            <param name="insertCommand"></param>
            <param name="updateCommand"></param>
            <param name="deleteCommand"></param>
            <param name="selectCommand"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.GetPKList(System.String)">
            <summary>
            Get Table PK_Primay
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataBase.DBAccessBase.GetDbType(System.Object,System.Int32@)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:DevNet.DBAccess.DataBase.DBAccessBase.State">
            <summary>
            Return ConnectionState
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.DataBase.DBAccessBase.Transaction">
            <summary>
            Return or Set Connection's Trans
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.DataBase.DBAccessBase.DbConnection">
            <summary>
            Return or Set DbConnection
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.DataBase.DBAccessBase.ConnectionString">
            <summary>
            返回或设置连接的字符串
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.MySqlDBAccess.MySqlDbDirect.#ctor(System.String)">
            <summary>
            Construct
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:DevNet.DBAccess.MySqlDBAccess.MySqlDbDirect.#ctor(DevNet.DBAccess.MySqlDBAccess.MySqlConnection)">
            <summary>
            Construct
            </summary>
            <param name="mySqlConn"></param>
        </member>
        <member name="M:DevNet.DBAccess.MySqlDBAccess.MySqlDbDirect.CreateCommandBuilder(System.Data.Common.DbDataAdapter)">
            <summary>
            Create DbCommandBuilder
            </summary>
            <param name="da"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.MySqlDBAccess.MySqlDbDirect.CreateDbAdapter(System.Data.Common.DbCommand)">
            <summary>
            Create DbDataAdapater
            </summary>
            <param name="selectCmd"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.MySqlDBAccess.MySqlDbDirect.AddCmdParamWithValue(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            Add DbParameter with value
            </summary>
            <param name="cmd"></param>
            <param name="paramName"></param>
            <param name="paramValue"></param>
        </member>
        <member name="M:DevNet.DBAccess.MySqlDBAccess.MySqlDbDirect.GetPKList(System.String)">
            <summary>
            Get Table PK_Primary
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:DevNet.StrongTable.BLLTableManager`3">
            <summary>
            强类型表业务逻辑抽象基类 [作为业务逻辑层基类以提高代码复用性]  [可重写,重写时请先执行ResetError()方法以清空错误信息]
            </summary>
            <typeparam name="TTable">泛型强类型数据表(请继承自StrongTableBase)</typeparam>
            <typeparam name="TRow">泛型强类型数据行(请继承自DataRow)</typeparam>
            <typeparam name="TCondition">条件查询的类实体【如不需要，可以用“object”替代】</typeparam>
        </member>
        <member name="T:DevNet.StrongTable.IBLLTableManager`3">
            <summary>
            强类型表业务逻辑管理接口 提供基本的业务逻辑方法
            </summary>
            <typeparam name="TTable">泛型强类型数据表(请继承自StrongTableBase)</typeparam>
            <typeparam name="TRow">泛型强类型数据行(请继承自DataRow)</typeparam>
            <typeparam name="TCondition">条件查询的类实体【如不需要，可以用“object”替代】</typeparam>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetSingle(System.Object[])">
            <summary>
            获取一行强类型Row  不存在返回null
            </summary>
            <param name="ids">唯一值参数</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetSingle(System.String[],System.Object[])">
            <summary>
            获取一行强类型 不存在返回null
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetSingle(System.String,System.Object)">
            <summary>
            获取一行强类型 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetTopList(System.Int32,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetTopList(System.Int32,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetTopList(System.Int32,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldNames">条件字段名称</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetList">
            <summary>
            获取所有记录强类型表
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetList(System.String[],System.Object[])">
            <summary>
            获取强类型表
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetList(`2)">
            <summary>
            根据条件对象获取强类型表
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetPageList(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取强类型表
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetPageList(`2,DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取强类型表
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetTable(`2)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetTable(`2,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetPageTable(`2,DevNet.Common.Pagination)">
            <summary>
            根据条件和分页信息获取数据表 
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetPageTable(`2,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件和分页信息获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetPageTable(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取数据表
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetPageTable(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取数据表
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Update(`1,System.String[],System.Object[])">
            <summary>
            更新一条记录
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldNames">更新条件字段集合</param>
            <param name="fieldValues">更新条件字段值集合</param>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Update(`1,System.String,System.Object)">
            <summary>
            更新一条记录
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldName">更新条件字段</param>
            <param name="fieldValue">更新条件字段值</param>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Update(System.Data.DataTable)">
            <summary>
            更新数据表
            </summary>
            <param name="table">DataTable数据表</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Update(`1,System.String[],System.Object[],System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldNames">更新条件字段集合</param>
            <param name="fieldValues">更新条件字段值集合</param>
            <param name="exCludeFields">更新需排除的字段</param>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Update(`1,System.String,System.Object,System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldName">更新条件字段</param>
            <param name="fieldValue">更新条件字段值</param>
            <param name="exCludeFields">更新需排除的字段</param>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Update(`0)">
            <summary>
            更新强类型表
            </summary>
            <param name="strongTable">TTable泛型强类型数据表</param>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Update(System.String[],System.Object[],System.Object[])">
            <summary>
            更新单条记录的指定字段
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="ids">更新记录的条件值</param>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Update(System.String,System.Object,System.Object[])">
            <summary>
            更新单条记录的指定字段
            </summary>
            <param name="fieldName">更新的字段</param>
            <param name="fieldValue">对应字段的值</param>
            <param name="ids">更新记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Delete(System.Object[])">
            <summary>
            删除一条记录
            </summary>
            <param name="ids">删除记录的条件值</param>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Delete(System.String[],System.Object[])">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Delete(System.String,System.Object)">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Delete(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetMaxValue``1(System.String)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetMaxValue``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">t条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetMaxValue``1(System.String,System.String,System.Object)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetMaxValue``1(System.String,System.String[],System.Object[])">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRecordCount(System.String,System.Object)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRecordCount(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRecordCount(System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="fieldNames">字段名</param>
            <param name="fieldValues">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationMaxValue``1(System.String,System.String)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName"> 数据表名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationMaxValue``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRecordCount(System.String,System.String,System.Object)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRecordCount(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRecordCount(System.String,System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldNames">字段名</param>
            <param name="fieldValues">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetMaxNext(System.String)">
            <summary>
            获取int型字段的最大值+1
            </summary>
            <param name="intTypeField">int型字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.IsExists(System.String,System.Object)">
            <summary>
            数据表中是否存在满足指定条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.IsExists(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            数据表中是否存在满足指定条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.CheckRecord(System.String,System.Object,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.CheckRecord(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.IsExists(System.String[],System.Object[])">
            <summary>
            数据表中是否存在满足指定条件的记录
            </summary>
            <param name="fieldNames">条件字段集合</param>
            <param name="fieldValues">条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetSingle(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录 不存在返回null[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetSingle(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录 不存在返回null[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段强类型表[可重写]
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段强类型表[可重写]
            </summary>
            <param name="filterFieldName">条件字段</param>
            <param name="filterFieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetList(System.String,System.Object)">
            <summary>
            获取实体记录强类型表[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetList(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录强类型表[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取实体记录强类型表[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录强类型表[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetList(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录强类型表[可重写]
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录强类型表[可重写]
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetPageList(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取强类型表[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Insert(`1)">
            <summary>
            插入一行[可重写]
            </summary>
            <param name="row">强类型行</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Update(System.String[],System.Object[],System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            更新符合条件的记录的指定字段[可重写]
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="filterFieldName">更新记录的条件字段</param>
            <param name="filterFieldValue">更新记录的条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新符合条件的记录的指定字段
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="filterFieldName">更新记录的条件字段</param>
            <param name="filterFieldValue">更新记录的条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetList(`2,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取强类型表
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetPageList(`2,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取强类型表
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationSingle``2(``1,System.String,System.Object)">
            <summary>
            获取一条关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <typeparam name="TRelationTable">关系表类型</typeparam>
            <param name="relationTable">关系表对象</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationList``1(System.String,System.Object)">
            <summary>
            获取关系数据表【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationTable">关系数据表类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.InsertRelationRow``1(``0,System.String[])">
            <summary>
            插入关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系实体对象</param>
            <param name="exCludeFields">插入需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.InsertRelationRow``1(``0)">
            <summary>
            插入关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.UpdateRelationRow``1(``0,System.String[])">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="exCludeFields">更新需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.UpdateRelationRow``1(``0)">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.UpdateRelationRow``1(``0,System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.UpdateRelationRow``1(``0,System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.DeleteRelationRow``1(``0,System.String,System.Object)">
            <summary>
            删除关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.DeleteRelationRow``1(``0,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.IsExistsRelation(System.String,System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.IsExistsRelation(System.String,System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationSingle``2(``1,System.String[],System.Object[])">
            <summary>
            获取一条关系数据行【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <typeparam name="TRelationTable">关系表类型</typeparam>
            <param name="relationTable">关系表对象</param>
            <param name="relationKeyNames">关系键字段名称</param>
            <param name="relationKeyValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationList``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系数据表【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationTable">关系数据表</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系数据表【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelationTable">关系数据表</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.UpdateRelationEntity(System.String,System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.BeginTrans">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.CommitTrans">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.RollBackTrans">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationTable(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationTable(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetTable(System.String,System.Object)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetTable(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetTable(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetTable(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录数据表
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetTable(System.String[],System.Object[])">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetScalar``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetScalar``1(System.String,System.String,System.Object)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetScalar``1(System.String,System.String[],System.Object[])">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationScalar``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationScalar``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.IBLLTableManager`3.GetRelationScalar``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="P:DevNet.StrongTable.IBLLTableManager`3.IsFail">
            <summary>
            获取操作是否失败
            </summary>
        </member>
        <member name="P:DevNet.StrongTable.IBLLTableManager`3.DevNetException">
            <summary>
            获取自定义异常
            </summary>
        </member>
        <member name="P:DevNet.StrongTable.IBLLTableManager`3.KeepConnection">
            <summary>
            在该类执行范围内是否保持数据库连接状态
            【如设置为true，请使用using代码块或显式调用Dispose()释放资源】
            </summary>
        </member>
        <member name="P:DevNet.StrongTable.IBLLTableManager`3.Script">
            <summary>
            获取ScriptQuery查询类【该类使用参数模式封装了sql语句，提供简单的数据帮助方法】
            </summary>
        </member>
        <member name="F:DevNet.StrongTable.BLLTableManager`3.ErrorUpdate">
            <summary>
            更新数据失败时显示的自定义异常错误常数[保存失败]
            </summary>
        </member>
        <member name="F:DevNet.StrongTable.BLLTableManager`3.ErrorUpdateRecord">
            <summary>
            更新记录失败是现实的错误信息(保存失败，数据可能不存在)
            </summary>
        </member>
        <member name="F:DevNet.StrongTable.BLLTableManager`3.ErrorDelete">
            <summary>
            删除数据失败时显示的自定义异常错误常数[删除失败，可能数据不存在]
            </summary>
        </member>
        <member name="F:DevNet.StrongTable.BLLTableManager`3.ErrorGetList">
            <summary>
            获取数据信息列表失败时显示的自定义异常错误常数[获取数据列表失败]
            </summary>
        </member>
        <member name="F:DevNet.StrongTable.BLLTableManager`3._isFail">
            <summary>
            操作是否失败
            </summary>
        </member>
        <member name="F:DevNet.StrongTable.BLLTableManager`3._ex">
            <summary>
            自定义异常对象
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.ResetError">
            <summary>
            清空错误信息
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.SetError(DevNet.Common.DevNetException)">
            <summary>
            设置更新失败和失败异常
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetSingle(System.Object[])">
            <summary>
            获取一行强类型Row  不存在返回null【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="ids">唯一值参数</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetSingle(System.String[],System.Object[])">
            <summary>
            获取一行强类型 不存在返回null【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetSingle(System.String,System.Object)">
            <summary>
            获取一行强类型 不存在返回null【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.IsExists(System.String,System.Object)">
            <summary>
            数据表中是否存在满足指定条件的记录【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.IsExists(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            数据表中是否存在满足指定条件的记录【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.CheckRecord(System.String,System.Object,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.CheckRecord(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.IsExists(System.String[],System.Object[])">
            <summary>
            数据表中是否存在满足指定条件的记录【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">条件字段集合</param>
            <param name="fieldValues">条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetTopList(System.Int32,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetTopList(System.Int32,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetTopList(System.Int32,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldNames">条件字段名称</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetList">
            <summary>
            获取所有记录强类型表【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetList(System.String[],System.Object[])">
            <summary>
            获取强类型表【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetList(`2)">
            <summary>
            根据条件对象获取强类型表【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetPageList(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取强类型表【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetPageList(`2,DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取强类型表【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Update(`1,System.String[],System.Object[])">
            <summary>
            更新一条记录【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldNames">更新条件字段集合(请指定为主键字段)</param>
            <param name="fieldValues">更新条件字段值集合(请指定为主键字段的原始值)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Update(`1,System.String,System.Object)">
            <summary>
            更新一条记录【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldName">更新条件字段集合(请指定为主键字段)</param>
            <param name="fieldValue">更新条件字段值集合(请指定为主键字段的原始值)</param>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Update(`1,System.String[],System.Object[],System.String[])">
            <summary>
            更新一条记录【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldNames">更新条件字段集合(请指定为主键字段)</param>
            <param name="fieldValues">更新条件字段值集合(请指定为主键字段的原始值)</param>
            <param name="exCludeFields">更新需排除的字段</param>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Update(`1,System.String,System.Object,System.String[])">
            <summary>
            更新一条记录【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="row">强类型行对象</param>
            <param name="fieldName">更新条件字段集合(请指定为主键字段)</param>
            <param name="fieldValue">更新条件字段值集合(请指定为主键字段的原始值)</param>
            <param name="exCludeFields">更新需排除的字段</param>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Update(`0)">
            <summary>
            更新强类型表【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="strongTable">TTable泛型强类型数据表</param>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Update(System.String[],System.Object[],System.Object[])">
            <summary>
            更新单条记录的指定字段【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="ids">更新记录的条件值(默认使用主键“=“)</param>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Update(System.String,System.Object,System.Object[])">
            <summary>
            更新单条记录的指定字段【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">更新的字段</param>
            <param name="fieldValue">对应字段的值</param>
            <param name="ids">更新记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Update(System.Data.DataTable)">
            <summary>
            更新数据表
            </summary>
            <param name="table">DataTable数据表</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Delete(System.Object[])">
            <summary>
            删除一条记录【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="ids">删除记录的条件值</param>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Delete(System.String[],System.Object[])">
            <summary>
            删除符合条件的记录【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Delete(System.String,System.Object)">
            <summary>
            删除符合条件的记录【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Delete(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除符合条件的记录【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetMaxNext(System.String)">
            <summary>
            获取int型字段的最大值+1【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="intTypeField">int型字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetMaxValue``1(System.String)">
            <summary>
            获取最大值【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetMaxValue``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">t条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetMaxValue``1(System.String,System.String,System.Object)">
            <summary>
            获取最大值【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetMaxValue``1(System.String,System.String[],System.Object[])">
            <summary>
            获取最大值【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRecordCount(System.String,System.Object)">
            <summary>
            获取满足条件的记录总数【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRecordCount(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRecordCount(System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">字段名</param>
            <param name="fieldValues">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationMaxValue``1(System.String,System.String)">
            <summary>
            获取最大值【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName"> 数据表名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取最大值【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationMaxValue``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取最大值【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRecordCount(System.String,System.String,System.Object)">
            <summary>
            获取满足条件的记录总数【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRecordCount(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRecordCount(System.String,System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldNames">字段名</param>
            <param name="fieldValues">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetSingle(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录 不存在返回null[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetSingle(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录 不存在返回null[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段强类型表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段强类型表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="filterFieldName">条件字段</param>
            <param name="filterFieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetList(System.String,System.Object)">
            <summary>
            获取实体记录强类型表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetList(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录强类型表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取实体记录强类型表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录强类型表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetList(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录强类型表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录强类型表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetPageList(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取强类型表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetList(`2,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取强类型表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetPageList(`2,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取强类型表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Insert(`1)">
            <summary>
            插入一行[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="row">强类型行</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Update(System.String[],System.Object[],System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            更新符合条件的记录的指定字段[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="filterFieldName">更新记录的条件字段</param>
            <param name="filterFieldValue">更新记录的条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新符合条件的记录的指定字段[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="filterFieldName">更新记录的条件字段</param>
            <param name="filterFieldValue">更新记录的条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetTable(`2)">
            <summary>
            根据条件对象获取数据表[可重写]
            </summary>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetTable(`2,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表[可重写]
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetPageTable(`2,DevNet.Common.Pagination)">
            <summary>
            根据条件和分页信息获取数据表 [可重写]
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetPageTable(`2,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件和分页信息获取数据表[可重写]
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetPageTable(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取数据表[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetPageTable(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取数据表[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.WriteExceptionMsg(System.String,System.Exception)">
            <summary>
            写日志【可重写】
            </summary>
            <param name="msg"></param>
            <param name="ex">可以为null</param>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.ThrowDevNetException(DevNet.Common.DevNetException)">
            <summary>
            处理自定义异常，未写入日志【可重写】
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.ThrowException(System.Exception)">
            <summary>
            处理系统Exception异常，写入日志 【可重写】
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationSingle``2(``1,System.String,System.Object)">
            <summary>
            获取一条关系数据行【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <typeparam name="TRelationTable">关系表类型</typeparam>
            <param name="relationTable">关系表对象</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationList``1(System.String,System.Object)">
            <summary>
            获取关系数据表【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelationTable">关系数据表类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.InsertRelationRow``1(``0,System.String[])">
            <summary>
            插入关系数据行【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系实体对象</param>
            <param name="exCludeFields">插入需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.InsertRelationRow``1(``0)">
            <summary>
            插入关系实体【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.UpdateRelationRow``1(``0,System.String[])">
            <summary>
            更新关系数据行【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="exCludeFields">更新需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.UpdateRelationRow``1(``0)">
            <summary>
            更新关系数据行【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.UpdateRelationRow``1(``0,System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系数据行【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.UpdateRelationRow``1(``0,System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系数据行【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.DeleteRelationRow``1(``0,System.String,System.Object)">
            <summary>
            删除关系数据行【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.DeleteRelationRow``1(``0,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系数据行【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <param name="relationRow">关系行对象</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.IsExistsRelation(System.String,System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.IsExistsRelation(System.String,System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationSingle``2(``1,System.String[],System.Object[])">
            <summary>
            获取一条关系数据行【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelationRow">关系行类型</typeparam>
            <typeparam name="TRelationTable">关系表类型</typeparam>
            <param name="relationTable">关系表对象</param>
            <param name="relationKeyNames">关系键字段名称</param>
            <param name="relationKeyValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationList``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系数据表【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelationTable">关系数据表</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系数据表【请自行控制物理数据关系】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelationTable">关系数据表</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.UpdateRelationEntity(System.String,System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系数据行【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <param name="relationTableName">关系数据表名称</param>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.BeginTrans">
            <summary>
            开始事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.CommitTrans">
            <summary>
            提交事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.RollBackTrans">
            <summary>
            回滚事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationTable(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationTable(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetTable(System.String,System.Object)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetTable(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetTable(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetTable(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录数据表【可重写】
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetTable(System.String[],System.Object[])">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetScalar``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetScalar``1(System.String,System.String,System.Object)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetScalar``1(System.String,System.String[],System.Object[])">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationScalar``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationScalar``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.BLLTableManager`3.GetRelationScalar``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="P:DevNet.StrongTable.BLLTableManager`3.KeepConnection">
            <summary>
            在该类执行范围内是否保持数据库连接状态
            【如设置为true，请使用using代码块或显式调用Dispose()释放资源】
            </summary>
        </member>
        <member name="P:DevNet.StrongTable.BLLTableManager`3.Script">
            <summary>
            获取ScriptQuery查询类【该类使用参数模式封装了sql语句，提供简单的数据帮助方法】
            </summary>
        </member>
        <member name="P:DevNet.StrongTable.BLLTableManager`3.TDALManager">
            <summary>
            获取或设置数据层接口或数据层执行类
            </summary>
        </member>
        <member name="P:DevNet.StrongTable.BLLTableManager`3.IsFail">
            <summary>
            获取操作是否失败
            </summary>
        </member>
        <member name="P:DevNet.StrongTable.BLLTableManager`3.DevNetException">
            <summary>
            获取自定义异常
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteDbDirect">
            <summary>
            SQLite访问数据库类，请将System.Data.SQLite.dll复制到程序执行目录，并在配置文件AppSettings中设置SQLiteAssembly="System.Data.SQLite.dll"(程序集名称)
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDbDirect.#ctor(System.String)">
            <summary>
            Construct
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDbDirect.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Construct
            </summary>
            <param name="sqliteConn">SQLite连接实例</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDbDirect.CreateCommandBuilder(System.Data.Common.DbDataAdapter)">
            <summary>
            Create DbCommandBuilder
            </summary>
            <param name="da"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDbDirect.CreateDbAdapter(System.Data.Common.DbCommand)">
            <summary>
            Create DbDataAdapater
            </summary>
            <param name="selectCmd"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDbDirect.AddCmdParamWithValue(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            Add DbParameter with value
            </summary>
            <param name="cmd"></param>
            <param name="paramName"></param>
            <param name="paramValue"></param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDbDirect.GetPKList(System.String)">
            <summary>
            Get Table PK_Primary
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter">
            <summary>
            SQLite implementation of DbDataAdapter.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter.#ctor">
            <overloads>
            This class is just a shell around the DbDataAdapter.  Nothing from DbDataAdapter is overridden here, just a few constructors are defined.
            </overloads>
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter.#ctor(DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand)">
            <summary>
            Constructs a data adapter using the specified select command.
            </summary>
            <param name="cmd">The select command to associate with the adapter.</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter.#ctor(System.String,DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection)">
            <summary>
            Constructs a data adapter with the supplied select command text and associated with the specified connection.
            </summary>
            <param name="commandText">The select command text to associate with the data adapter.</param>
            <param name="connection">The connection to associate with the select command.</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Constructs a data adapter with the specified select command text, and using the specified database connection string.
            </summary>
            <param name="commandText">The select command text to use to construct a select command.</param>
            <param name="connectionString">A connection string suitable for passing to a new SQLiteConnection, which is associated with the select command.</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Raised by the underlying DbDataAdapter when a row is being updated
            </summary>
            <param name="value">The event's specifics</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Raised by DbDataAdapter after a row is updated
            </summary>
            <param name="value">The event's specifics</param>
        </member>
        <member name="E:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter.RowUpdating">
            <summary>
            Row updating event handler
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter.RowUpdated">
            <summary>
            Row updated event handler
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter.SelectCommand">
            <summary>
            Gets/sets the select command for this DataAdapter
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter.InsertCommand">
            <summary>
            Gets/sets the insert command for this DataAdapter
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter.UpdateCommand">
            <summary>
            Gets/sets the update command for this DataAdapter
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter.DeleteCommand">
            <summary>
            Gets/sets the delete command for this DataAdapter
            </summary>
        </member>
        <member name="T:DevNet.Common.DictionarySerial`2">
            <summary>
            可序列化的键值集合
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:DevNet.Common.DictionarySerial`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化使用
            </summary>
            <param name="si"></param>
            <param name="context"></param>
        </member>
        <member name="M:DevNet.Common.DictionarySerial`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            可序列化的键值组合
            </summary>
            <param name="iEqualCompare"></param>
        </member>
        <member name="M:DevNet.Common.DictionarySerial`2.#ctor">
            <summary>
            可序列化的键值组合
            </summary>
        </member>
        <member name="T:DevNet.Resource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:DevNet.Resource.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:DevNet.Resource.AdapterIsNull">
            <summary>
              查找类似 Improper MySqlCommandBuilder state: adapter is null 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.AdapterSelectIsNull">
            <summary>
              查找类似 Improper MySqlCommandBuilder state: adapter&apos;s SelectCommand is null 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.BadVersionFormat">
            <summary>
              查找类似 Version string not in acceptable format 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.BufferCannotBeNull">
            <summary>
              查找类似  The buffer cannot be null 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.BufferNotLargeEnough">
            <summary>
              查找类似  Buffer is not large enough 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.CancelNeeds50">
            <summary>
              查找类似 Canceling an executing query requires MySQL 5.0 or higher. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.CancelNotSupported">
            <summary>
              查找类似 Canceling an active query is only supported on MySQL 5.0.0 and above.  的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.CBMultiTableNotSupported">
            <summary>
              查找类似 MySqlCommandBuilder does not support multi-table statements 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.CBNoKeyColumn">
            <summary>
              查找类似 MySqlCommandBuilder cannot operate on tables with no unique or key columns 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ChaosNotSupported">
            <summary>
              查找类似 Chaos isolation level is not supported 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.CommandTextNotInitialized">
            <summary>
              查找类似 The CommandText property has not been properly initialized. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ConnectionAlreadyOpen">
            <summary>
              查找类似 The connection is already open. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ConnectionBroken">
            <summary>
              查找类似 Connection unexpectedly terminated. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ConnectionMustBeOpen">
            <summary>
              查找类似 Connection must be valid and open 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ConnectionNotOpen">
            <summary>
              查找类似 The connection is not open. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ConnectionNotSet">
            <summary>
              查找类似 The connection property has not been set. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.CountCannotBeNegative">
            <summary>
              查找类似  Count cannot be negative 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.CSNoSetLength">
            <summary>
              查找类似 SetLength is not a valid operation on CompressedStream 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.DataReaderOpen">
            <summary>
              查找类似 There is already an open DataReader associated with this Connection which must be closed first. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.DataTypes">
             <summary>
               查找类似 &lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;
            &lt;DocumentElement&gt;
              &lt;DataTypes&gt;
                &lt;TypeName&gt;smallint&lt;/TypeName&gt;
                &lt;ProviderDbType&gt;10&lt;/ProviderDbType&gt;
                &lt;ColumnSize&gt;5&lt;/ColumnSize&gt;
                &lt;DataType&gt;System.Int16&lt;/DataType&gt;
                &lt;CreateFormat&gt;smallint&lt;/CreateFormat&gt;
                &lt;IsAutoIncrementable&gt;false&lt;/IsAutoIncrementable&gt;
                &lt;IsCaseSensitive&gt;false&lt;/IsCaseSensitive&gt;
                &lt;IsFixedLength&gt;true&lt;/IsFixedLength&gt;
                &lt;IsFixedPrecisionScale&gt;true&lt;/IsFixedPrecisionScale&gt;
                &lt;IsLong&gt;false&lt;/IsLong&gt;
                &lt;IsNullable&gt;true&lt;/ [字符串的其余部分被截断]&quot;; 的本地化字符串。
             </summary>
        </member>
        <member name="P:DevNet.Resource.DistributedTxnNotSupported">
            <summary>
              查找类似 MySQL Connector/Net does not currently support distributed transactions. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ErrorCreatingSocket">
            <summary>
              查找类似 Error creating socket connection 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.FromAndLengthTooBig">
            <summary>
              查找类似 From index and length use more bytes than from contains 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.FromIndexMustBeValid">
            <summary>
              查找类似 From index must be a valid index inside the from buffer 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.HardProcQuery">
            <summary>
              查找类似 Retrieving procedure metadata for {0} from server. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ImproperValueFormat">
            <summary>
              查找类似 Value has an unsupported format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.IncorrectTransmission">
            <summary>
              查找类似 An incorrect response was received from the server. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.IndexAndLengthTooBig">
            <summary>
              查找类似 Index and length use more bytes than to has room for 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.IndexMustBeValid">
            <summary>
              查找类似 Index must be a valid position in the buffer 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.InvalidProcName">
            <summary>
              查找类似 Procedure or function &apos;{0}&apos; cannot be found in database &apos;{1}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.KeywordNoNull">
            <summary>
              查找类似 Keyword does not allow null values. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.KeywordNotSupported">
            <summary>
              查找类似 Keyword not supported. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.Keywords">
            <summary>
              查找类似 ALL,ALTER,AND,AS,AUTOINCREMENT,BETWEEN,BY,CASE,CHECK,COLLATE,COMMIT,CONSTRAINT,CREATE,CROSS,DEFAULT,DEFERRABLE,DELETE,DISTINCT,DROP,ELSE,ESCAPE,EXCEPT,FOREIGN,FROM,FULL,GROUP,HAVING,IN,INDEX,INNER,INSERT,INTERSECT,INTO,IS,ISNULL,JOIN,LEFT,LIMIT,NATURAL,NOT,NOTNULL,NULL,ON,OR,ORDER,OUTER,PRIMARY,REFERENCES,RIGHT,ROLLBACK,SELECT,SET,TABLE,THEN,TO,TRANSACTION,UNION,UNIQUE,UPDATE,USING,VALUES,WHEN,WHERE 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.MetaDataCollections">
             <summary>
               查找类似 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;DocumentElement&gt;
              &lt;MetaDataCollections&gt;
                &lt;CollectionName&gt;MetaDataCollections&lt;/CollectionName&gt;
                &lt;NumberOfRestrictions&gt;0&lt;/NumberOfRestrictions&gt;
                &lt;NumberOfIdentifierParts&gt;0&lt;/NumberOfIdentifierParts&gt;
              &lt;/MetaDataCollections&gt;
              &lt;MetaDataCollections&gt;
                &lt;CollectionName&gt;DataSourceInformation&lt;/CollectionName&gt;
                &lt;NumberOfRestrictions&gt;0&lt;/NumberOfRestrictions&gt;
                &lt;NumberOfIdentifierParts&gt;0&lt;/NumberOfIdentifierParts&gt;
              &lt;/MetaDataCollections&gt;
              &lt;MetaDataC [字符串的其余部分被截断]&quot;; 的本地化字符串。
             </summary>
        </member>
        <member name="P:DevNet.Resource.MixingUpdatedRowSource">
            <summary>
              查找类似 When MySqlCommandBuilder.ReturnGeneratedIdentifiers is true, MySqlCommand.UpdatedRowSource must be set to None. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.MultipleConnectionsInTransactionNotSupported">
            <summary>
              查找类似 Multiple simultaneous connections or connections with different connection strings inside the same transaction are not currently supported. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.NamedPipeNoSeek">
            <summary>
              查找类似 NamedPipeStream does not support seeking 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.NamedPipeNoSetLength">
            <summary>
              查找类似 NamedPipeStream doesn&apos;t support SetLength 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.NextResultIsClosed">
            <summary>
              查找类似 Invalid attempt to call NextResult when the reader is closed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.NoBodiesAndTypeNotSet">
            <summary>
              查找类似 When calling stored procedures and &apos;Use Procedure Bodies&apos; is false, all parameters must have their type explicitly set. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.NoNestedTransactions">
            <summary>
              查找类似 Nested transactions are not supported. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ObjectDisposed">
            <summary>
              查找类似 The object is not open or has been disposed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.OffsetCannotBeNegative">
            <summary>
              查找类似  Offset cannot be negative 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.OffsetMustBeValid">
            <summary>
              查找类似 Offset must be a valid position in buffer 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ParameterAlreadyDefined">
            <summary>
              查找类似 Parameter &apos;{0}&apos; has already been defined. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ParameterCannotBeNegative">
            <summary>
              查找类似 Parameter cannot have a negative value 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ParameterCannotBeNull">
            <summary>
              查找类似 Parameter cannot be null 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ParameterIsInvalid">
            <summary>
              查找类似 Parameter is invalid. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ParameterMustBeDefined">
            <summary>
              查找类似 Parameter &apos;{0}&apos; must be defined. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.PasswordMustHaveLegalChars">
            <summary>
              查找类似 Password must be valid and contain length characters 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.PerfMonCategoryHelp">
            <summary>
              查找类似 This category includes a series of counters for MySQL. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.PerfMonCategoryName">
            <summary>
              查找类似 .NET Data Provider for MySQL 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.PerfMonHardProcHelp">
            <summary>
              查找类似 The number of times a procedures metadata had to be queried from the server. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.PerfMonHardProcName">
            <summary>
              查找类似 Hard Procedure Queries 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.PerfMonSoftProcHelp">
            <summary>
              查找类似 The number of times a procedures metadata was retrieved from the client-side cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.PerfMonSoftProcName">
            <summary>
              查找类似 Soft Procedure Queries 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ProcAndFuncSameName">
            <summary>
              查找类似 same name are not supported. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.QueryTooLarge">
            <summary>
              查找类似 Packets larger than max_allowed_packet are not allowed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.ReadFromStreamFailed">
            <summary>
              查找类似 Reading from the stream has failed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.SocketNoSeek">
            <summary>
              查找类似 Socket streams do not support seeking 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.SoftProcQuery">
            <summary>
              查找类似 Retrieving procedure metadata for {0} from procedure cache. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.SPNotSupported">
            <summary>
              查找类似 Stored procedures are not supported on this version of MySQL 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.StreamAlreadyClosed">
            <summary>
              查找类似 The stream has already been closed 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.StreamNoRead">
            <summary>
              查找类似  The stream does not support reading 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.StreamNoWrite">
            <summary>
              查找类似 The stream does not support writing 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.Timeout">
            <summary>
              查找类似 Timeout expired.  The timeout period elapsed prior to completion of the operation or the server is not responding. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.TimeoutGettingConnection">
            <summary>
              查找类似 error connecting: Timeout expired.  The timeout period elapsed prior to obtaining a connection from the pool.  This may have occurred because all pooled connections were in use and max pool size was reached. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.UnableToConnectToHost">
            <summary>
              查找类似 Unable to connect to any of the specified MySQL hosts. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.UnableToExecuteSP">
            <summary>
              查找类似 Unable to execute stored procedure &apos;{0}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.UnableToParseFK">
            <summary>
              查找类似 There was an error parsing the foreign key definition. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.UnableToRetrieveSProcData">
            <summary>
              查找类似 Unable to retrieve stored procedure metadata.  Either grant  SELECTprivilege to mysql.proc for this user or use &quot;use procedure bodies=false&quot; with  your connection string. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.UnixSocketsNotSupported">
            <summary>
              查找类似 Unix sockets are not supported on Windows 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.WriteToStreamFailed">
            <summary>
              查找类似 Writing to the stream failed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:DevNet.Resource.WrongParameterName">
            <summary>
              查找类似 Parameter &apos;{0}&apos; is not found but a parameter with the name &apos;{1}&apos; is found. Parameter names must include the leading parameter marker. 的本地化字符串。
            </summary>
        </member>
        <member name="T:DevNet.Entity.DataManager`2">
            <summary>
            数据操作抽象基类 [作为数据层基类以提高代码复用性]  [可重写]
            </summary>
            <typeparam name="T">泛型对象 通常指数据表实体对象(请继承自EntityBase接口)</typeparam>
            <typeparam name="TCondition">条件查询的类实体【如不需要，可以用“object”替代】</typeparam>
        </member>
        <member name="T:DevNet.Entity.IDataManager`2">
            <summary>
            数据管理接口 提供基本的数据操作方法
            </summary>
            <typeparam name="T">泛型对象 通常指数据表实体对象</typeparam>
            <typeparam name="TCondition">条件查询的类实体【如不需要，可以用“object”替代】</typeparam>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.BeginTrans">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.CommitTrans">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.RollBackTrans">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetSingle(System.Object[])">
            <summary>
            获取一条记录实体  不存在返回null
            </summary>
            <param name="ids">主键值参数</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetSingle(System.String[],System.Object[])">
            <summary>
            获取一条记录实体 不存在返回null
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetSingle(System.String,System.Object)">
            <summary>
            获取一条记录实体 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetSingle(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetSingle(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetSingle(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取一条记录实体 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetSingle(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetTopList(System.Int32,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetTopList(System.Int32,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetTopList(System.Int32,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldNames">条件字段名称</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段记录集合
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段记录集合
            </summary>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetList(System.String,System.Object)">
            <summary>
            获取实体记录集合
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetList(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取实体记录集合
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetList(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录实体集合
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetList(`1,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取实体集合
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetList">
            <summary>
            获取所有记录实体集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetList(System.String[],System.Object[])">
            <summary>
            获取实体记录集合
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetList(`1)">
            <summary>
            根据条件对象获取实体集合
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetPageList(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取实体集合
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetPageList(`1,DevNet.Common.Pagination)">
            <summary>
            根据条件和分页信息获取实体集合
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetPageList(`1,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件和分页信息获取实体集合
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetPageList(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取实体集合
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetTable">
            <summary>
            获取所有记录的数据表
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetTable(`1)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetTable(`1,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetTable(System.String,System.Object)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetTable(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetTable(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetTable(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录数据表
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetTable(System.String[],System.Object[])">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetPageTable(`1,DevNet.Common.Pagination)">
            <summary>
            根据条件和分页信息获取数据表 
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetPageTable(`1,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件和分页信息获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetPageTable(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取数据表
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetPageTable(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取数据表
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Insert(`0,System.String[])">
            <summary>
            插入一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">插入需排除的字段(譬如自增长型字段)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Insert(`0)">
            <summary>
            插入一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Update(`0,System.String[],System.Object[])">
            <summary>
            更新一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldNames">更新条件字段集合</param>
            <param name="conditionFieldValues">更新条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Update(`0,System.String,System.Object)">
            <summary>
            更新一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldName">更新条件字段</param>
            <param name="conditionFieldValue">更新条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Update(`0,System.String[],System.Object[],System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldNames">更新条件字段集合</param>
            <param name="conditionFieldValues">更新条件字段值集合</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Update(`0,System.String,System.Object,System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldName">更新条件字段</param>
            <param name="conditionFieldValue">更新条件字段值</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Update(`0,System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Update(`0)">
            <summary>
            更新一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Update(System.String,System.Object,System.Object[])">
            <summary>
            更新单条记录的指定字段
            </summary>
            <param name="fieldName">更新的字段</param>
            <param name="fieldValue">对应字段的值</param>
            <param name="ids">更新记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Update(System.String[],System.Object[],System.Object[])">
            <summary>
            更新单条记录的指定字段
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="ids">更新记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Update(System.String[],System.Object[],System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            更新符合条件的记录的指定字段
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="conditionFieldName">更新记录的条件字段</param>
            <param name="conditionFieldValue">更新记录的条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新符合条件的记录的指定字段
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="conditionFieldNames">更新记录的条件字段集合</param>
            <param name="conditionFieldValues">更新记录的条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Update(System.Data.DataTable)">
            <summary>
            更新数据表
            </summary>
            <param name="table">DataTable数据表</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Delete(System.Object[])">
            <summary>
            删除一条记录
            </summary>
            <param name="ids">删除记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Delete(System.String[],System.Object[])">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Delete(System.String,System.Object)">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.Delete(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetMaxNext(System.String)">
            <summary>
            获取int型字段的最大值+1
            </summary>
            <param name="intTypeField">int型字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetMaxValue``1(System.String)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetMaxValue``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetMaxValue``1(System.String,System.String,System.Object)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetMaxValue``1(System.String,System.String[],System.Object[])">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRecordCount(System.String,System.Object)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRecordCount(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRecordCount(System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="fieldNames">条件字段名</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.IsExists(System.String,System.Object)">
            <summary>
            数据表中是否存在满足指定条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.IsExists(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            数据表中是否存在满足指定条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.IsExists(System.String[],System.Object[])">
            <summary>
            数据表中是否存在满足指定条件的记录
            </summary>
            <param name="fieldNames">条件字段集合</param>
            <param name="fieldValues">条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.CheckRecord(System.String,System.Object,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的比较值
            </summary>
            <param name="fieldName">比较字段</param>
            <param name="fieldValue">比较字段值</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.CheckRecord(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的比较值
            </summary>
            <param name="fieldName">比较字段</param>
            <param name="fieldValue">比较字段值</param>
            <param name="compareEnum">比较枚举</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetScalar``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetScalar``1(System.String,System.String,System.Object)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetScalar``1(System.String,System.String[],System.Object[])">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationSingle``1(System.String,System.Object)">
            <summary>
            获取一条关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationSingle``1(System.String,System.String,System.Object)">
            <summary>
            获取一条关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationSingle``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationSingle``1(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationList``1(System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationList``1(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationList``1(System.String,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationList``1(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationList``1(System.String,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationList``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationList``1(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationList``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationList``1(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationList``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.InsertRelationEntity``1(``0,System.String[])">
            <summary>
            插入关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <param name="exCludeFields">插入需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.InsertRelationEntity``1(``0)">
            <summary>
            插入关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.UpdateRelationEntity``1(``0,System.String[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <param name="exCludeFields">更新需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.UpdateRelationEntity``1(``0)">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.UpdateRelationEntity``1(System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.UpdateRelationEntity(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.UpdateRelationEntity``1(System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.UpdateRelationEntity``1(System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.UpdateRelationEntity(System.String,System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.UpdateRelationEntity``1(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.DeleteRelationEntity``1(System.String,System.Object)">
            <summary>
            删除关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.DeleteRelationEntity(System.String,System.String,System.Object)">
            <summary>
            删除关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.DeleteRelationEntity``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.DeleteRelationEntity(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.DeleteRelationEntity``1(System.String[],System.Object[])">
            <summary>
            删除关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldNames">关系键字段名称</param>
            <param name="fieldValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.DeleteRelationEntity(System.String,System.String[],System.Object[])">
            <summary>
            删除关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">关系键字段名称</param>
            <param name="fieldValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.IsExistsRelation``1(System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.IsExistsRelation(System.String,System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.IsExistsRelation``1(System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.IsExistsRelation(System.String,System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.CheckRelationRecord(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            数据表中指定关系键值的记录是否满足指定的比较值
            </summary>
            <param name="tableName">关系表名</param>
            <param name="fieldName">比较的字段</param>
            <param name="fieldValue">比较的字段值</param>
            <param name="relationKeyName">关系字段</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.CheckRelationRecord(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,System.Object)">
            <summary>
            数据表中指定关系键值的记录是否满足指定的比较值
            </summary>
            <param name="tableName">关系表名</param>
            <param name="fieldName">比较的字段</param>
            <param name="fieldValue">比较的字段值</param>
            <param name="compareEnum">比较的枚举</param>
            <param name="relationKeyName">关系字段</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationTable(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationTable(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationTable(System.String,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationTable(System.String,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationScalar``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationScalar``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationScalar``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationRecordCount(System.String,System.String,System.Object)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationRecordCount(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationRecordCount(System.String,System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldNames">条件字段名</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationMaxValue``1(System.String,System.String)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName"> 数据表名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IDataManager`2.GetRelationMaxValue``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="P:DevNet.Entity.IDataManager`2.KeepConnection">
            <summary>
            在该类执行范围内是否保持数据库连接状态
            【如设置为true，请使用using代码块或显式调用Dispose()释放资源】
            </summary>
        </member>
        <member name="P:DevNet.Entity.IDataManager`2.Script">
            <summary>
            获取ScriptQuery查询类【该类使用参数模式封装了sql语句，提供简单的数据帮助方法】
            </summary>
        </member>
        <member name="P:DevNet.Entity.IDataManager`2.TableName">
            <summary>
            操作的数据表名
            </summary>
        </member>
        <member name="E:DevNet.Entity.IDataManager`2.BeforeInsert">
            <summary>
            Insert前事件
            </summary>
        </member>
        <member name="E:DevNet.Entity.IDataManager`2.AfterInsert">
            <summary>
            Insert后事件
            </summary>
        </member>
        <member name="E:DevNet.Entity.IDataManager`2.BeforeUpdate">
            <summary>
            Update前事件
            </summary>
        </member>
        <member name="E:DevNet.Entity.IDataManager`2.AfterUpdate">
            <summary>
            Update后事件
            </summary>
        </member>
        <member name="E:DevNet.Entity.IDataManager`2.BeforeDelete">
            <summary>
            Delete前事件
            </summary>
        </member>
        <member name="E:DevNet.Entity.IDataManager`2.AfterDelete">
            <summary>
            Delete后事件
            </summary>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="tableName">操作的数据表名，如果T直接是EntityBase，请调用无参数构造函数，然后设置TEntity属性值</param>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.BeginTrans">
            <summary>
            开始事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.CommitTrans">
            <summary>
            提交事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.RollBackTrans">
            <summary>
            回滚事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.OnBeforeInsert(DevNet.Handle.InsertHandleArg)">
            <summary>
            Insert前方法[可重写]
            </summary>
            <param name="insertHandleArg"></param>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.OnAfterInsert(DevNet.Handle.InsertHandleArg)">
            <summary>
            Insert后方法[可重写]
            </summary>
            <param name="insertHandleArg"></param>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.OnBeforeUpdate(DevNet.Handle.UpdateHandleArg)">
            <summary>
            Update前方法[可重写]
            </summary>
            <param name="updateHandleArg"></param>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.OnAfterUpdate(DevNet.Handle.UpdateHandleArg)">
            <summary>
            Update后方法[可重写]
            </summary>
            <param name="updateHandleArg"></param>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.OnBeforeDelete(DevNet.Handle.DeleteHandleArg)">
            <summary>
            Delete前方法[可重写]
            </summary>
            <param name="deleteHandleArg"></param>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.OnAfterDelete(DevNet.Handle.DeleteHandleArg)">
            <summary>
            Delete后方法[可重写]
            </summary>
            <param name="deleteHandleArg"></param>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetSingle(System.String[],System.Object[])">
            <summary>
            获取一条记录实体 默认条件“=” 不存在返回null  【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetSingle(System.String,System.Object)">
            <summary>
            获取一条记录实体 默认条件“=” 不存在返回null  【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetSingle(System.Object[])">
            <summary>
            获取一条记录实体,不存在返回null  【可重写】
            </summary>
            <param name="ids">主键值参数(默认使用主键字段" = "匹配)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetSingle(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetSingle(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetSingle(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取一条记录实体 不存在返回null[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetSingle(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTopList(System.Int32,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTopList(System.Int32,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTopList(System.Int32,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldNames">条件字段名称</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段记录集合[可重写]
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段记录集合[可重写]
            </summary>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetList(System.String,System.Object)">
            <summary>
            获取实体记录集合[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetList(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取实体记录集合[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetList(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合【重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录实体集合[可重写]
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetList">
            <summary>
            获取所有记录实体集合  【可重写】
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetList(System.String[],System.Object[])">
            <summary>
            获取实体记录集合 默认“=” 【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetList(`1)">
            <summary>
            根据条件对象获取实体集合 【请重写】
            </summary>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetList(`1,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件获取实体集合
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetPageList(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取实体集合[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetPageList(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取实体  【可重写】
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetPageList(`1,DevNet.Common.Pagination)">
            <summary>
            根据条件和分页信息获取实体集合  【请重写】
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetPageList(`1,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件和分页信息获取实体集合
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Insert(`0,System.String[])">
            <summary>
            插入一条记录(默认排除自动增长型字段，插入成功后自动设置自增长型字段)  【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">插入需排除的字段(譬如自增长型字段)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Insert(`0)">
            <summary>
            插入一条记录(默认排除自动增长型字段，插入成功后自动设置自增长型字段)  【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Update(`0,System.String[],System.Object[])">
            <summary>
            更新一条记录【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldNames">更新条件字段集合(请指定为主键字段)</param>
            <param name="conditionFieldValues">更新条件字段值集合(请指定为主键字段的原始值)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Update(`0,System.String,System.Object)">
            <summary>
            更新一条记录【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldName">更新条件字段(请指定为主键字段)</param>
            <param name="conditionFieldValue">更新条件字段值(请指定为主键字段的原始值)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Update(`0,System.String[],System.Object[],System.String[])">
            <summary>
            更新一条记录【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldNames">更新条件字段(请指定为主键字段)</param>
            <param name="conditionFieldValues">更新条件字段值(请指定为主键字段的原始值)</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Update(`0,System.String,System.Object,System.String[])">
            <summary>
            更新一条记录【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldName">更新条件字段(请指定为主键字段)</param>
            <param name="conditionFieldValue">更新条件字段值(请指定为主键字段的原始值)</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Update(`0,System.String[])">
            <summary>
            更新一条记录(默认移除主键字段)  【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Update(System.String[],System.Object[],System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            更新符合条件的记录的指定字段[可重写]
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="conditionFieldName">更新记录的条件字段</param>
            <param name="conditionFieldValue">更新记录的条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新符合条件的记录的指定字段[可重写]
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="conditionFieldName">更新记录的条件字段</param>
            <param name="conditionFieldValue">更新记录的条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Update(`0)">
            <summary>
            更新一条记录(默认移除主键字段)  【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Update(System.String[],System.Object[],System.Object[])">
            <summary>
            更新单条记录的指定字段(默认使用主键字段“=”)  【可重写】
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段值</param>
            <param name="ids">更新记录的条件值(默认使用主键字段“=”) </param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Update(System.String,System.Object,System.Object[])">
            <summary>
            更新单条记录的指定字段
            </summary>
            <param name="fieldName">更新的字段</param>
            <param name="fieldValue">对应字段的值</param>
            <param name="ids">更新记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Update(System.Data.DataTable)">
            <summary>
            更新数据表
            </summary>
            <param name="table">DataTable数据表</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Delete(System.Object[])">
            <summary>
            删除一条记录  【可重写】
            </summary>
            <param name="ids">删除记录的条件值(默认使用主键字段" = "匹配)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Delete(System.String[],System.Object[])">
            <summary>
            删除符合条件的记录  默认条件“=”  【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Delete(System.String,System.Object)">
            <summary>
            删除符合条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Delete(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除符合条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetMaxValue``1(System.String)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetMaxValue``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">t条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetMaxValue``1(System.String,System.String,System.Object)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetMaxValue``1(System.String,System.String[],System.Object[])">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRecordCount(System.String,System.Object)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRecordCount(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRecordCount(System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="fieldNames">条件字段名</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetMaxNext(System.String)">
            <summary>
            获取int型字段的最大值+1  【可重写】
            </summary>
            <param name="intTypeField">int型字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.IsExists(System.String,System.Object)">
            <summary>
            数据表中是否存在满足指定条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.IsExists(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            数据表中是否存在满足指定条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.IsExists(System.String[],System.Object[])">
            <summary>
            数据表中是否存在满足指定条件的记录【可重写】
            </summary>
            <param name="fieldNames">条件字段集合</param>
            <param name="fieldValues">条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.CheckRecord(System.String,System.Object,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.CheckRecord(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTable">
            <summary>
            获取所有记录的数据表[可重写]
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTable(`1)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTable(`1,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTable(System.String,System.Object)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTable(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTable(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTable(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录数据表【可重写】
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTable(System.String[],System.Object[])">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetScalar``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetScalar``1(System.String,System.String,System.Object)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetScalar``1(System.String,System.String[],System.Object[])">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetPageTable(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取数据表[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetPageTable(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取数据表[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetPageTable(`1,DevNet.Common.Pagination)">
            <summary>
            根据条件和分页信息获取数据表 
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetPageTable(`1,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件和分页信息获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.Clone">
            <summary>
            克隆类的新实例 [可重写.NET2.0重写成(Activator.CreateInstance(this.GetType());)]
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.IsExistsRelation``1(System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.IsExistsRelation``1(System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.IsExistsRelation(System.String,System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.IsExistsRelation(System.String,System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationList``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationList``1(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationList``1(System.String,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationList``1(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationList``1(System.String,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationList``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationList``1(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationList``1(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationList``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationList``1(System.String,System.Object)">
            <summary>
            加载关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.InsertRelationEntity``1(``0,System.String[])">
            <summary>
            插入关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <param name="exCludeFields">插入需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.InsertRelationEntity``1(``0)">
            <summary>
            插入关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.UpdateRelationEntity``1(System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.UpdateRelationEntity``1(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.UpdateRelationEntity``1(``0,System.String[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <param name="exCludeFields">更新需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.UpdateRelationEntity``1(``0)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.UpdateRelationEntity``1(System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.UpdateRelationEntity``1(System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.UpdateRelationEntity(System.String,System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.UpdateRelationEntity(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.DeleteRelationEntity``1(System.String,System.Object)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.DeleteRelationEntity``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.DeleteRelationEntity(System.String,System.String,System.Object)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.DeleteRelationEntity(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.DeleteRelationEntity``1(System.String[],System.Object[])">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldNames">关系键字段名称</param>
            <param name="fieldValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.DeleteRelationEntity(System.String,System.String[],System.Object[])">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">关系键字段名称</param>
            <param name="fieldValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.CheckRelationRecord(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            数据表中指定关系键值的记录是否满足指定的比较值
            </summary>
            <param name="tableName">关系表名</param>
            <param name="fieldName">比较的字段</param>
            <param name="fieldValue">比较的字段值</param>
            <param name="relationKeyName">关系字段</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.CheckRelationRecord(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,System.Object)">
            <summary>
            数据表中指定关系键值的记录是否满足指定的比较值
            </summary>
            <param name="tableName">关系表名</param>
            <param name="fieldName">比较的字段</param>
            <param name="fieldValue">比较的字段值</param>
            <param name="compareEnum">比较的枚举</param>
            <param name="relationKeyName">关系字段</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationTable(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationTable(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationTable(System.String,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationTable(System.String,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationScalar``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationScalar``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationScalar``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationSingle``1(System.String,System.String,System.Object)">
            <summary>
            获取一条关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationSingle``1(System.String,System.Object)">
            <summary>
            加载一条关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationSingle``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationSingle``1(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationMaxValue``1(System.String,System.String)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName"> 数据表名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationMaxValue``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationRecordCount(System.String,System.String,System.Object)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationRecordCount(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetRelationRecordCount(System.String,System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldNames">条件字段名</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.EntityGetMaxNext(System.String)">
            <summary>
            获取int型字段的最大值+1  
            </summary>
            <param name="intTypeField">int型字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.EntityGetSingle(System.Object[])">
            <summary>
            获取一条记录实体对象，不存在返回null 
            </summary>
            <param name="uniqueIDS">唯一值参数(默认使用主键字段" = "匹配)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.EntityGetList">
            <summary>
             
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.EntityGetPageList(DevNet.Common.Pagination)">
            <summary>
            分页信息实体集合
            </summary>
            <param name="pagination"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.EntityInsert(`0,System.String[])">
            <summary>
            插入一条记录 (默认排除自动增长型字段，插入成功后自动设置自增长型字段)
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">插入需排除的字段(譬如自增长型字段)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.EntityUpdate(`0,System.String[])">
            <summary>
            更新一条记录(默认移除主键字段和自增长型字段)
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.EntityDelete(System.Object[])">
            <summary>
            删除一条记录 
            </summary>
            <param name="uniqueIDS">删除记录的条件值(默认使用主键字段" = "匹配)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.DataManager`2.GetTEntityList(System.Data.DataTable)">
            <summary>
            获取TEntity.Clone的实体集合
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="P:DevNet.Entity.DataManager`2.KeepConnection">
            <summary>
            在该类执行范围内是否保持数据库连接状态
            【如设置为true，请使用using代码块或显式调用Dispose()释放资源】
            </summary>
        </member>
        <member name="P:DevNet.Entity.DataManager`2.TEntity">
            <summary>
            泛型实体实例，默认使用T泛型表名，
            可以使用该属性实现实体注入来修改T泛型的具体类型，
            建议在T泛型直接是EntityBase时使用[可重写]
            </summary>
        </member>
        <member name="P:DevNet.Entity.DataManager`2.TableName">
            <summary>
            操作的数据表名，默认使用TEntity的表名，
            如果T直接是EntityBase，请设置TEntity属性值【可重写】
            </summary>
        </member>
        <member name="P:DevNet.Entity.DataManager`2.DBCon">
            <summary>
            获取或设置数据连接对象[可重写]
            </summary>
        </member>
        <member name="P:DevNet.Entity.DataManager`2.Script">
            <summary>
            获取ScriptQuery查询类【该类使用参数模式封装了sql语句，提供简单的数据帮助方法】[可重写]
            </summary>
        </member>
        <member name="P:DevNet.Entity.DataManager`2.Mapper">
            <summary>
            数据映射对象[可重写]
            </summary>
        </member>
        <member name="E:DevNet.Entity.DataManager`2.BeforeInsert">
            <summary>
            Insert前事件
            </summary>
        </member>
        <member name="E:DevNet.Entity.DataManager`2.AfterInsert">
            <summary>
            Insert后事件
            </summary>
        </member>
        <member name="E:DevNet.Entity.DataManager`2.BeforeUpdate">
            <summary>
            Update前事件
            </summary>
        </member>
        <member name="E:DevNet.Entity.DataManager`2.AfterUpdate">
            <summary>
            Update后事件
            </summary>
        </member>
        <member name="E:DevNet.Entity.DataManager`2.BeforeDelete">
            <summary>
            Delete前事件
            </summary>
        </member>
        <member name="E:DevNet.Entity.DataManager`2.AfterDelete">
            <summary>
            Delete后事件
            </summary>
        </member>
        <member name="T:DevNet.Entity.BLLManager`2">
            <summary>
            业务逻辑抽象基类 [作为业务逻辑层基类以提高代码复用性]  [可重写,重写时请先执行ResetError()方法以清空错误信息]
            </summary>
            <typeparam name="T">泛型对象 通常指数据表实体对象(请继承自EntityBase接口)</typeparam>
            <typeparam name="TCondition">条件查询的类实体【如不需要，可以用“object”替代】</typeparam>
        </member>
        <member name="T:DevNet.Entity.IBLLManager`2">
            <summary>
            业务逻辑管理接口 提供基本的业务逻辑方法
            </summary>
            <typeparam name="T">泛型对象 通常指数据表实体对象</typeparam>
            <typeparam name="TCondition">条件查询的类实体【如不需要，可以用“object”替代】</typeparam>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.BeginTrans">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.CommitTrans">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.RollBackTrans">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetSingle(System.Object[])">
            <summary>
            获取一条记录实体  不存在返回null
            </summary>
            <param name="ids">唯一值参数</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetSingle(System.String[],System.Object[])">
            <summary>
            获取一条记录实体  不存在返回null
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetSingle(System.String,System.Object)">
            <summary>
            获取一条记录实体  不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetSingle(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetSingle(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetSingle(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取一条记录实体 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetSingle(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetTopList(System.Int32,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetTopList(System.Int32,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetTopList(System.Int32,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldNames">条件字段名称</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段记录集合
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段记录集合
            </summary>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetList(System.String,System.Object)">
            <summary>
            获取实体记录集合
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetList(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取实体记录集合
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetList(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录实体集合
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetList(`1,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取实体集合
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetList">
            <summary>
            获取所有记录实体集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetList(System.String[],System.Object[])">
            <summary>
            获取实体记录集合
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetList(`1)">
            <summary>
            根据条件对象获取实体集合
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetPageList(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取实体集合
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetPageList(`1,DevNet.Common.Pagination)">
            <summary>
            根据条件和分页信息获取实体集合
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetPageList(`1,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件和分页信息获取实体集合
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetPageList(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取实体集合
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetTable">
            <summary>
            获取所有记录的数据表
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetTable(`1)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetTable(`1,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetPageTable(`1,DevNet.Common.Pagination)">
            <summary>
            根据条件和分页信息获取数据表 
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetPageTable(`1,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件和分页信息获取数据表
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetPageTable(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取数据表
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetPageTable(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取数据表
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Insert(`0,System.String[])">
            <summary>
            插入一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">插入需排除的字段(譬如自增长型字段)</param>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Insert(`0)">
            <summary>
            插入一条记录
            </summary>
            <param name="objEntity">实体对象</param>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Update(`0,System.String[],System.Object[])">
            <summary>
            更新一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldNames">更新条件字段集合</param>
            <param name="conditionFieldValues">更新条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Update(`0,System.String,System.Object)">
            <summary>
            更新一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldName">更新条件字段</param>
            <param name="conditionFieldValue">更新条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Update(`0,System.String[],System.Object[],System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldNames">更新条件字段集合</param>
            <param name="conditionFieldValues">更新条件字段值集合</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Update(`0,System.String,System.Object,System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldName">更新条件字段</param>
            <param name="conditionFieldValue">更新条件字段值</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Update(`0,System.String[])">
            <summary>
            更新一条记录
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">更新需排除的字段</param>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Update(`0)">
            <summary>
            更新一条记录
            </summary>
            <param name="objEntity">实体对象</param>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Update(System.Data.DataTable)">
            <summary>
            更新数据表
            </summary>
            <param name="table">DataTable数据表</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Update(System.String,System.Object,System.Object[])">
            <summary>
            更新单条记录的指定字段
            </summary>
            <param name="fieldName">更新的字段</param>
            <param name="fieldValue">对应字段的值</param>
            <param name="ids">更新记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Update(System.String[],System.Object[],System.Object[])">
            <summary>
            更新单条记录的指定字段
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="ids">更新记录的条件值</param>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Update(System.String[],System.Object[],System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            更新符合条件的记录的指定字段
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="conditionFieldName">更新记录的条件字段</param>
            <param name="conditionFieldValue">更新记录的条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新符合条件的记录的指定字段
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="conditionFieldName">更新记录的条件字段集合</param>
            <param name="conditionFieldValue">更新记录的条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Delete(System.Object[])">
            <summary>
            删除一条记录
            </summary>
            <param name="ids">删除记录的条件值</param>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Delete(System.String[],System.Object[])">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Delete(System.String,System.Object)">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.Delete(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除符合条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetMaxValue``1(System.String)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetMaxValue``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">t条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetMaxValue``1(System.String,System.String,System.Object)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetMaxValue``1(System.String,System.String[],System.Object[])">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRecordCount(System.String,System.Object)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRecordCount(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRecordCount(System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="fieldNames">条件字段名</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetMaxNext(System.String)">
            <summary>
            获取int型字段的最大值+1
            </summary>
            <param name="intTypeField">int型字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.IsExists(System.String,System.Object)">
            <summary>
            数据表中是否存在满足指定条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.IsExists(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            数据表中是否存在满足指定条件的记录
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.IsExists(System.String[],System.Object[])">
            <summary>
            数据表中是否存在满足指定条件的记录
            </summary>
            <param name="fieldNames">条件字段集合</param>
            <param name="fieldValues">条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.CheckRecord(System.String,System.Object,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的比较值
            </summary>
            <param name="fieldName">比较字段</param>
            <param name="fieldValue">比较字段值</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.CheckRecord(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的比较值
            </summary>
            <param name="fieldName">比较字段</param>
            <param name="fieldValue">比较字段值</param>
            <param name="compareEnum">比较枚举</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetTable(System.String,System.Object)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetTable(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetTable(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetTable(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录数据表
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetTable(System.String[],System.Object[])">
            <summary>
            根据条件对象获取数据表
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetScalar``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetScalar``1(System.String,System.String,System.Object)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetScalar``1(System.String,System.String[],System.Object[])">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationSingle``1(System.String,System.Object)">
            <summary>
            获取一条关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationList``1(System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationSingle``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationSingle``1(System.String,System.String,System.Object)">
            <summary>
            获取一条关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationSingle``1(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.InsertRelationEntity``1(``0,System.String[])">
            <summary>
            插入关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <param name="exCludeFields">插入需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.InsertRelationEntity``1(``0)">
            <summary>
            插入关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.UpdateRelationEntity``1(``0,System.String[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <param name="exCludeFields">更新需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.UpdateRelationEntity``1(``0)">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.UpdateRelationEntity``1(System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.UpdateRelationEntity``1(System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.UpdateRelationEntity``1(System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.UpdateRelationEntity``1(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.UpdateRelationEntity(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.UpdateRelationEntity(System.String,System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.DeleteRelationEntity``1(System.String,System.Object)">
            <summary>
            删除关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.DeleteRelationEntity``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.DeleteRelationEntity(System.String,System.String,System.Object)">
            <summary>
            删除关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.DeleteRelationEntity(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.DeleteRelationEntity``1(System.String[],System.Object[])">
            <summary>
            删除关系实体【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldNames">关系键字段名称</param>
            <param name="fieldValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.DeleteRelationEntity(System.String,System.String[],System.Object[])">
            <summary>
            删除关系实体【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">关系键字段名称</param>
            <param name="fieldValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.IsExistsRelation``1(System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.IsExistsRelation``1(System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.IsExistsRelation(System.String,System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.IsExistsRelation(System.String,System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationList``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationList``1(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationList``1(System.String,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationList``1(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationList``1(System.String,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationList``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationList``1(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationList``1(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationList``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.CheckRelationRecord(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            数据表中指定关系键值的记录是否满足指定的比较值
            </summary>
            <param name="tableName">关系表名</param>
            <param name="fieldName">比较的字段</param>
            <param name="fieldValue">比较的字段值</param>
            <param name="relationKeyName">关系字段</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.CheckRelationRecord(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,System.Object)">
            <summary>
            数据表中指定关系键值的记录是否满足指定的比较值
            </summary>
            <param name="tableName">关系表名</param>
            <param name="fieldName">比较的字段</param>
            <param name="fieldValue">比较的字段值</param>
            <param name="compareEnum">比较的枚举</param>
            <param name="relationKeyName">关系字段</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationTable(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationTable(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationTable(System.String,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationTable(System.String,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationScalar``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationScalar``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationScalar``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取单值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationMaxValue``1(System.String,System.String)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName"> 数据表名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationMaxValue``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取最大值
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationRecordCount(System.String,System.String,System.Object)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationRecordCount(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.IBLLManager`2.GetRelationRecordCount(System.String,System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldNames">条件字段名</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="P:DevNet.Entity.IBLLManager`2.IsFail">
            <summary>
            获取操作是否失败
            </summary>
        </member>
        <member name="P:DevNet.Entity.IBLLManager`2.DevNetException">
            <summary>
            获取自定义异常
            </summary>
        </member>
        <member name="P:DevNet.Entity.IBLLManager`2.KeepConnection">
            <summary>
            在该类执行范围内是否保持数据库连接状态
            【如设置为true，请使用using代码块或显式调用Dispose()释放资源】
            </summary>
        </member>
        <member name="P:DevNet.Entity.IBLLManager`2.Script">
            <summary>
            获取ScriptQuery查询类【该类使用参数模式封装了sql语句，提供简单的数据帮助方法】
            </summary>
        </member>
        <member name="F:DevNet.Entity.BLLManager`2.ErrorInsert">
            <summary>
            插入数据失败时显示的自定义异常错误常数[保存失败，可能数据已经存在]
            </summary>
        </member>
        <member name="F:DevNet.Entity.BLLManager`2.ErrorUpdate">
            <summary>
            更新数据失败时显示的自定义异常错误常数[保存失败，可能数据不存在或输入数据格式有误]
            </summary>
        </member>
        <member name="F:DevNet.Entity.BLLManager`2.ErrorDelete">
            <summary>
            删除数据失败时显示的自定义异常错误常数[删除失败，可能数据不存在]
            </summary>
        </member>
        <member name="F:DevNet.Entity.BLLManager`2.ErrorGetList">
            <summary>
            获取数据信息列表失败时显示的自定义异常错误常数[获取数据列表失败]
            </summary>
        </member>
        <member name="F:DevNet.Entity.BLLManager`2._isFail">
            <summary>
            操作是否失败
            </summary>
        </member>
        <member name="F:DevNet.Entity.BLLManager`2._ex">
            <summary>
            自定义异常对象
            </summary>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.ResetError">
            <summary>
            清空错误信息
            </summary>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.SetError(DevNet.Common.DevNetException)">
            <summary>
            设置更新失败和失败异常
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.WriteExceptionMsg(System.String,System.Exception)">
            <summary>
            写日志【可重写】
            </summary>
            <param name="msg"></param>
            <param name="ex">可以为null</param>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.ThrowDevNetException(DevNet.Common.DevNetException)">
            <summary>
            处理自定义异常，未写入日志【可重写】
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.ThrowException(System.Exception)">
            <summary>
            处理系统Exception异常，写入日志 【可重写】
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.BeginTrans">
            <summary>
            开始事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.CommitTrans">
            <summary>
            提交事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.RollBackTrans">
            <summary>
            回滚事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetSingle(System.String[],System.Object[])">
            <summary>
            获取一条记录实体 默认条件“=” 不存在返回null 【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetSingle(System.String,System.Object)">
            <summary>
            获取一条记录实体 默认条件“=” 不存在返回null 【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetSingle(System.Object[])">
            <summary>
            获取一条记录实体,不存在返回null  【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="ids">唯一值参数(默认使用主键字段" = "匹配)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetSingle(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetSingle(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetSingle(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取一条记录实体 不存在返回null【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetSingle(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetTopList(System.Int32,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetTopList(System.Int32,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetTopList(System.Int32,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldNames">条件字段名称</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段记录集合[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段记录集合[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetList(System.String,System.Object)">
            <summary>
            获取实体记录集合[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetList(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取实体记录集合[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetList(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetList(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合【重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetList(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录实体集合[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetList(`1,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取实体集合[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetList">
            <summary>
            获取所有记录实体集合  【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetList(System.String[],System.Object[])">
            <summary>
            获取实体记录集合 默认“=” 【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetList(`1)">
            <summary>
            根据条件对象获取实体集合 【请重写并先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetPageList(`1,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件和分页信息获取实体集合【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetPageList(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取实体集合[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetPageList(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取实体集合 默认“=” 【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetPageList(`1,DevNet.Common.Pagination)">
            <summary>
            根据条件和分页信息获取实体集合  【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TCondition">条件泛型对象</typeparam>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Insert(`0,System.String[])">
            <summary>
            插入一条记录(默认排除自动增长型字段，插入成功后自动设置自增长型字段)  【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">插入需排除的字段(譬如自增长型字段)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Insert(`0)">
            <summary>
            插入一条记录(默认排除自动增长型字段，插入成功后自动设置自增长型字段)  【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="objEntity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Update(`0,System.String[],System.Object[])">
            <summary>
            更新一条记录【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldNames">更新条件字段集合(请指定为主键字段)</param>
            <param name="conditionFieldValues">更新条件字段值集合(请指定为主键字段的原始值)</param>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Update(`0,System.String,System.Object)">
            <summary>
            更新一条记录【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldName">更新条件字段(请指定为主键字段)</param>
            <param name="conditionFieldValue">更新条件字段值(请指定为主键字段的原始值)</param>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Update(`0,System.String[],System.Object[],System.String[])">
            <summary>
            更新一条记录【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldNames">更新条件字段(请指定为主键字段)</param>
            <param name="conditionFieldValues">更新条件字段值(请指定为主键字段的原始值)</param>
            <param name="exCludeFields">更新需排除的字段</param>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Update(`0,System.String,System.Object,System.String[])">
            <summary>
            更新一条记录【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldName">更新条件字段(请指定为主键字段)</param>
            <param name="conditionFieldValue">更新条件字段值(请指定为主键字段的原始值)</param>
            <param name="exCludeFields">更新需排除的字段</param>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Update(`0,System.String[])">
            <summary>
            更新一条记录(默认移除主键字段)  【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Update(`0)">
            <summary>
            更新一条记录(默认移除主键字段)  【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="objEntity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Update(System.Data.DataTable)">
            <summary>
            更新数据表
            </summary>
            <param name="table">DataTable数据表</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Update(System.String[],System.Object[],System.Object[])">
            <summary>
            更新单条记录的指定字段(默认使用主键字段“=”)  【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段值</param>
            <param name="ids">更新记录的条件值(默认使用主键字段“=”) </param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Update(System.String,System.Object,System.Object[])">
            <summary>
            更新单条记录的指定字段【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">更新的字段</param>
            <param name="fieldValue">对应字段的值</param>
            <param name="ids">更新记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Update(System.String[],System.Object[],System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            更新符合条件的记录的指定字段[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="conditionFieldName">更新记录的条件字段</param>
            <param name="conditionFieldValue">更新记录的条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新符合条件的记录的指定字段[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="conditionFieldName">更新记录的条件字段</param>
            <param name="conditionFieldValue">更新记录的条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Delete(System.Object[])">
            <summary>
            删除一条记录  【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="ids">删除记录的条件值(默认使用主键字段" = "匹配)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Delete(System.String[],System.Object[])">
            <summary>
            删除符合条件的记录  默认条件“=”  【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Delete(System.String,System.Object)">
            <summary>
            删除符合条件的记录[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.Delete(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除符合条件的记录【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetMaxNext(System.String)">
            <summary>
            获取int型字段的最大值+1  【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="intTypeField">int型字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetMaxValue``1(System.String)">
            <summary>
            获取最大值【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetMaxValue``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">t条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetMaxValue``1(System.String,System.String,System.Object)">
            <summary>
            获取最大值【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetMaxValue``1(System.String,System.String[],System.Object[])">
            <summary>
            获取最大值【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRecordCount(System.String,System.Object)">
            <summary>
            获取满足条件的记录总数【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRecordCount(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRecordCount(System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">条件字段名</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetTable">
            <summary>
            获取所有记录的数据表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetTable(`1)">
            <summary>
            根据条件对象获取数据表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="condition">条件实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetTable(`1,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetPageTable(`1,DevNet.Common.Pagination)">
            <summary>
            根据条件和分页信息获取数据表 [可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetPageTable(`1,DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件和分页信息获取数据表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="condition">条件实体对象</param>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetPageTable(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取数据表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetPageTable(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取数据表[可重写]【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.IsExists(System.String,System.Object)">
            <summary>
            数据表中是否存在满足指定条件的记录【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.IsExists(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            数据表中是否存在满足指定条件的记录【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
            
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.IsExists(System.String[],System.Object[])">
            <summary>
            数据表中是否存在满足指定条件的记录【请重写并先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldNames">条件字段集合</param>
            <param name="fieldValues">条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.CheckRecord(System.String,System.Object,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件【请重写并先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.CheckRecord(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件【请重写并先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetTable(System.String,System.Object)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetTable(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetTable(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetTable(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录数据表【可重写】
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetTable(System.String[],System.Object[])">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetScalar``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetScalar``1(System.String,System.String,System.Object)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetScalar``1(System.String,System.String[],System.Object[])">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationSingle``1(System.String,System.Object)">
            <summary>
            加载一条关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationSingle``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationSingle``1(System.String,System.String,System.Object)">
            <summary>
            获取一条关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationSingle``1(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationList``1(System.String,System.Object)">
            <summary>
            加载关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationList``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationList``1(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationList``1(System.String,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationList``1(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationList``1(System.String,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationList``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationList``1(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationList``1(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationList``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.InsertRelationEntity``1(``0,System.String[])">
            <summary>
            插入关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <param name="exCludeFields">插入需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.InsertRelationEntity``1(``0)">
            <summary>
            插入关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.UpdateRelationEntity``1(``0,System.String[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <param name="exCludeFields">更新需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.UpdateRelationEntity``1(``0)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.UpdateRelationEntity``1(System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.UpdateRelationEntity``1(System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.UpdateRelationEntity``1(System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.UpdateRelationEntity``1(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.UpdateRelationEntity(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.UpdateRelationEntity(System.String,System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.DeleteRelationEntity``1(System.String,System.Object)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.DeleteRelationEntity``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.DeleteRelationEntity(System.String,System.String,System.Object)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.DeleteRelationEntity(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.DeleteRelationEntity``1(System.String[],System.Object[])">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldNames">关系键字段名称</param>
            <param name="fieldValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.DeleteRelationEntity(System.String,System.String[],System.Object[])">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">关系键字段名称</param>
            <param name="fieldValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.IsExistsRelation``1(System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.IsExistsRelation``1(System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.IsExistsRelation(System.String,System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.IsExistsRelation(System.String,System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.CheckRelationRecord(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            数据表中指定关系键值的记录是否满足指定的比较值【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="fieldName">比较的字段</param>
            <param name="fieldValue">比较的字段值</param>
            <param name="relationKeyName">关系字段</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.CheckRelationRecord(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,System.Object)">
            <summary>
            数据表中指定关系键值的记录是否满足指定的比较值【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="fieldName">比较的字段</param>
            <param name="fieldValue">比较的字段值</param>
            <param name="compareEnum">比较的枚举</param>
            <param name="relationKeyName">关系字段</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationTable(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationTable(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationTable(System.String,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationTable(System.String,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写,重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationScalar``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationScalar``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationScalar``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationMaxValue``1(System.String,System.String)">
            <summary>
            获取最大值【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName"> 数据表名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取最大值【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationMaxValue``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取最大值【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationRecordCount(System.String,System.String,System.Object)">
            <summary>
            获取满足条件的记录总数【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationRecordCount(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Entity.BLLManager`2.GetRelationRecordCount(System.String,System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数【可重写】【重写时请先执行ResetError()方法以清空错误信息】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldNames">条件字段名</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="P:DevNet.Entity.BLLManager`2.KeepConnection">
            <summary>
            在该类执行范围内是否保持数据库连接状态
            【如设置为true，请使用using代码块或显式调用Dispose()释放资源】
            </summary>
        </member>
        <member name="P:DevNet.Entity.BLLManager`2.Script">
            <summary>
            获取ScriptQuery查询类【该类使用参数模式封装了sql语句，提供简单的数据帮助方法】
            </summary>
        </member>
        <member name="P:DevNet.Entity.BLLManager`2.TDALManager">
            <summary>
            获取或设置数据层接口或数据层执行类
            </summary>
        </member>
        <member name="P:DevNet.Entity.BLLManager`2.IsFail">
            <summary>
            获取操作是否失败
            </summary>
        </member>
        <member name="P:DevNet.Entity.BLLManager`2.DevNetException">
            <summary>
            获取自定义异常
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteTransaction">
            <summary>
            SQLite implementation of DbTransaction.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteTransaction._cnn">
            <summary>
            The connection to which this transaction is bound
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteTransaction.#ctor(DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection,System.Boolean)">
            <summary>
            Constructs the transaction object, binding it to the supplied connection
            </summary>
            <param name="connection">The connection to open a transaction on</param>
            <param name="deferredLock">TRUE to defer the writelock, or FALSE to lock immediately</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteTransaction.Dispose(System.Boolean)">
            <summary>
            Disposes the transaction.  If it is currently active, any changes are rolled back.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteTransaction.Commit">
            <summary>
            Commits the current transaction.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteTransaction.Rollback">
            <summary>
            Rolls back the active transaction.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteTransaction.Connection">
            <summary>
            Returns the underlying connection to which this transaction applies.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteTransaction.DbConnection">
            <summary>
            Forwards to the local Connection property
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteTransaction.IsolationLevel">
            <summary>
            Gets the isolation level of the transaction.  SQLite only supports Serializable transactions.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteMetaDataCollectionNames">
            <summary>
            MetaDataCollections specific to SQLite
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteMetaDataCollectionNames.Catalogs">
            <summary>
            Returns a list of databases attached to the connection
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteMetaDataCollectionNames.Columns">
            <summary>
            Returns column information for the specified table
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteMetaDataCollectionNames.Indexes">
            <summary>
            Returns index information for the optionally-specified table
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteMetaDataCollectionNames.IndexColumns">
            <summary>
            Returns base columns for the given index
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteMetaDataCollectionNames.Tables">
            <summary>
            Returns the tables in the given catalog
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteMetaDataCollectionNames.Views">
            <summary>
            Returns user-defined views in the given catalog
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteMetaDataCollectionNames.ViewColumns">
            <summary>
            Returns underlying column information on the given view
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteMetaDataCollectionNames.ForeignKeys">
            <summary>
            Returns foreign key information for the given catalog
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteMetaDataCollectionNames.Triggers">
            <summary>
            Returns the triggers on the database
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.LogEventArgs">
            <summary>
            Passed during an Log callback
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.LogEventArgs.ErrorCode">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.LogEventArgs.Message">
            <summary>
            SQL statement text as the statement first begins executing
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.LogEventArgs.Data">
            <summary>
            Extra data associated with this event, if any.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.LogEventArgs.#ctor(System.IntPtr,System.Int32,System.String,System.Object)">
            <summary>
            Constructs the LogEventArgs object.
            </summary>
            <param name="pUserData">Should be null.</param>
            <param name="errorCode">The SQLite error code.</param>
            <param name="message">The error message, if any.</param>
            <param name="data">The extra data, if any.</param>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteLogEventHandler">
            <summary>
            Raised when a log event occurs.
            </summary>
            <param name="sender">The current connection</param>
            <param name="e">Event arguments of the trace</param>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog">
            <summary>
            Manages the SQLite custom logging functionality and the associated
            callback for the whole process.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog.syncRoot">
            <summary>
            Object used to synchronize access to the static instance data
            for this class.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog._domainUnload">
            <summary>
            Member variable to store the AppDomain.DomainUnload event handler.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog._defaultHandler">
            <summary>
            The default log event handler.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog._callback">
            <summary>
            The log callback passed to native SQLite engine.  This must live
            as long as the SQLite library has a pointer to it.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog._sql">
            <summary>
            The base SQLite object to interop with.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog._enabled">
            <summary>
            This will be non-zero if logging is currently enabled.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog.Initialize">
            <summary>
            Initializes the SQLite logging facilities.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog.DomainUnload(System.Object,System.EventArgs)">
            <summary>
            Handles the AppDomain being unloaded.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog.LogMessage(System.Int32,System.String)">
            <summary>
            Log a message to all the registered log event handlers without going
            through the SQLite library.
            </summary>
            <param name="errorCode">The error code or zero for success.</param>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog.InitializeDefaultHandler">
            <summary>
            Creates and initializes the default log event handler.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog.AddDefaultHandler">
            <summary>
            Adds the default log event handler to the list of handlers.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog.RemoveDefaultHandler">
            <summary>
            Removes the default log event handler from the list of handlers.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog.LogCallback(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Internal proxy function that calls any registered application log
            event handlers.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog.LogEventHandler(System.Object,DevNet.DBAccess.SQLiteDBAccess.LogEventArgs)">
            <summary>
            Default logger.  Currently, uses the Trace class (i.e. sends events
            to the current trace listeners, if any).
            </summary>
            <param name="sender">Should be null.</param>
            <param name="e">The data associated with this event.</param>
        </member>
        <member name="E:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog._handlers">
            <summary>
            Member variable to store the application log handler to call.
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog.Log">
            <summary>
            This event is raised whenever SQLite raises a logging event.
            Note that this should be set as one of the first things in the
            application.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteLog.Enabled">
            <summary>
            If this property is true, logging is enabled; otherwise, logging is
            disabled.  When logging is disabled, no logging events will fire.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLite3_UTF16">
            <summary>
            Alternate SQLite3 object, overriding many text behaviors to support UTF-16 (Unicode)
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLite3">
            <summary>
            This class implements SQLiteBase completely, and is the guts of the code that interop's SQLite with .NET
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLite3._sql">
            <summary>
            The opaque pointer returned to us by the sqlite provider
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLite3._functionsArray">
            <summary>
            The user-defined functions registered on this connection
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLite3.Shutdown">
            <summary>
            Shutdown the SQLite engine so that it can be restarted with different config options.
            We depend on auto initialization to recover.
            </summary>
            <returns>Returns a result code</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLite3.SetExtendedResultCodes(System.Boolean)">
            Enables or disabled extended result codes returned by SQLite
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLite3.ResultCode">
            Gets the last SQLite error code
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLite3.ExtendedResultCode">
            Gets the last SQLite extended error code
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLite3.LogMessage(System.Int32,System.String)">
            Add a log message via the SQLite sqlite3_log interface.
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLite3.SetLogCallback(DevNet.DBAccess.SQLiteDBAccess.SQLiteLogCallback)">
            <summary>
            Allows the setting of a logging callback invoked by SQLite when a
            log event occurs.  Only one callback may be set.  If NULL is passed,
            the logging callback is unregistered.
            </summary>
            <param name="func">The callback function to invoke.</param>
            <returns>Returns a result code</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLite3.IsInitialized">
            <summary>
            Determines if the SQLite core library has been initialized for the
            current process.
            </summary>
            <returns>
            A boolean indicating whether or not the SQLite core library has been
            initialized for the current process.
            </returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLite3.StaticIsInitialized">
            <summary>
            Determines if the SQLite core library has been initialized for the
            current process.
            </summary>
            <returns>
            A boolean indicating whether or not the SQLite core library has been
            initialized for the current process.
            </returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLite3.GetValue(DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement,System.Int32,DevNet.DBAccess.SQLiteDBAccess.SQLiteType)">
            <summary>
            Helper function to retrieve a column of data from an active statement.
            </summary>
            <param name="stmt">The statement being step()'d through</param>
            <param name="index">The column index to retrieve</param>
            <param name="typ">The type of data contained in the column.  If Uninitialized, this function will retrieve the datatype information.</param>
            <returns>Returns the data in the column</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLite3_UTF16.ToString(System.IntPtr,System.Int32)">
            <summary>
            Overrides SQLiteConvert.ToString() to marshal UTF-16 strings instead of UTF-8
            </summary>
            <param name="b">A pointer to a UTF-16 string</param>
            <param name="nbytelen">The length (IN BYTES) of the string</param>
            <returns>A .NET string</returns>
        </member>
        <member name="T:DevNet.DBAccess.DBFactory">
            <summary>
            生成数据库访问实例
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DBFactory.GetDBConnection(DevNet.DBAccess.DBTypeEnum,System.String)">
            <summary>
            生成DBAccessBase数据库访问基类
            </summary>
            <param name="dbEnum">DBTypeEnum枚举</param>
            <param name="connString">数据库连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBFactory.GetSQLiteConnection(System.String)">
            <summary>
            生成SQLiteDbDirect实例
            </summary>
            <param name="connString"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBFactory.GetMySqlConnection(System.String)">
            <summary>
            生成MySqlDBAccess.MySqlDbDirect实例
            </summary>
            <param name="connString"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBFactory.GetOracleConnection(System.String)">
            <summary>
            生成OrcaleDBAccess.OracleDbDirect实例
            </summary>
            <param name="connString">数据库连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBFactory.GetSqlConnection(System.String)">
            <summary>
            生成SqlDBAccess.SqlDbDircet实例
            </summary>
            <param name="connString">数据库连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBFactory.GetAdoConnection(System.String)">
            <summary>
            生成AdoAccess.AdoDbDirect实例
            </summary>
            <param name="connString">数据库连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBFactory.GetOleDbConnection(System.String)">
            <summary>
            生成OleDBDBAccess.OleDbDirect实例
            </summary>
            <param name="connString">数据库连接字符串</param>
            <returns></returns>
        </member>
        <member name="T:DevNet.DBAccess.DBConnect">
            <summary>
            通用数据操作类,封装了基本的数据操作功能
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.#ctor">
            <summary>
             构造函数  
             配置文件     
             (appSettings)
             add key="Provider" value="Sql"  (Sql,OleDb,Oracle,Ado,SQLite,mysql )    
             add key="Sql" value="Data Source=.;USER ID=userinfo;Persist Security Info=True;User ID=sa;Password=sa"    
             add key="Ado" value="Provider=Microsoft.Jet.OLEDB.4.0;Data Source=D:\sqldatabase\test.mdb"   
             (appSettings)
             无参数构造函数将自动创建连接
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDBEnum(System.String)">
            <summary>
            获取数据库枚举[sql,oledb,oracle,ado,mysql]
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.#ctor(DevNet.DBAccess.DBTypeEnum,System.String)">
            <summary>
            构造函数
            配置文件
            (appSettings)
            add key="Provider" value="Sql"  Sql,OleDb,Oracle,Ado,MySql,SQLite
            add key="Sql" value="Data Source=.;USER ID=userinfo;Persist Security Info=True;User ID=sa;Password=sa"
            add key="Ado" value="Provider=Microsoft.Jet.OLEDB.4.0;Data Source=D:\sqldatabase\test.mdb"
            (appSettings)
            无参数构造函数将自动创建连接
            </summary>
            <param name="dataBaseEnum">数据库类型枚举</param>
            <param name="connString">数据库的连接字符串</param>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.Finalize">
            <summary>
            析构函数,释放相关资源
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.OpenConn">
            <summary>
            打开连接,已检测ConnectState和Transaction
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CloseConn">
            <summary>
            关闭连接，已检测ConnectState和Transaction
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.BeginTrans">
            <summary>
            打开连接，开始事务
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.BeginTrans(System.Data.IsolationLevel)">
            <summary>
            打开连接，开始事务
            </summary>
            <param name="isolationLevel">事务锁定行为</param>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.RollBackTrans">
            <summary>
            回滚事务,关闭连接
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CommitTrans">
            <summary>
            提交事务，关闭连接
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CreateCmd">
            <summary>
            创建DbCommand实例
            </summary>
            <returns>DbCommand</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CreateCmd(System.String)">
            <summary>
            创建DbCommand实例
            </summary>
            <param name="cmdText">DbCommand命令文本</param>
            <returns>DbCommand</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CreateCmd(System.String,System.Data.CommandType)">
            <summary>
            创建DbCommand实例
            </summary>
            <param name="cmdText">DbCommand命令文本</param>
            <param name="cmdType">DbCommand命令类型</param>
            <returns>DbCommand</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.SetCmdText(System.Data.Common.DbCommand,System.String,System.Data.CommandType)">
            <summary>
            设置当前DbCommand参数
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="cmdText">DbCommand命令文本</param>
            <param name="cmdType">DbCommand命令类型</param>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.SetCmdText(System.Data.Common.DbCommand,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            设置当前DbCommand参数
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="cmdText">DbCommand命令文本</param>
            <param name="cmdType">DbCommand命令类型</param>
            <param name="cmdParameters">DbCommand参数</param>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CreateCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.ParameterDirection,System.Data.DbType,System.Int32)">
            <summary>
            返回DbParameter
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <param name="direction">参数类型</param>
            <param name="dbType">字段数据类型</param>
            <param name="size">数据类型大小</param>
            <returns>DbParameter</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CreateCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.ParameterDirection,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            返回DbParameter
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <param name="direction">参数类型</param>
            <param name="dbType">字段数据类型</param>
            <param name="size">数据类型大小</param>
            <param name="value">参数值</param>
            <returns>DbParameter</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CreateCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.ParameterDirection)">
            <summary>
            返回DbParameter
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <param name="direction">参数类型</param>
            <returns>DbParameter</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CreateCmdParameter(System.Data.Common.DbCommand,System.String)">
            <summary>
            返回DbParameter
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <returns>DbParameter</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CreateCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType)">
            <summary>
            返回DbParameter
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <param name="dbType">字段数据类型</param>
            <returns>DbParameter</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CreateCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            返回DbParameter
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <param name="dbType">字段数据类型</param>
            <param name="size">参数类型大小</param>
            <returns>DbParameter</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CreateCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            返回DbParameter
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <param name="dbType">字段数据类型</param>
            <param name="size">参数类型大小</param>
            <param name="value">参数值</param>
            <returns>DbParameter</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.AddCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.ParameterDirection,System.Data.DbType,System.Int32)">
            <summary>
            给已创建的DbCommand添加执行参数
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <param name="direction">参数类型</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.AddCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.ParameterDirection,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            给已创建的DbCommand添加执行参数
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <param name="direction">参数类型</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <param name="Value">参数值</param>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.AddCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.ParameterDirection)">
            <summary>
            给已创建的DbCommand添加执行参数
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <param name="direction">参数类型</param>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.AddCmdParameter(System.Data.Common.DbCommand,System.String)">
            <summary>
            给已创建的DbCommand添加执行参数
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.AddCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType)">
            <summary>
            给已创建的DbCommand添加执行参数
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <param name="dbType">参数数据类型</param>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.AddCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32)">
            <summary>
            给已创建的DbCommand添加执行参数
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数类型大小</param>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.AddCmdParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            给已创建的DbCommand添加执行参数
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数类型大小</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.AddCmdParameter(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            给已创建的DbCommand添加执行参数
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="cmdParameters">参数集合</param>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.AddCmdParamWithValue(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            给已创建DbCommand添加参数
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="parameterName">参数名</param>
            <param name="parameterValue">参数值</param>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CreateCommandBuilder(System.Data.Common.DbDataAdapter)">
            <summary>
            创建 DbCommandBuilder
            </summary>
            <param name="da"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CreateDbAdapter(System.Data.Common.DbCommand)">
            <summary>
            创建 DbDataAdapter
            </summary>
            <param name="selectCmd">DbCommand</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.CreateDbAdapter(System.String)">
            <summary>
            创建DbDataAdapter 
            </summary>
            <param name="selectCmd"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            执行Sql命令
            </summary>
            <param name="cmd">DbCommand</param>
            <returns>执行后影响的行数</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.ExecuteNonQuery(System.String)">
            <summary>
            执行Sql命令
            </summary>
            <param name="cmdText">Sql 语句</param>
            <returns>执行后影响的行数</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary> 
            执行Sql命令
            </summary>
            <param name="cmdType">Command类型</param>
            <param name="cmdText">Command文本</param>
            <param name="commandParameters">Command参数</param>
            <returns>执行后影响的行数</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary> 
            执行Sql命令
            </summary>
            <param name="cmdType">Command类型</param>
            <param name="cmdText">Command文本</param>
            <returns>执行后影响的行数</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDbReader(System.String)">
            <summary>
            返回DbDataReader
            </summary>
            <param name="selectText">Command选择语句</param>
            <returns>DbDataReader 实例</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDbReader(System.String,System.Data.CommandBehavior)">
            <summary>
            返回DbDataReader
            </summary>
            <param name="selectText">Select Text</param>
            <param name="cmdBehavior">CommandBehavior枚举类型</param>
            <returns>DbDataReader</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDbReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            返回DbDataReader
            </summary>
            <param name="cmdType">Command类型</param>
            <param name="cmdText">Command文本</param>
            <param name="commandParameters">Command参数</param>
            <returns>DbDataReader 实例</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDbReader(System.Data.CommandType,System.String,System.Data.CommandBehavior,System.Data.Common.DbParameter[])">
            <summary>
            返回DbDataReader
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdBehavior"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDbReader(System.Data.Common.DbCommand)">
            <summary>
            返回DbDataReader
            </summary>
            <param name="cmd">DbCommand</param>
            <returns>DbDataReader 实例</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDbReader(System.Data.Common.DbCommand,System.Data.CommandBehavior)">
            <summary>
            返回DbDataReader
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="cmdBehavior">CommandBehavior枚举类型</param>
            <returns>DbDataReader 实例</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetScalar(System.String)">
            <summary>
            执行查询,返回第一行,第一列的值,其它数据忽略
            </summary>
            <param name="cmdText">查询语句,</param>
            <returns>object 类型数据</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行查询,返回第一行,第一列的值,其它数据忽略
            </summary>
            <param name="cmdType">Command类型</param>
            <param name="cmdText">Command文本</param>
            <param name="commandParameters">Command参数</param>
            <returns>object 类型数据</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetScalar(System.Data.CommandType,System.String)">
            <summary>
            执行查询,返回第一行,第一列的值,其它数据忽略
            </summary>
            <param name="cmdType">Command类型</param>
            <param name="cmdText">Command文本</param>
            <returns>object 类型数据</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetScalar(System.Data.Common.DbCommand)">
            <summary>
            执行查询,返回第一行,第一列的值,其它数据忽略
            </summary>
            <param name="cmd">DbCommand</param>
            <returns>object 类型数据</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataTable(System.Data.Common.DbCommand)">
            <summary>
            返回DataTable
            </summary>
            <param name="cmd">Select查询命令</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataTable(System.String)">
            <summary>
            返回DataTable
            </summary>
            <param name="selectText">Select查询文本</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataTable(System.Data.Common.DbCommand,System.String)">
            <summary>
            返回DataTable
            </summary>
            <param name="cmd">Select查询命令</param>
            <param name="srcTable">返回表的表名</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataTable(System.String,System.String)">
            <summary>
            返回DataTable
            </summary>
            <param name="selectText">Select查询文本</param>
            <param name="srcTable">返回表的表名</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            返回DataTable
            </summary>
            <param name="cmdType">Command类型</param>
            <param name="cmdText">Select查询文本</param>
            <param name="cmdParameters">Command参数,可以为null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataTable(System.Data.CommandType,System.String)">
            <summary>
            返回DataTable
            </summary>
            <param name="cmdType">Command类型</param>
            <param name="cmdText">Select查询文本</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataTable(System.String,System.Int32,System.Int32)">
            <summary>
            获取指定记录数集合的表
            </summary>
            <param name="selectText">选择文本</param>
            <param name="startIndex">开始记录索引</param>
            <param name="maxRecords">选取记录总数</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataTable(System.Data.Common.DbCommand,System.Int32,System.Int32)">
            <summary>
            获取指定记录数集合的表
            </summary>
            <param name="cmd"></param>
            <param name="startIndex">开始记录索引</param>
            <param name="maxRecords">选取记录总数</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataTable(System.Data.CommandType,System.String,System.String,System.Data.Common.DbParameter[])">
            <summary>
            返回DataTable
            </summary>
            <param name="cmdType">Command类型</param>
            <param name="cmdText">Select查询文本</param>
            <param name="srcTableName">数据表名，可以为空</param>
            <param name="cmdParameters">Command参数,可以为null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataTable(System.Data.CommandType,System.String,System.String)">
            <summary>
            返回DataTable
            </summary>
            <param name="cmdType">Command类型</param>
            <param name="cmdText">Select查询文本</param>
            <param name="srcTableName">数据表名，可以为空</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataTable(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            获取指定记录数集合的表
            </summary>
            <param name="selectText">select文本</param>
            <param name="startIndex">记录开始索引</param>
            <param name="maxRecords">记录总数</param>
            <param name="srcTableName">数据表名，可以为空</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataTable(System.Data.Common.DbCommand,System.Int32,System.Int32,System.String)">
            <summary>
            获取指定记录数集合的表
            </summary>
            <param name="cmd">DbCommand命令</param>
            <param name="startIndex">记录开始索引</param>
            <param name="maxRecords">记录总数</param>
            <param name="srcTableName">数据表名，可以为空</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.FillDataSet(System.Data.DataSet,System.String,System.String)">
            <summary>
            用Select语句填充已有的DataSet
            </summary>
            <param name="dataSet">DataSet</param>
            <param name="selectText">Select查询语句</param>
            <param name="srcTable">填充表名,可以为空</param>
            <returns>填充表的行数</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.FillDataSet(System.Data.DataSet,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            获取指定记录集合的DataSet
            </summary>
            <param name="dataSet"></param>
            <param name="selectText">选择文本</param>
            <param name="startIndex">开始记录索引</param>
            <param name="maxRecords">选取记录总数</param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.FillDataSet(System.Data.DataSet,System.String)">
            <summary>
            用Select语句填充已有的DataSet
            </summary>
            <param name="dataSet">DataSet</param>
            <param name="selectText">Select查询语句</param>
            <returns>填充表的行数</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataSet(System.Data.Common.DbCommand)">
            <summary>
            返回DataSet
            </summary>
            <param name="cmd">Command查询命令</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataSet(System.Data.Common.DbCommand,System.String)">
            <summary>
            返回DataSet
            </summary>
            <param name="cmd">Command查询命令</param>
            <param name="srcTable">填充表的表名,可以为空</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataSet(System.String)">
            <summary>
            返回DataSet
            </summary>
            <param name="selectText">Select查询文本</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataSet(System.String,System.String)">
            <summary>
            返回DataSet
            </summary>
            <param name="selectText">Select查询文本</param>
            <param name="srcTable">填充表的表名,可以为空</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            返回DataSet
            </summary>
            <param name="cmdType">Command类型</param>
            <param name="cmdText">Select查询文本</param>
            <param name="cmdParameters">Command参数,可以为null</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetDataSet(System.Data.CommandType,System.String)">
            <summary>
            返回DataSet
            </summary>
            <param name="cmdType">Command类型</param>
            <param name="cmdText">Select查询文本</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.UpdateDataTable(System.Data.DataTable)">
            <summary>
            更新数据表
            </summary>
            <param name="dataTable">数据表</param>
            <returns>更新影响的行数</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.UpdateDataTable(System.Data.DataTable,System.String)">
            <summary>
            更新数据表
            </summary>
            <param name="dataTable">数据表</param>
            <param name="srcTable">数据表名</param>
            <returns>更新影响的行数</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.UpdateDataTable(System.Data.DataTable,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand)">
            <summary>
            更新数据表
            </summary>
            <param name="dataTable">数据表</param>
            <param name="selectCommand">Select命令</param>
            <param name="insertCommand">Insert命令</param>
            <param name="updateCommand">Update命令</param>
            <param name="deleteCommand">Delete命令</param>
            <returns>更新影响的行数</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetXmlReader(System.Data.Common.DbCommand)">
            <summary>
            Sql数据源可以调用此方法返回XmlReader实例
            </summary>
            <param name="cmd">DbCommand对象</param>
            <returns>XmlReader</returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetXmlReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Sql数据源可以调用此方法返回XmlReader实例
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="dbParams"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetXmlReader(System.String)">
            <summary>
            Sql数据源可以调用此方法返回XmlReader实例
            </summary>
            <param name="selectText"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBConnect.GetPKColumnNames(System.String)">
            <summary>
            获取表的主键列表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:DevNet.DBAccess.DBConnect.DBAccessBase">
            <summary>
            返回或设置DBAccessBase数据访问基类
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.DBConnect.DbConnection">
            <summary>
            返回或设置连接的DbConnection
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.DBConnect.ConnectionString">
            <summary>
            获取连接字符串
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.DBConnect.DBEnum">
            <summary>
            返回当前的数据库类型DBTypeEnum枚举
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.DBConnect.ConnState">
            <summary>
            返回当前连接状态
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.DBConnect.Transaction">
            <summary>
            返回或设置指定连接的事务
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.DBConnect.Flag">
            <summary>
            获取当前数据库的参数前缀，oracle: myysql? 其它@
            </summary>
        </member>
        <member name="T:DevNet.Mapper.MapperCommand">
            <summary>
            映射命令类
            </summary>
        </member>
        <member name="M:DevNet.Mapper.MapperCommand.Clear">
            <summary>
            清除映射命令
            </summary>
        </member>
        <member name="P:DevNet.Mapper.MapperCommand.DynamicCompiler">
            <summary>
            是否动态编译Mapper文件的Script标签内容，默认false
            </summary>
        </member>
        <member name="P:DevNet.Mapper.MapperCommand.IncludeReturnValue">
            <summary>
            Sql Server存储过程中是否包含返回值参数，默认false
            </summary>
        </member>
        <member name="P:DevNet.Mapper.MapperCommand.CommandName">
            <summary>
            获取命令名称
            </summary>
        </member>
        <member name="P:DevNet.Mapper.MapperCommand.CommandType">
            <summary>
            获取命令类型
            </summary>
        </member>
        <member name="P:DevNet.Mapper.MapperCommand.CommandScript">
            <summary>
            命令文本
            </summary>
        </member>
        <member name="P:DevNet.Mapper.MapperCommand.CommandParameter">
            <summary>
            获取命令参数名称
            </summary>
        </member>
        <member name="P:DevNet.Mapper.MapperCommand.CommandDescription">
            <summary>
            获取命令描述
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteKeyReader">
            <summary>
            This class provides key info for a given SQLite statement.
            <remarks>
            Providing key information for a given statement is non-trivial :(
            </remarks>
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteKeyReader.#ctor(DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection,DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader,DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement)">
            <summary>
            This function does all the nasty work at determining what keys need to be returned for
            a given statement.
            </summary>
            <param name="cnn"></param>
            <param name="reader"></param>
            <param name="stmt"></param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteKeyReader.Sync">
            <summary>
            Make sure all the subqueries are open and ready and sync'd with the current rowid
            of the table they're supporting
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteKeyReader.Reset">
            <summary>
            Release any readers on any subqueries
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteKeyReader.AppendSchemaTable(System.Data.DataTable)">
            <summary>
            Append all the columns we've added to the original query to the schema
            </summary>
            <param name="tbl"></param>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteKeyReader.Count">
            <summary>
            How many additional columns of keyinfo we're holding
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteKeyReader.KeyInfo">
            <summary>
            Used to support CommandBehavior.KeyInfo
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteKeyReader.KeyQuery">
            <summary>
            A single sub-query for a given table/database.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder">
            <summary>
            SQLite implementation of DbConnectionStringBuilder.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder._properties">
            <summary>
            Properties of this class
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.#ctor">
            <overloads>
            Constructs a new instance of the class
            </overloads>
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class using the specified connection string.
            </summary>
            <param name="connectionString">The connection string to parse</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.Initialize(System.String)">
            <summary>
            Private initializer, which assigns the connection string and resets the builder
            </summary>
            <param name="cnnString">The connection string to assign</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            Helper function for retrieving values from the connectionstring
            </summary>
            <param name="keyword">The keyword to retrieve settings for</param>
            <param name="value">The resulting parameter value</param>
            <returns>Returns true if the value was found and returned</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.FallbackGetProperties(System.Collections.Hashtable)">
            <summary>
            Fallback method for MONO, which doesn't implement DbConnectionStringBuilder.GetProperties()
            </summary>
            <param name="propertyList">The hashtable to fill with property descriptors</param>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.Version">
            <summary>
            Gets/Sets the default version of the SQLite engine to instantiate.  Currently the only valid value is 3, indicating version 3 of the sqlite library.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.SyncMode">
            <summary>
            Gets/Sets the synchronization mode (file flushing) of the connection string.  Default is "Normal".
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.UseUTF16Encoding">
            <summary>
            Gets/Sets the encoding for the connection string.  The default is "False" which indicates UTF-8 encoding.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.Pooling">
            <summary>
            Gets/Sets whether or not to use connection pooling.  The default is "False"
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.BinaryGUID">
            <summary>
            Gets/Sets whethor not to store GUID's in binary format.  The default is True
            which saves space in the database.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.DataSource">
            <summary>
            Gets/Sets the filename to open on the connection string.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.Uri">
            <summary>
            An alternate to the data source property
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.DefaultTimeout">
            <summary>
            Gets/sets the default command timeout for newly-created commands.  This is especially useful for 
            commands used internally such as inside a SQLiteTransaction, where setting the timeout is not possible.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.Enlist">
            <summary>
            Determines whether or not the connection will automatically participate
            in the current distributed transaction (if one exists)
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.FailIfMissing">
            <summary>
            If set to true, will throw an exception if the database specified in the connection
            string does not exist.  If false, the database will be created automatically.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.LegacyFormat">
            <summary>
            If enabled, uses the legacy 3.xx format for maximum compatibility, but results in larger
            database sizes.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.ReadOnly">
            <summary>
            When enabled, the database will be opened for read-only access and writing will be disabled.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.Password">
            <summary>
            Gets/sets the database encryption password
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.PageSize">
            <summary>
            Gets/Sets the page size for the connection.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.MaxPageCount">
            <summary>
            Gets/Sets the maximum number of pages the database may hold
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.CacheSize">
            <summary>
            Gets/Sets the cache size for the connection.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.DateTimeFormat">
            <summary>
            Gets/Sets the DateTime format for the connection.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.DateTimeKind">
            <summary>
            Gets/Sets the DateTime kind for the connection.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.BaseSchemaName">
            <summary>
            Gets/Sets the placeholder base schema name used for
            .NET Framework compatibility purposes.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.JournalMode">
            <summary>
            Determines how SQLite handles the transaction journal file.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.DefaultIsolationLevel">
            <summary>
            Sets the default isolation level for transactions on the connection.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.ForeignKeys">
            <summary>
            If enabled, use foreign key constraints
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionStringBuilder.Flags">
            <summary>
            Gets/Sets the extra behavioral flags.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder">
            <summary>
            SQLite implementation of DbCommandBuilder.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.#ctor(DevNet.DBAccess.SQLiteDBAccess.SQLiteDataAdapter)">
            <summary>
            Initializes the command builder and associates it with the specified data adapter.
            </summary>
            <param name="adp"></param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
            <summary>
            Minimal amount of parameter processing.  Primarily sets the DbType for the parameter equal to the provider type in the schema
            </summary>
            <param name="parameter">The parameter to use in applying custom behaviors to a row</param>
            <param name="row">The row to apply the parameter to</param>
            <param name="statementType">The type of statement</param>
            <param name="whereClause">Whether the application of the parameter is part of a WHERE clause</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.GetParameterName(System.String)">
            <summary>
            Returns a valid named parameter
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <returns>Error</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.GetParameterName(System.Int32)">
            <summary>
            Returns a named parameter for the given ordinal
            </summary>
            <param name="parameterOrdinal">The i of the parameter</param>
            <returns>Error</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.GetParameterPlaceholder(System.Int32)">
            <summary>
            Returns a placeholder character for the specified parameter i.
            </summary>
            <param name="parameterOrdinal">The index of the parameter to provide a placeholder for</param>
            <returns>Returns a named parameter</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
            <summary>
            Sets the handler for receiving row updating events.  Used by the DbCommandBuilder to autogenerate SQL
            statements that may not have previously been generated.
            </summary>
            <param name="adapter">A data adapter to receive events on.</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.GetDeleteCommand">
            <summary>
            Returns the automatically-generated SQLite command to delete rows from the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.GetDeleteCommand(System.Boolean)">
            <summary>
            Returns the automatically-generated SQLite command to delete rows from the database
            </summary>
            <param name="useColumnsForParameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.GetUpdateCommand">
            <summary>
            Returns the automatically-generated SQLite command to update rows in the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.GetUpdateCommand(System.Boolean)">
            <summary>
            Returns the automatically-generated SQLite command to update rows in the database
            </summary>
            <param name="useColumnsForParameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.GetInsertCommand">
            <summary>
            Returns the automatically-generated SQLite command to insert rows into the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.GetInsertCommand(System.Boolean)">
            <summary>
            Returns the automatically-generated SQLite command to insert rows into the database
            </summary>
            <param name="useColumnsForParameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.QuoteIdentifier(System.String)">
            <summary>
            Places brackets around an identifier
            </summary>
            <param name="unquotedIdentifier">The identifier to quote</param>
            <returns>The bracketed identifier</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.UnquoteIdentifier(System.String)">
            <summary>
            Removes brackets around an identifier
            </summary>
            <param name="quotedIdentifier">The quoted (bracketed) identifier</param>
            <returns>The undecorated identifier</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
            <summary>
            Override helper, which can help the base command builder choose the right keys for the given query
            </summary>
            <param name="sourceCommand"></param>
            <returns></returns>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.DataAdapter">
            <summary>
            Gets/sets the DataAdapter for this CommandBuilder
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.CatalogLocation">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.CatalogSeparator">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.QuotePrefix">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.QuoteSuffix">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommandBuilder.SchemaSeparator">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SqlDBAccess.SqlDbDirect">
            <summary>
            SqlServer访问数据库类
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlDbDirect.#ctor(System.String)">
            <summary>
            Construct
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlDbDirect.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            Construct
            </summary>
            <param name="sqlConn"></param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlDbDirect.CreateCommandBuilder(System.Data.Common.DbDataAdapter)">
            <summary>
            Create DbCommandBuilder
            </summary>
            <param name="da"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlDbDirect.CreateDbAdapter(System.Data.Common.DbCommand)">
            <summary>
            Create DbDataAdapater
            </summary>
            <param name="selectCmd"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlDbDirect.AddCmdParamWithValue(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            Add DbParameter with value
            </summary>
            <param name="cmd"></param>
            <param name="paramName"></param>
            <param name="paramValue"></param>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlDbDirect.GetXmlReader(System.Data.SqlClient.SqlCommand)">
            <summary>
            Create XmlReader by SqlCommand
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SqlDBAccess.SqlDbDirect.GetPKList(System.String)">
            <summary>
            Get Table PK_Primary
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:DevNet.Permission.Entity.Permission">
            <summary>
            表 Permission 系统权限的实体类
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.Permission.Permission_TableName">
            <summary>
             表 Permission 数据表名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.Permission.AutoIncrement">
            <summary>
             表 Permission 自动增长型字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.Permission.PermissionID_FieldName">
            <summary>
            PermissionID 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.Permission.PermissionName_FieldName">
            <summary>
            权限名称 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.Permission.PermissionMemo_FieldName">
            <summary>
            权限说明 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.Permission.PerParentID_FieldName">
            <summary>
            父权限ID 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.Permission.ImageURL_FieldName">
            <summary>
            图片URL 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.Permission.LinkURL_FieldName">
            <summary>
            连接URL 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.Permission.DisplayIndex_FieldName">
            <summary>
            显示索引 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.Permission.IsShow_FieldName">
            <summary>
            是否在管理中显示 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.Permission.Owner_FieldName">
            <summary>
            权限所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......） 字段名称
            </summary>
        </member>
        <member name="M:DevNet.Permission.Entity.Permission.#ctor">
            <summary>
            系统权限
            </summary>
        </member>
        <member name="M:DevNet.Permission.Entity.Permission.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化时调用该方法，由于WCF的DataContract序列化不调用构造函数，由该方法初始化成员变量
            </summary>
            <param name="context"></param>
        </member>
        <member name="F:DevNet.Permission.Entity.Permission.PrimaryKeyField">
            <summary>
             表 Permission 主键字段集合
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.Permission.PermissionID">
            <summary>
            PermissionID 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.Permission.PermissionName">
            <summary>
            权限名称 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.Permission.PermissionMemo">
            <summary>
            权限说明 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.Permission.PerParentID">
            <summary>
            父权限ID 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.Permission.ImageURL">
            <summary>
            图片URL 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.Permission.LinkURL">
            <summary>
            连接URL 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.Permission.DisplayIndex">
            <summary>
            显示索引 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.Permission.IsShow">
            <summary>
            是否在管理显示 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.Permission.Owner">
            <summary>
            权限所属后台系统默认1（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......） 列
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.OracleDBAccess.OracleDbDirect">
            <summary>
            Oracle访问数据库类
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.OracleDBAccess.OracleDbDirect.#ctor(System.String)">
            <summary>
            Construct
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:DevNet.DBAccess.OracleDBAccess.OracleDbDirect.#ctor(System.Data.OracleClient.OracleConnection)">
            <summary>
            Construct
            </summary>
            <param name="oracleConn"></param>
        </member>
        <member name="M:DevNet.DBAccess.OracleDBAccess.OracleDbDirect.CreateCommandBuilder(System.Data.Common.DbDataAdapter)">
            <summary>
            Create DbCommandBuilder
            </summary>
            <param name="da"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.OracleDBAccess.OracleDbDirect.CreateDbAdapter(System.Data.Common.DbCommand)">
            <summary>
            Create DbDataAdapater
            </summary>
            <param name="selectCmd"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.OracleDBAccess.OracleDbDirect.AddCmdParamWithValue(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            Add DbParameter with value
            </summary>
            <param name="cmd"></param>
            <param name="paramName"></param>
            <param name="paramValue"></param>
        </member>
        <member name="M:DevNet.DBAccess.OracleDBAccess.OracleDbDirect.GetPKList(System.String)">
            <summary>
            Get Table PK_Primary
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:DevNet.DBAccess.DBTypeEnum">
            <summary>
            数据库类型枚举
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.DBTypeEnum.SQL">
            <summary>
            Sql DataBase  1
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.DBTypeEnum.OleDb">
            <summary>
            OleDb Access DataBase  2
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.DBTypeEnum.Oracle">
            <summary>
            Oracle DataBase  3
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.DBTypeEnum.ADO">
            <summary>
            ADO Access DataBase 4
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.DBTypeEnum.MySql">
            <summary>
            MySql DataBase  5
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.DBTypeEnum.SQLite">
            <summary>
            SQLite DataBase 6 请将System.Data.SQLite.dll复制到程序执行目录，并在配置文件AppSettings中设置SQLiteAssembly="System.Data.SQLite.dll"(程序集名称)
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.DBTypeEnum.OracleExt">
            <summary>
            使用第三方Oracle组件，选设置DBConnect的DBAccessBase基类属性 7
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.DBTypeEnum.None">
            <summary>
            其它未知连接类型，选设置DBConnect的DBAccessBase基类属性 8
            </summary>
        </member>
        <member name="T:DevNet.Common.DevNetException">
            <summary>
            DevNet自定义异常
            </summary>
        </member>
        <member name="M:DevNet.Common.DevNetException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常信息内容，默认异常代码为1</param>
        </member>
        <member name="M:DevNet.Common.DevNetException.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="errorCode">异常代码(外部可用枚举转换)</param>
            <param name="message">异常信息内容</param>
        </member>
        <member name="M:DevNet.Common.DevNetException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="errorCode">异常代码(外部可用枚举转换)</param>
            <param name="message">异常信息内容</param>
            <param name="source">异常信息资源(可填写某类某方法某操作时发生的异常)</param>
        </member>
        <member name="M:DevNet.Common.DevNetException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="errorCode">异常代码(外部可用枚举转换)</param>
            <param name="message">异常信息内容</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:DevNet.Common.DevNetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数，支持序列化
            </summary>
            <param name="ser"></param>
            <param name="context"></param>
        </member>
        <member name="P:DevNet.Common.DevNetException.ErrorCode">
            <summary>
            获取异常代码类型(外部可用枚举转换) 默认为1
            </summary>
        </member>
        <member name="P:DevNet.Common.DevNetException.InnerException">
            <summary>
            内部异常
            </summary>
        </member>
        <member name="P:DevNet.Common.DevNetException.StackTrace">
            <summary>
            异常堆栈信息
            </summary>
        </member>
        <member name="P:DevNet.Common.DevNetException.Message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:DevNet.Common.DevNetExceptionEnum">
            <summary>
            DevNet自定义异常枚举
            </summary>
        </member>
        <member name="F:DevNet.Common.DevNetExceptionEnum.CustomException">
            <summary>
            自定义异常 1
            </summary>
        </member>
        <member name="F:DevNet.Common.DevNetExceptionEnum.CatchException">
            <summary>
            捕获的异常 2
            </summary>
        </member>
        <member name="T:DevNet.Dynamic.DynamicDataBuilder">
            <summary>
             动态实体属性数据生成
            </summary>
        </member>
        <member name="M:DevNet.Dynamic.DynamicDataBuilder.BuildCreateInstanceDelegate(System.Type)">
            <summary>
            生成类实例委托[Func（object） func=BuildCreateInstanceDelegate(this.GetType()); func();]
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Dynamic.DynamicDataBuilder.GetDynamicData(System.Data.DataRow)">
            <summary>
             动态获取EntityBase数据实体派生类
            </summary>
            <param name="dataRow"></param>
            <returns></returns>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionPool._connections">
            <summary>
            The connection pool object
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionPool._poolVersion">
            <summary>
            The default version number new pools will get
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionPool.Remove(System.String,System.Int32,System.Int32@)">
            <summary>
            Attempt to pull a pooled connection out of the queue for active duty
            </summary>
            <param name="fileName">The filename for a desired connection</param>
            <param name="maxPoolSize">The maximum size the connection pool for the filename can be</param>
            <param name="version">The pool version the returned connection will belong to</param>
            <returns>Returns NULL if no connections were available.  Even if none are, the poolversion will still be a valid pool version</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionPool.ClearAllPools">
            <summary>
            Clears out all pooled connections and rev's up the default pool version to force all old active objects
            not in the pool to get discarded rather than returned to their pools.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionPool.ClearPool(System.String)">
            <summary>
            Clear a given pool for a given filename.  Discards anything in the pool for the given file, and revs the pool
            version so current active objects on the old version of the pool will get discarded rather than be returned to the pool.
            </summary>
            <param name="fileName">The filename of the pool to clear</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionPool.Add(System.String,DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionHandle,System.Int32)">
            <summary>
            Return a connection to the pool for someone else to use.
            </summary>
            <param name="fileName">The filename of the pool to use</param>
            <param name="hdl">The connection handle to pool</param>
            <param name="version">The pool version the handle was created under</param>
            <remarks>
            If the version numbers don't match between the connection and the pool, then the handle is discarded.
            </remarks>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionPool.ResizePool(DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionPool.Pool,System.Boolean)">
            <summary>
            We don't have to thread-lock anything in this function, because it's only called by other functions above
            which already have a thread-safe lock.
            </summary>
            <param name="queue">The queue to resize</param>
            <param name="forAdding">If a function intends to add to the pool, this is true, which forces the resize
            to take one more than it needs from the pool</param>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnectionPool.Pool">
            <summary>
            Keeps track of connections made on a specified file.  The PoolVersion dictates whether old objects get
            returned to the pool or discarded when no longer in use.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection">
            <summary>
            SQLite implentation of DbConnection.
            </summary>
            <remarks>
            The <see cref="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.ConnectionString">ConnectionString</see> property of the SQLiteConnection class can contain the following parameter(s), delimited with a semi-colon:
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Values</term>
            <term>Required</term>
            <term>Default</term>
            </listheader>
            <item>
            <description>Data Source</description>
            <description>{filename}</description>
            <description>Y</description>
            <description></description>
            </item>
            <item>
            <description>Version</description>
            <description>3</description>
            <description>N</description>
            <description>3</description>
            </item>
            <item>
            <description>UseUTF16Encoding</description>
            <description><b>True</b><br/><b>False</b></description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>DateTimeFormat</description>
            <description><b>Ticks</b> - Use DateTime.Ticks<br/><b>ISO8601</b> - Use ISO8601 DateTime format</description>
            <description>N</description>
            <description>ISO8601</description>
            </item>
            <item>
            <description>DateTimeKind</description>
            <description><b>Unspecified</b> - Not specified as either UTC or local time.<br/><b>Utc</b> - The time represented is UTC.<br/><b>Local</b> - The time represented is local time.</description>
            <description>N</description>
            <description>Unspecified</description>
            </item>
            <item>
            <description>BaseSchemaName</description>
            <description>Some base data classes in the framework (e.g. those that build SQL queries dynamically)
            assume that an ADO.NET provider cannot support an alternate catalog (i.e. database) without supporting
            alternate schemas as well; however, SQLite does not fit into this model.  Therefore, this value is used
            as a placeholder and removed prior to preparing any SQL statements that may contain it.</description>
            <description>N</description>
            <description>sqlite_default_schema</description>
            </item>
            <item>
            <description>BinaryGUID</description>
            <description><b>True</b> - Store GUID columns in binary form<br/><b>False</b> - Store GUID columns as text</description>
            <description>N</description>
            <description>True</description>
            </item>
            <item>
            <description>Cache Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>2000</description>
            </item>
            <item>
            <description>Synchronous</description>
            <description><b>Normal</b> - Normal file flushing behavior<br/><b>Full</b> - Full flushing after all writes<br/><b>Off</b> - Underlying OS flushes I/O's</description>
            <description>N</description>
            <description>Normal</description>
            </item>
            <item>
            <description>Page Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>1024</description>
            </item>
            <item>
            <description>Password</description>
            <description>{password}</description>
            <description>N</description>
            <description></description>
            </item>
            <item>
            <description>Enlist</description>
            <description><b>Y</b> - Automatically enlist in distributed transactions<br/><b>N</b> - No automatic enlistment</description>
            <description>N</description>
            <description>Y</description>
            </item>
            <item>
            <description>Pooling</description>
            <description><b>True</b> - Use connection pooling<br/><b>False</b> - Do not use connection pooling</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>FailIfMissing</description>
            <description><b>True</b> - Don't create the database if it does not exist, throw an error instead<br/><b>False</b> - Automatically create the database if it does not exist</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Page Count</description>
            <description>{size in pages} - Limits the maximum number of pages (limits the size) of the database</description>
            <description>N</description>
            <description>0</description>
            </item>
            <item>
            <description>Legacy Format</description>
            <description><b>True</b> - Use the more compatible legacy 3.x database format<br/><b>False</b> - Use the newer 3.3x database format which compresses numbers more effectively</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Default Timeout</description>
            <description>{time in seconds}<br/>The default command timeout</description>
            <description>N</description>
            <description>30</description>
            </item>
            <item>
            <description>Journal Mode</description>
            <description><b>Delete</b> - Delete the journal file after a commit<br/><b>Persist</b> - Zero out and leave the journal file on disk after a commit<br/><b>Off</b> - Disable the rollback journal entirely</description>
            <description>N</description>
            <description>Delete</description>
            </item>
            <item>
            <description>Read Only</description>
            <description><b>True</b> - Open the database for read only access<br/><b>False</b> - Open the database for normal read/write access</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Pool Size</description>
            <description>The maximum number of connections for the given connection string that can be in the connection pool</description>
            <description>N</description>
            <description>100</description>
            </item>
            <item>
            <description>Default IsolationLevel</description>
            <description>The default transaciton isolation level</description>
            <description>N</description>
            <description>Serializable</description>
            </item>
            <item>
            <description>Foreign Keys</description>
            <description>Enable foreign key constraints</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Flags</description>
            <description>Extra behavioral flags for the connection.  See the SQLiteConnectionFlags enumeration for possible values.</description>
            <description>N</description>
            <description>Default</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.DefaultBaseSchemaName">
            <summary>
            The default "stub" (i.e. placeholder) base schema name to use when
            returning column schema information.  Used as the initial value of
            the BaseSchemaName property.  This should start with "sqlite_*"
            because those names are reserved for use by SQLite (i.e. they cannot
            be confused with the names of user objects).
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection._connectionState">
            <summary>
            State of the current connection
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection._connectionString">
            <summary>
            The connection string
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection._transactionLevel">
            <summary>
            Nesting level of the transactions open on the connection
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection._defaultIsolation">
            <summary>
            The default isolation level for new transactions
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection._enlistment">
            <summary>
            Whether or not the connection is enlisted in a distrubuted transaction
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection._sql">
            <summary>
            The base SQLite object to interop with
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection._dataSource">
            <summary>
            The database filename minus path and extension
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection._password">
            <summary>
            Temporary password storage, emptied after the database has been opened
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection._baseSchemaName">
            <summary>
            The "stub" (i.e. placeholder) base schema name to use when returning
            column schema information.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection._flags">
            <summary>
            The extra behavioral flags for this connection, if any.  See the
            SQLiteConnectionFlags enumeration for a list of possible values.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection._defaultTimeout">
            <summary>
            Default command timeout
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.#ctor">
            <overloads>
             Constructs a new SQLiteConnection object
             </overloads>
             <summary>
             Default constructor
             </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.#ctor(System.String)">
            <summary>
            Initializes the connection with the specified connection string
            </summary>
            <param name="connectionString">The connection string to use on the connection</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.#ctor(DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection)">
            <summary>
            Clones the settings and connection string from an existing connection.  If the existing connection is already open, this
            function will open its own connection, enumerate any attached databases of the original connection, and automatically
            attach to them.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Clone">
            <summary>
            Creates a clone of the connection.  All attached databases and user-defined functions are cloned.  If the existing connection is open, the cloned connection 
            will also be opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.CreateFile(System.String)">
            <summary>
            Creates a database file.  This just creates a zero-byte file which SQLite
            will turn into a database when the file is opened properly.
            </summary>
            <param name="databaseFileName">The file to create</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.OnStateChange(System.Data.ConnectionState)">
            <summary>
            Raises the state change event when the state of the connection changes
            </summary>
            <param name="newState">The new state.  If it is different from the previous state, an event is raised.</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.BeginTransaction(System.Data.IsolationLevel,System.Boolean)">
            <summary>
            OBSOLETE.  Creates a new SQLiteTransaction if one isn't already active on the connection.
            </summary>
            <param name="isolationLevel">This parameter is ignored.</param>
            <param name="deferredLock">When TRUE, SQLite defers obtaining a write lock until a write operation is requested.
            When FALSE, a writelock is obtained immediately.  The default is TRUE, but in a multi-threaded multi-writer 
            environment, one may instead choose to lock the database immediately to avoid any possible writer deadlock.</param>
            <returns>Returns a SQLiteTransaction object.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.BeginTransaction(System.Boolean)">
            <summary>
            OBSOLETE.  Creates a new SQLiteTransaction if one isn't already active on the connection.
            </summary>
            <param name="deferredLock">When TRUE, SQLite defers obtaining a write lock until a write operation is requested.
            When FALSE, a writelock is obtained immediately.  The default is false, but in a multi-threaded multi-writer 
            environment, one may instead choose to lock the database immediately to avoid any possible writer deadlock.</param>
            <returns>Returns a SQLiteTransaction object.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new SQLiteTransaction if one isn't already active on the connection.
            </summary>
            <param name="isolationLevel">Supported isolation levels are Serializable, ReadCommitted and Unspecified.</param>
            <remarks>
            Unspecified will use the default isolation level specified in the connection string.  If no isolation level is specified in the 
            connection string, Serializable is used.
            Serializable transactions are the default.  In this mode, the engine gets an immediate lock on the database, and no other threads
            may begin a transaction.  Other threads may read from the database, but not write.
            With a ReadCommitted isolation level, locks are deferred and elevated as needed.  It is possible for multiple threads to start
            a transaction in ReadCommitted mode, but if a thread attempts to commit a transaction while another thread
            has a ReadCommitted lock, it may timeout or cause a deadlock on both threads until both threads' CommandTimeout's are reached.
            </remarks>
            <returns>Returns a SQLiteTransaction object.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.BeginTransaction">
            <summary>
            Creates a new SQLiteTransaction if one isn't already active on the connection.
            </summary>
            <returns>Returns a SQLiteTransaction object.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Forwards to the local BeginTransaction() function
            </summary>
            <param name="isolationLevel">Supported isolation levels are Unspecified, Serializable, and ReadCommitted</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.ChangeDatabase(System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="databaseName"></param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Close">
            <summary>
            When the database connection is closed, all commands linked to this connection are automatically reset.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.ClearPool(DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection)">
            <summary>
            Clears the connection pool associated with the connection.  Any other active connections using the same database file
            will be discarded instead of returned to the pool when they are closed.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.ClearAllPools">
            <summary>
            Clears all connection pools.  Any active connections will be discarded instead of sent to the pool when they are closed.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.CreateCommand">
            <summary>
            Create a new SQLiteCommand and associate it with this connection.
            </summary>
            <returns>Returns an instantiated SQLiteCommand object already assigned to this connection.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.CreateDbCommand">
            <summary>
            Forwards to the local CreateCommand() function
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.ParseConnectionString(System.String)">
            <summary>
            Parses the connection string into component parts
            </summary>
            <param name="connectionString">The connection string to parse</param>
            <returns>An array of key-value pairs representing each parameter of the connection string</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
            Manual distributed transaction enlistment support
            </summary>
            <param name="transaction">The distributed transaction to enlist in</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.FindKey(System.Collections.Generic.SortedList{System.String,System.String},System.String,System.String)">
            <summary>
            Looks for a key in the array of key/values of the parameter string.  If not found, return the specified default value
            </summary>
            <param name="items">The list to look in</param>
            <param name="key">The key to find</param>
            <param name="defValue">The default value to return if the key is not found</param>
            <returns>The value corresponding to the specified key, or the default value if not found.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Open">
            <summary>
            Opens the connection using the parameters found in the <see cref="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.ConnectionString">ConnectionString</see>
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Shutdown">
            Passes a shutdown request off to SQLite.
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.SetExtendedResultCodes(System.Boolean)">
            Enables or disabled extended result codes returned by SQLite
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.ResultCode">
            Enables or disabled extended result codes returned by SQLite
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.ExtendedResultCode">
            Enables or disabled extended result codes returned by SQLite
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.LogMessage(System.Int32,System.String)">
            Add a log message via the SQLite sqlite3_log interface.
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.ChangePassword(System.String)">
            <summary>
            Change the password (or assign a password) to an open database.
            </summary>
            <remarks>
            No readers or writers may be active for this process.  The database must already be open
            and if it already was password protected, the existing password must already have been supplied.
            </remarks>
            <param name="newPassword">The new password to assign to the database</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.ChangePassword(System.Byte[])">
            <summary>
            Change the password (or assign a password) to an open database.
            </summary>
            <remarks>
            No readers or writers may be active for this process.  The database must already be open
            and if it already was password protected, the existing password must already have been supplied.
            </remarks>
            <param name="newPassword">The new password to assign to the database</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.SetPassword(System.String)">
            <summary>
            Sets the password for a password-protected database.  A password-protected database is
            unusable for any operation until the password has been set.
            </summary>
            <param name="databasePassword">The password for the database</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.SetPassword(System.Byte[])">
            <summary>
            Sets the password for a password-protected database.  A password-protected database is
            unusable for any operation until the password has been set.
            </summary>
            <param name="databasePassword">The password for the database</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.SetAvRetry(System.Int32@,System.Int32@)">
            <summary>
            Queries or modifies the number of retries or the retry interval (in milliseconds) for
            certain I/O operations that may fail due to anti-virus software.
            </summary>
            <param name="count">The number of times to retry the I/O operation.  A negative value
            will cause the current count to be queried and replace that negative value.</param>
            <param name="interval">The number of milliseconds to wait before retrying the I/O
            operation.  This number is multiplied by the number of retry attempts so far to come
            up with the final number of milliseconds to wait.  A negative value will cause the
            current interval to be queried and replace that negative value.</param>
            <returns>Zero for success, non-zero for error.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.ExpandFileName(System.String)">
            <summary>
            Expand the filename of the data source, resolving the |DataDirectory| macro as appropriate.
            </summary>
            <param name="sourceFile">The database filename to expand</param>
            <returns>The expanded path and filename of the filename</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.GetSchema">
            <overloads>
             The following commands are used to extract schema information out of the database.  Valid schema types are:
             <list type="bullet">
             <item>
             <description>MetaDataCollections</description>
             </item>
             <item>
             <description>DataSourceInformation</description>
             </item>
             <item>
             <description>Catalogs</description>
             </item>
             <item>
             <description>Columns</description>
             </item>
             <item>
             <description>ForeignKeys</description>
             </item>
             <item>
             <description>Indexes</description>
             </item>
             <item>
             <description>IndexColumns</description>
             </item>
             <item>
             <description>Tables</description>
             </item>
             <item>
             <description>Views</description>
             </item>
             <item>
             <description>ViewColumns</description>
             </item>
             </list>
             </overloads>
             <summary>
             Returns the MetaDataCollections schema
             </summary>
             <returns>A DataTable of the MetaDataCollections schema</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.GetSchema(System.String)">
            <summary>
            Returns schema information of the specified collection
            </summary>
            <param name="collectionName">The schema collection to retrieve</param>
            <returns>A DataTable of the specified collection</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.GetSchema(System.String,System.String[])">
            <summary>
            Retrieves schema information using the specified constraint(s) for the specified collection
            </summary>
            <param name="collectionName">The collection to retrieve</param>
            <param name="restrictionValues">The restrictions to impose</param>
            <returns>A DataTable of the specified collection</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Schema_MetaDataCollections">
            <summary>
            Builds a MetaDataCollections schema datatable
            </summary>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Schema_DataSourceInformation">
            <summary>
            Builds a DataSourceInformation datatable
            </summary>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Schema_Columns(System.String,System.String,System.String)">
            <summary>
            Build a Columns schema
            </summary>
            <param name="strCatalog">The catalog (attached database) to query, can be null</param>
            <param name="strTable">The table to retrieve schema information for, must not be null</param>
            <param name="strColumn">The column to retrieve schema information for, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Schema_Indexes(System.String,System.String,System.String)">
            <summary>
            Returns index information for the given database and catalog
            </summary>
            <param name="strCatalog">The catalog (attached database) to query, can be null</param>
            <param name="strIndex">The name of the index to retrieve information for, can be null</param>
            <param name="strTable">The table to retrieve index information for, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Schema_Tables(System.String,System.String,System.String)">
            <summary>
            Retrieves table schema information for the database and catalog
            </summary>
            <param name="strCatalog">The catalog (attached database) to retrieve tables on</param>
            <param name="strTable">The table to retrieve, can be null</param>
            <param name="strType">The table type, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Schema_Views(System.String,System.String)">
            <summary>
            Retrieves view schema information for the database
            </summary>
            <param name="strCatalog">The catalog (attached database) to retrieve views on</param>
            <param name="strView">The view name, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Schema_Catalogs(System.String)">
            <summary>
            Retrieves catalog (attached databases) schema information for the database
            </summary>
            <param name="strCatalog">The catalog to retrieve, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Schema_IndexColumns(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the base column information for indexes in a database
            </summary>
            <param name="strCatalog">The catalog to retrieve indexes for (can be null)</param>
            <param name="strTable">The table to restrict index information by (can be null)</param>
            <param name="strIndex">The index to restrict index information by (can be null)</param>
            <param name="strColumn">The source column to restrict index information by (can be null)</param>
            <returns>A DataTable containing the results</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Schema_ViewColumns(System.String,System.String,System.String)">
            <summary>
            Returns detailed column information for a specified view
            </summary>
            <param name="strCatalog">The catalog to retrieve columns for (can be null)</param>
            <param name="strView">The view to restrict column information by (can be null)</param>
            <param name="strColumn">The source column to restrict column information by (can be null)</param>
            <returns>A DataTable containing the results</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Schema_ForeignKeys(System.String,System.String,System.String)">
            <summary>
            Retrieves foreign key information from the specified set of filters
            </summary>
            <param name="strCatalog">An optional catalog to restrict results on</param>
            <param name="strTable">An optional table to restrict results on</param>
            <param name="strKeyName">An optional foreign key name to restrict results on</param>
            <returns>A DataTable with the results of the query</returns>
        </member>
        <member name="E:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.StateChange">
            <summary>
            This event is raised whenever the database is opened or closed.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.ConnectionString">
            <summary>
            The connection string containing the parameters for the connection
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Values</term>
            <term>Required</term>
            <term>Default</term>
            </listheader>
            <item>
            <description>Data Source</description>
            <description>{filename}</description>
            <description>Y</description>
            <description></description>
            </item>
            <item>
            <description>Version</description>
            <description>3</description>
            <description>N</description>
            <description>3</description>
            </item>
            <item>
            <description>UseUTF16Encoding</description>
            <description><b>True</b><br/><b>False</b></description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>DateTimeFormat</description>
            <description><b>Ticks</b> - Use DateTime.Ticks<br/><b>ISO8601</b> - Use ISO8601 DateTime format<br/><b>JulianDay</b> - Use JulianDay format</description>
            <description>N</description>
            <description>ISO8601</description>
            </item>
            <item>
            <description>BinaryGUID</description>
            <description><b>Yes/On/1</b> - Store GUID columns in binary form<br/><b>No/Off/0</b> - Store GUID columns as text</description>
            <description>N</description>
            <description>On</description>
            </item>
            <item>
            <description>Cache Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>2000</description>
            </item>
            <item>
            <description>Synchronous</description>
            <description><b>Normal</b> - Normal file flushing behavior<br/><b>Full</b> - Full flushing after all writes<br/><b>Off</b> - Underlying OS flushes I/O's</description>
            <description>N</description>
            <description>Normal</description>
            </item>
            <item>
            <description>Page Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>1024</description>
            </item>
            <item>
            <description>Password</description>
            <description>{password}</description>
            <description>N</description>
            <description></description>
            </item>
            <item>
            <description>Enlist</description>
            <description><B>Y</B> - Automatically enlist in distributed transactions<br/><b>N</b> - No automatic enlistment</description>
            <description>N</description>
            <description>Y</description>
            </item>
            <item>
            <description>Pooling</description>
            <description><b>True</b> - Use connection pooling<br/><b>False</b> - Do not use connection pooling</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>FailIfMissing</description>
            <description><b>True</b> - Don't create the database if it does not exist, throw an error instead<br/><b>False</b> - Automatically create the database if it does not exist</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Page Count</description>
            <description>{size in pages} - Limits the maximum number of pages (limits the size) of the database</description>
            <description>N</description>
            <description>0</description>
            </item>
            <item>
            <description>Legacy Format</description>
            <description><b>True</b> - Use the more compatible legacy 3.x database format<br/><b>False</b> - Use the newer 3.3x database format which compresses numbers more effectively</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Default Timeout</description>
            <description>{time in seconds}<br/>The default command timeout</description>
            <description>N</description>
            <description>30</description>
            </item>
            <item>
            <description>Journal Mode</description>
            <description><b>Delete</b> - Delete the journal file after a commit<br/><b>Persist</b> - Zero out and leave the journal file on disk after a commit<br/><b>Off</b> - Disable the rollback journal entirely</description>
            <description>N</description>
            <description>Delete</description>
            </item>
            <item>
            <description>Read Only</description>
            <description><b>True</b> - Open the database for read only access<br/><b>False</b> - Open the database for normal read/write access</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Pool Size</description>
            <description>The maximum number of connections for the given connection string that can be in the connection pool</description>
            <description>N</description>
            <description>100</description>
            </item>
            <item>
            <description>Default IsolationLevel</description>
            <description>The default transaciton isolation level</description>
            <description>N</description>
            <description>Serializable</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.DataSource">
            <summary>
            Returns the filename without extension or path
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Database">
            <summary>
            Returns the string "main".
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.DefaultTimeout">
            <summary>
            Gets/sets the default command timeout for newly-created commands.  This is especially useful for 
            commands used internally such as inside a SQLiteTransaction, where setting the timeout is not possible.
            This can also be set in the ConnectionString with "Default Timeout"
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Flags">
            <summary>
            Gets/sets the extra behavioral flags for this connection.  See the
            SQLiteConnectionFlags enumeration for a list of possible values.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.ServerVersion">
            <summary>
            Returns the version of the underlying SQLite database engine
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.LastInsertRowId">
            <summary>
            Returns the rowid of the most recent successful INSERT into the database from this connection.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Changes">
            <summary>
            Returns the number of rows changed by the last INSERT, UPDATE, or DELETE statement executed on
            this connection.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.MemoryUsed">
            <summary>
            Returns the amount of memory (in bytes) currently in use by the SQLite core library.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.MemoryHighwater">
            <summary>
            Returns the maximum amount of memory (in bytes) used by the SQLite core library since the high-water mark was last reset.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.SQLiteVersion">
            <summary>
            Returns the version of the underlying SQLite database engine
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.SQLiteSourceId">
            <summary>
            This method returns the string whose value is the same as the
            SQLITE_SOURCE_ID C preprocessor macro used when compiling the
            SQLite core library.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.State">
            <summary>
            Returns the state of the connection.
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Update">
            <summary>
            This event is raised whenever SQLite makes an update/delete/insert into the database on
            this connection.  It only applies to the given connection.
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Commit">
            <summary>
            This event is raised whenever SQLite is committing a transaction.
            Return non-zero to trigger a rollback
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.Trace">
            <summary>
            This event is raised whenever SQLite statement first begins executing on
            this connection.  It only applies to the given connection.
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.RollBack">
            <summary>
            This event is raised whenever SQLite is committing a transaction.
            Return non-zero to trigger a rollback
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteConnection.DbProviderFactory">
            <summary>
            Returns a SQLiteProviderFactory object.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SynchronizationModes">
            <summary>
            The I/O file cache flushing behavior for the connection
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SynchronizationModes.Normal">
            <summary>
            Normal file flushing at critical sections of the code
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SynchronizationModes.Full">
            <summary>
            Full file flushing after every write operation
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SynchronizationModes.Off">
            <summary>
            Use the default operating system's file flushing, SQLite does not explicitly flush the file buffers after writing
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteCommitHandler">
            <summary>
            Raised when a transaction is about to be committed.  To roll back a transaction, set the 
            rollbackTrans boolean value to true.
            </summary>
            <param name="sender">The connection committing the transaction</param>
            <param name="e">Event arguments on the transaction</param>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteUpdateEventHandler">
            <summary>
            Raised when data is inserted, updated and deleted on a given connection
            </summary>
            <param name="sender">The connection committing the transaction</param>
            <param name="e">The event parameters which triggered the event</param>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteTraceEventHandler">
            <summary>
            Raised when a statement first begins executing on a given connection
            </summary>
            <param name="sender">The connection executing the statement</param>
            <param name="e">Event arguments of the trace</param>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.UpdateEventType">
            <summary>
            Whenever an update event is triggered on a connection, this enum will indicate
            exactly what type of operation is being performed.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.UpdateEventType.Delete">
            <summary>
            A row is being deleted from the given database and table
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.UpdateEventType.Insert">
            <summary>
            A row is being inserted into the table.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.UpdateEventType.Update">
            <summary>
            A row is being updated in the table.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.UpdateEventArgs">
            <summary>
            Passed during an Update callback, these event arguments detail the type of update operation being performed
            on the given connection.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.UpdateEventArgs.Database">
            <summary>
            The name of the database being updated (usually "main" but can be any attached or temporary database)
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.UpdateEventArgs.Table">
            <summary>
            The name of the table being updated
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.UpdateEventArgs.Event">
            <summary>
            The type of update being performed (insert/update/delete)
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.UpdateEventArgs.RowId">
            <summary>
            The RowId affected by this update.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.CommitEventArgs">
            <summary>
            Event arguments raised when a transaction is being committed
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.CommitEventArgs.AbortTransaction">
            <summary>
            Set to true to abort the transaction and trigger a rollback
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.TraceEventArgs">
            <summary>
            Passed during an Trace callback, these event arguments contain the UTF-8 rendering of the SQL statement text
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.TraceEventArgs.Statement">
            <summary>
            SQL statement text as the statement first begins executing
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.DataAccess">
            <summary>
            数据访问类，提供常用的数据操作功能
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.BeginTrans">
            <summary>
            开始事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.CommitTrans">
            <summary>
            提交事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.RollBackTrans">
            <summary>
            回滚事务[可重写]
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.OnBeforeInsert(DevNet.Handle.InsertHandleArg)">
            <summary>
            Insert前方法[可重写]
            </summary>
            <param name="insertHandleArg"></param>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.OnAfterInsert(DevNet.Handle.InsertHandleArg)">
            <summary>
            Insert后方法[可重写]
            </summary>
            <param name="insertHandleArg"></param>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.OnBeforeUpdate(DevNet.Handle.UpdateHandleArg)">
            <summary>
            Update前方法[可重写]
            </summary>
            <param name="updateHandleArg"></param>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.OnAfterUpdate(DevNet.Handle.UpdateHandleArg)">
            <summary>
            Update后方法[可重写]
            </summary>
            <param name="updateHandleArg"></param>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.OnBeforeDelete(DevNet.Handle.DeleteHandleArg)">
            <summary>
            Delete前方法[可重写]
            </summary>
            <param name="deleteHandleArg"></param>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.OnAfterDelete(DevNet.Handle.DeleteHandleArg)">
            <summary>
            Delete后方法[可重写]
            </summary>
            <param name="deleteHandleArg"></param>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetSingle``1(System.String[],System.Object[])">
            <summary>
            获取一条记录实体 默认条件“=” 不存在返回null  【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetSingle``1(System.String,System.Object)">
            <summary>
            获取一条记录实体 默认条件“=” 不存在返回null  【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetSingle``1(System.Object[])">
            <summary>
            获取一条记录实体,不存在返回null  【可重写】
            </summary>
            <param name="ids">主键值参数(默认使用主键字段" = "匹配)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetSingle``1(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetSingle``1(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetSingle``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取一条记录实体 不存在返回null[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetSingle``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取一条记录实体 不存在返回null【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetTopList``1(System.Int32,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetTopList``1(System.Int32,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldName">条件字段名称</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetTopList``1(System.Int32,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取Top条数的记录[可重写]
            </summary>
            <param name="recordCount">Top记录条数</param>
            <param name="fieldNames">条件字段名称</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetList``1(System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段记录集合[可重写]
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum,System.String[])">
            <summary>
            选择指定的字段记录集合[可重写]
            </summary>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <param name="selectFieldNames">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetList``1(System.String,System.Object)">
            <summary>
            获取实体记录集合[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetList``1(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取实体记录集合[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合[可重写]
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetList``1(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取实体记录集合【重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetList``1(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录实体集合[可重写]
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetList``1">
            <summary>
            获取所有记录实体集合  【可重写】
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetList``1(System.String[],System.Object[])">
            <summary>
            获取实体记录集合 默认“=” 【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetPageList``1(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取实体集合[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetPageList``1(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取实体  【可重写】
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Insert``1(``0,System.String[])">
            <summary>
            插入一条记录(默认排除自动增长型字段，插入成功后自动设置自增长型字段)  【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">插入需排除的字段(譬如自增长型字段)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Insert``1(``0)">
            <summary>
            插入一条记录(默认排除自动增长型字段，插入成功后自动设置自增长型字段)  【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Update``1(``0,System.String[],System.Object[])">
            <summary>
            更新一条记录【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldNames">更新条件字段集合(请指定为主键字段)</param>
            <param name="conditionFieldValues">更新条件字段值集合(请指定为主键字段的原始值)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Update``1(``0,System.String,System.Object)">
            <summary>
            更新一条记录【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldName">更新条件字段(请指定为主键字段)</param>
            <param name="conditionFieldValue">更新条件字段值(请指定为主键字段的原始值)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Update``1(``0,System.String[],System.Object[],System.String[])">
            <summary>
            更新一条记录【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldNames">更新条件字段(请指定为主键字段)</param>
            <param name="conditionFieldValues">更新条件字段值(请指定为主键字段的原始值)</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Update``1(``0,System.String,System.Object,System.String[])">
            <summary>
            更新一条记录【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="conditionFieldName">更新条件字段(请指定为主键字段)</param>
            <param name="conditionFieldValue">更新条件字段值(请指定为主键字段的原始值)</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Update``1(``0,System.String[])">
            <summary>
            更新一条记录(默认移除主键字段)  【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Update(System.String[],System.Object[],System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            更新符合条件的记录的指定字段[可重写]
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="conditionFieldName">更新记录的条件字段</param>
            <param name="conditionFieldValue">更新记录的条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Update(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新符合条件的记录的指定字段[可重写]
            </summary>
            <param name="fieldNames">更新的字段</param>
            <param name="fieldValues">对应字段的值</param>
            <param name="conditionFieldName">更新记录的条件字段</param>
            <param name="conditionFieldValue">更新记录的条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Update``1(``0)">
            <summary>
            更新一条记录(默认移除主键字段)  【可重写】
            </summary>
            <param name="objEntity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Update(System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新单条记录的指定字段
            </summary>
            <param name="fieldName">更新的字段</param>
            <param name="fieldValue">对应字段的值</param>
            <param name="conditionFieldName">更新条件字段集合</param>
            <param name="conditionFieldValue">更新记录的条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Update(System.Data.DataTable)">
            <summary>
            更新数据表
            </summary>
            <param name="table">DataTable数据表</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Delete(System.String[],System.Object[])">
            <summary>
            删除符合条件的记录  默认条件“=”  【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Delete(System.String,System.Object)">
            <summary>
            删除符合条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Delete(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除符合条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetMaxValue``1(System.String)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetMaxValue``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">t条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetMaxValue``1(System.String,System.String,System.Object)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetMaxValue``1(System.String,System.String[],System.Object[])">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRecordCount(System.String,System.Object)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRecordCount(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRecordCount(System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="fieldNames">条件字段名</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetMaxNext(System.String)">
            <summary>
            获取int型字段的最大值+1  【可重写】
            </summary>
            <param name="intTypeField">int型字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.IsExists(System.String,System.Object)">
            <summary>
            数据表中是否存在满足指定条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.IsExists(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            数据表中是否存在满足指定条件的记录【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.IsExists(System.String[],System.Object[])">
            <summary>
            数据表中是否存在满足指定条件的记录【可重写】
            </summary>
            <param name="fieldNames">条件字段集合</param>
            <param name="fieldValues">条件字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.CheckRecord(System.String,System.Object,System.String[],System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="primaryKeyFields">主键字段集合</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.CheckRecord(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String[],System.Object[])">
            <summary>
            数据表中指定主键记录是否满足指定的条件【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="primaryKeyFields">主键字段集合</param>
            <param name="ids">主键字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetTable">
            <summary>
            获取所有记录的数据表[可重写]
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetTable(System.String,System.Object)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetTable(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetTable(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">条件比较枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序方向枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetTable(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetTable(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取所有记录数据表【可重写】
            </summary>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetTable(System.String[],System.Object[])">
            <summary>
            根据条件对象获取数据表【可重写】
            </summary>
            <param name="fieldNames">条件字段</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetScalar``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetScalar``1(System.String,System.String,System.Object)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetScalar``1(System.String,System.String[],System.Object[])">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetPageTable(DevNet.Common.Pagination)">
            <summary>
            根据分页信息获取数据表[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetPageTable(DevNet.Common.Pagination,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            根据分页信息获取数据表[可重写]
            </summary>
            <param name="pagination">分页信息实体</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序字段枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.IsExistsRelation``1(System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.IsExistsRelation``1(System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.IsExistsRelation(System.String,System.String[],System.Object[])">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.IsExistsRelation(System.String,System.String,System.Object)">
            <summary>
            检查关系表中是否存在符合条件的记录【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationList``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationList``1(System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationList``1(System.String,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationList``1(System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationList``1(System.String,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationList``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationList``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationList``1(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationList``1(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationList``1(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationList``1(System.String,System.Object)">
            <summary>
            加载关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.InsertRelationEntity``1(``0,System.String[])">
            <summary>
            插入关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <param name="exCludeFields">插入需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.InsertRelationEntity``1(``0)">
            <summary>
            插入关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.UpdateRelationEntity``1(System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.UpdateRelationEntity``1(System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.UpdateRelationEntity``1(``0,System.String[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <param name="exCludeFields">更新需排除的字段，可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.UpdateRelationEntity``1(``0)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationEntity">关系实体对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.UpdateRelationEntity``1(System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.UpdateRelationEntity``1(System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.UpdateRelationEntity(System.String,System.String,System.Object,System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">需更新字段名称</param>
            <param name="fieldValue">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">需更新字段名称</param>
            <param name="fieldValues">需更新字段值</param>
            <param name="relationKeyNames">关系条件字段</param>
            <param name="relationKeyValues">关系条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.UpdateRelationEntity(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">更新字段名称</param>
            <param name="fieldValue">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.UpdateRelationEntity(System.String,System.String[],System.Object[],System.String,System.Object)">
            <summary>
            更新关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">更新字段名称</param>
            <param name="fieldValues">更新字段值</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.DeleteRelationEntity``1(System.String,System.Object)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.DeleteRelationEntity``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.DeleteRelationEntity(System.String,System.String,System.Object)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.DeleteRelationEntity(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldName">关系键字段名称</param>
            <param name="fieldValue">关系键值</param>
            <param name="compareEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.DeleteRelationEntity``1(System.String[],System.Object[])">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="fieldNames">关系键字段名称</param>
            <param name="fieldValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.DeleteRelationEntity(System.String,System.String[],System.Object[])">
            <summary>
            删除关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表表名</param>
            <param name="fieldNames">关系键字段名称</param>
            <param name="fieldValues">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.CheckRelationRecord(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            数据表中指定关系键值的记录是否满足指定的比较值
            </summary>
            <param name="tableName">关系表名</param>
            <param name="fieldName">比较的字段</param>
            <param name="fieldValue">比较的字段值</param>
            <param name="relationKeyName">关系字段</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.CheckRelationRecord(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,System.Object)">
            <summary>
            数据表中指定关系键值的记录是否满足指定的比较值
            </summary>
            <param name="tableName">关系表名</param>
            <param name="fieldName">比较的字段</param>
            <param name="fieldValue">比较的字段值</param>
            <param name="compareEnum">比较的枚举</param>
            <param name="relationKeyName">关系字段</param>
            <param name="relationKeyValue">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationTable(System.String,System.String,System.Object)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationTable(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationTable(System.String,System.String,System.Object,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationTable(System.String,System.String[],System.Object[],System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationTable(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum,System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            获取符合条件的关系实体集合【请自行控制物理数据关系】【可重写】
            </summary>
            <param name="tableName">关系表名</param>
            <param name="relationKeyName">关系字段名称</param>
            <param name="relationKeyValue">关系字段值</param>
            <param name="compEnum">操作枚举</param>
            <param name="sortFieldName">排序字段</param>
            <param name="sortEnum">排序枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationScalar``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationScalar``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationScalar``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取单值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationSingle``1(System.String,System.String,System.Object)">
            <summary>
            获取一条关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationSingle``1(System.String,System.Object)">
            <summary>
            加载一条关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体类型</typeparam>
            <param name="relationKeyName">关系键字段名称</param>
            <param name="relationKeyValue">关系键值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationSingle``1(System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationSingle``1(System.String,System.String[],System.Object[])">
            <summary>
            获取符合条件的关系实体【请自行控制物理数据关系】【可重写】
            </summary>
            <typeparam name="TRelation">关系实体</typeparam>
            <param name="tableName">关系表表名</param>
            <param name="relationKeyNames">关系字段名称</param>
            <param name="relationKeyValues">关系字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationMaxValue``1(System.String,System.String)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName"> 数据表名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <param name="compEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationMaxValue``1(System.String,System.String,System.String,System.Object)">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldName">条件字段</param>
            <param name="conditionFieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationMaxValue``1(System.String,System.String,System.String[],System.Object[])">
            <summary>
            获取最大值【可重写】
            </summary>
            <param name="fieldName">字段名</param>
            <param name="tableName">数据表名</param>
            <param name="conditionFieldNames">条件字段</param>
            <param name="conditionFieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationRecordCount(System.String,System.String,System.Object)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationRecordCount(System.String,System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldName">条件字段名</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.GetRelationRecordCount(System.String,System.String[],System.Object[])">
            <summary>
            获取满足条件的记录总数【可重写】
            </summary>
            <param name="tableName">数据表名</param>
            <param name="fieldNames">条件字段名</param>
            <param name="fieldValues">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.EntityGetMaxNext(System.String)">
            <summary>
            获取int型字段的最大值+1  
            </summary>
            <param name="intTypeField">int型字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.EntityGetSingle``1(System.Object[])">
            <summary>
            获取一条记录实体对象，不存在返回null 
            </summary>
            <param name="uniqueIDS">唯一值参数(默认使用主键字段" = "匹配)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.EntityGetList``1">
            <summary>
             
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.EntityGetPageList``1(DevNet.Common.Pagination)">
            <summary>
            分页信息实体集合
            </summary>
            <param name="pagination"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.EntityInsert``1(``0,System.String[])">
            <summary>
            插入一条记录 (默认排除自动增长型字段，插入成功后自动设置自增长型字段)
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">插入需排除的字段(譬如自增长型字段)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.EntityUpdate``1(``0,System.String[])">
            <summary>
            更新一条记录(默认移除主键字段和自增长型字段)
            </summary>
            <param name="objEntity">实体对象</param>
            <param name="exCludeFields">更新需排除的字段</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DataAccess.Clone">
            <summary>
            克隆类的新实例 [可重写.NET2.0重写成(Activator.CreateInstance(this.GetType());)]
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevNet.DBAccess.DataAccess.TableName">
            <summary>
            操作的数据表名
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.DataAccess.KeepConnection">
            <summary>
            在该类执行范围内是否保持数据库连接状态
            【如设置为true，请使用using代码块或显式调用Dispose()释放资源】
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.DataAccess.DBCon">
            <summary>
            获取或设置数据连接对象[可重写]
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.DataAccess.Script">
            <summary>
            获取ScriptQuery查询类【该类使用参数模式封装了sql语句，提供简单的数据帮助方法】[可重写]
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.DataAccess.Mapper">
            <summary>
            数据映射对象[可重写]
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.DataAccess.BeforeInsert">
            <summary>
            Insert前事件
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.DataAccess.AfterInsert">
            <summary>
            Insert后事件
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.DataAccess.BeforeUpdate">
            <summary>
            Update前事件
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.DataAccess.AfterUpdate">
            <summary>
            Update后事件
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.DataAccess.BeforeDelete">
            <summary>
            Delete前事件
            </summary>
        </member>
        <member name="E:DevNet.DBAccess.DataAccess.AfterDelete">
            <summary>
            Delete后事件
            </summary>
        </member>
        <member name="T:DevNet.Common.Helper">
            <summary>
            内部操作帮助类，配置文件、是否相对路径、去除末尾字符
            </summary>
        </member>
        <member name="M:DevNet.Common.Helper.DelLastChar(System.String,System.String)">
            <summary>
            删除结尾知道字符串
            </summary>
            <param name="str"></param>
            <param name="strchar"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Common.Helper.GetAppString(System.String)">
            <summary>
            获取AppSetting配置
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Common.Helper.IsRelativePath(System.String)">
            <summary>
            是否相对路径
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:DevNet.Logger.EventWriteLog">
            <summary>
            日志异步处理委托
            </summary>
        </member>
        <member name="T:DevNet.Logger.LoggBase">
            <summary>
            日志抽象类
            </summary>
        </member>
        <member name="M:DevNet.Logger.LoggBase.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunctionAttribute">
            <summary>
            A simple custom attribute to enable us to easily find user-defined functions in
            the loaded assemblies and initialize them in SQLite as connections are made.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunctionAttribute.#ctor">
            <summary>
            Default constructor, initializes the internal variables for the function.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunctionAttribute.Name">
            <summary>
            The function's name as it will be used in SQLite command text.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunctionAttribute.Arguments">
            <summary>
            The number of arguments this function expects.  -1 if the number of arguments is variable.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunctionAttribute.FuncType">
            <summary>
            The type of function this implementation will be.
            </summary>
        </member>
        <member name="T:DevNet.Permission.Entity.OwnerPermission">
            <summary>
            表 OwnerPermission 所有者权限菜单的实体类
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.OwnerPermission.OwnerPermission_TableName">
            <summary>
             表 OwnerPermission 数据表名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.OwnerPermission.AutoIncrement">
            <summary>
             表 OwnerPermission 自动增长型字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.OwnerPermission.PermissionID_FieldName">
            <summary>
            PermissionID 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.OwnerPermission.OwnerCode_FieldName">
            <summary>
            权限菜单所有者编号 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.OwnerPermission.Owner_FieldName">
            <summary>
            角色权限所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......） 字段名称
            </summary>
        </member>
        <member name="M:DevNet.Permission.Entity.OwnerPermission.#ctor">
            <summary>
            所有者权限菜单
            </summary>
        </member>
        <member name="M:DevNet.Permission.Entity.OwnerPermission.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化时调用该方法，由于WCF的DataContract序列化不调用构造函数，由该方法初始化成员变量
            </summary>
            <param name="context"></param>
        </member>
        <member name="F:DevNet.Permission.Entity.OwnerPermission.PrimaryKeyField">
            <summary>
             表 OwnerPermission 主键字段集合
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.OwnerPermission.PermissionID">
            <summary>
            PermissionID 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.OwnerPermission.OwnerCode">
            <summary>
            权限菜单所有者编号 列默认-1
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.OwnerPermission.Owner">
            <summary>
            角色权限所属后台系统默认1（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......） 列
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection">
            <summary>
            AdoDbParameterCollection
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.Add(DevNet.DBAccess.AdoAccess.AdoDbParameter)">
            <summary>
            Add DbParameter
            </summary>
            <param name="value">DbParameter</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.Add(System.Object)">
            <summary>
            Add DbParameter
            </summary>
            <param name="value">object value</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.AddRange(System.Array)">
            <summary>
            Add DbParameter
            </summary>
            <param name="values">AdoDbParameter Array</param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Add AdoDbParameter with paramName and value
            </summary>
            <param name="paramName"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.Clear">
            <summary>
            Clear AdoParameter
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.Contains(System.Object)">
            <summary>
            AdoParamterCollection is Contains AdoParameter
            </summary>
            <param name="value">AdoParameter</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.Contains(System.String)">
            <summary>
            AdoParamterCollection is Contains AdoParameter
            </summary>
            <param name="value">AdoParameter name</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy AdoParamterCollection to Array
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.GetEnumerator">
            <summary>
            GetIEnumerator Array
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.GetParameter(System.Int32)">
            <summary>
            Return DbParameter by index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.GetParameter(System.String)">
            <summary>
            Return DbParameter by parameterName
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.IndexOf(System.Object)">
            <summary>
            Return DbParameter in DbParametercollection index
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.IndexOf(System.String)">
            <summary>
            Return DbParameter in DbParametercollection index by parameterName
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.Insert(System.Int32,DevNet.DBAccess.AdoAccess.AdoDbParameter)">
            <summary>
            Insert AdoDbParameter at index
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert AdoDbParameter at index
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.Remove(DevNet.DBAccess.AdoAccess.AdoDbParameter)">
            <summary>
            Remove AdoDbParameter 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.Remove(System.Object)">
            <summary>
            Remove AdoDbParameter by AdoDbParameter
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Remove AdoDbParamter at index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.RemoveAt(System.String)">
            <summary>
            Remove AdoDbParameter by parameteName
            </summary>
            <param name="parameterName"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            Repale AdoDbParameter at index by DbParameter
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            Repale AdoDbParameter at parameterName by DbParameter
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.Count">
            <summary>
            Return AdoDbParametercollection Count
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.IsFixedSize">
            <summary>
            Return AdoDbParametercollection IsFixedSize
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.IsReadOnly">
            <summary>
            Return AdoDbParametercollection IsReadOnly
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.IsSynchronized">
            <summary>
            Return AdoDbParametercollection IsSynchronized
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameterCollection.SyncRoot">
            <summary>
            Return SyncRoot
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.AdoAccess.AdoDbParameter">
            <summary>
            AdoDbParameter
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbParameter.ResetDbType">
            <summary>
            ResetDbType
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameter.DbType">
            <summary>
            Set or Return DbType
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameter.Direction">
            <summary>
            Return ParameterDircetion
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameter.IsNullable">
            <summary>
            Set or Return IsNullable
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameter.ParameterName">
            <summary>
            Set or Return ParameterName
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameter.Size">
            <summary>
            Set or Return ParameterSize
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameter.SourceColumn">
            <summary>
            Set or Return SourceColumn
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameter.SourceColumnNullMapping">
            <summary>
            Set or Return is SourceColumnNullMapping
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameter.SourceVersion">
            <summary>
            Set or Return is SourceVersion
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbParameter.Value">
            <summary>
            Set or Return ParameterValue
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter">
            <summary>
            SQLite implementation of DbParameter.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter._dbType">
            <summary>
            The data type of the parameter
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter._rowVersion">
            <summary>
            The version information for mapping the parameter
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter._objValue">
            <summary>
            The value of the data in the parameter
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter._sourceColumn">
            <summary>
            The source column for the parameter
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter._parameterName">
            <summary>
            The column name
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter._dataSize">
            <summary>
            The data size, unused by SQLite
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.String)">
            <summary>
            Constructs a named parameter given the specified parameter name
            </summary>
            <param name="parameterName">The parameter name</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.String,System.Object)">
            <summary>
            Constructs a named parameter given the specified parameter name and initial value
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="value">The initial value of the parameter</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.String,System.Data.DbType)">
            <summary>
            Constructs a named parameter of the specified type
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="dbType">The datatype of the parameter</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.String)">
            <summary>
            Constructs a named parameter of the specified type and source column reference
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="dbType">The data type</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs a named parameter of the specified type, source column and row version
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="dbType">The data type</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.Data.DbType)">
            <summary>
            Constructs an unnamed parameter of the specified data type
            </summary>
            <param name="dbType">The datatype of the parameter</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.Data.DbType,System.Object)">
            <summary>
            Constructs an unnamed parameter of the specified data type and sets the initial value
            </summary>
            <param name="dbType">The datatype of the parameter</param>
            <param name="value">The initial value of the parameter</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.Data.DbType,System.String)">
            <summary>
            Constructs an unnamed parameter of the specified data type and source column
            </summary>
            <param name="dbType">The datatype of the parameter</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs an unnamed parameter of the specified data type, source column and row version
            </summary>
            <param name="dbType">The data type</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Constructs a named parameter of the specified type and size
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Constructs a named parameter of the specified type, size and source column
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs a named parameter of the specified type, size, source column and row version
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Constructs a named parameter of the specified type, size, source column and row version
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="direction">Only input parameters are supported in SQLite</param>
            <param name="isNullable">Ignored</param>
            <param name="precision">Ignored</param>
            <param name="scale">Ignored</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
            <param name="value">The initial value to assign the parameter</param>   
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)">
            <summary>
            Constructs a named parameter, yet another flavor
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="direction">Only input parameters are supported in SQLite</param>
            <param name="precision">Ignored</param>
            <param name="scale">Ignored</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
            <param name="sourceColumnNullMapping">Whether or not this parameter is for comparing NULL's</param>
            <param name="value">The intial value to assign the parameter</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.Data.DbType,System.Int32)">
            <summary>
            Constructs an unnamed parameter of the specified type and size
            </summary>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.Data.DbType,System.Int32,System.String)">
            <summary>
            Constructs an unnamed parameter of the specified type, size, and source column
            </summary>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.#ctor(System.Data.DbType,System.Int32,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs an unnamed parameter of the specified type, size, source column and row version
            </summary>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.ResetDbType">
            <summary>
            Resets the DbType of the parameter so it can be inferred from the value
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.Clone">
            <summary>
            Clones a parameter
            </summary>
            <returns>A new, unassociated SQLiteParameter</returns>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.IsNullable">
            <summary>
            Whether or not the parameter can contain a null value
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.DbType">
            <summary>
            Returns the datatype of the parameter
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.Direction">
            <summary>
            Supports only input parameters
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.ParameterName">
            <summary>
            Returns the parameter name
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.Size">
            <summary>
            Returns the size of the parameter
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.SourceColumn">
            <summary>
            Gets/sets the source column
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.SourceColumnNullMapping">
            <summary>
            Used by DbCommandBuilder to determine the mapping for nullable fields
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.SourceVersion">
            <summary>
            Gets and sets the row version
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter.Value">
            <summary>
            Gets and sets the parameter value.  If no datatype was specified, the datatype will assume the type from the value given.
            </summary>
        </member>
        <member name="T:DevNet.Cache.DBParamsCache">
            <summary>
             数据库参数缓存
            </summary>
        </member>
        <member name="M:DevNet.Cache.DBParamsCache.SetCacheParameter(System.String,System.Data.Common.DbParameter[])">
            <summary>
            设置缓存参数，传入keyText
            </summary>
            <param name="keyText"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:DevNet.Cache.DBParamsCache.GetCachedParameter(System.String)">
            <summary>
            获取缓存参数，不存在返回null
            </summary>
            <param name="keyText"></param>
            <returns></returns>
        </member>
        <member name="P:DevNet.Cache.DBParamsCache.ParamCache">
            <summary>
            线程安全HashTable
            </summary>
        </member>
        <member name="T:DevNet.Mapper.DataMapper">
            <summary>
            数据Mapper类
            </summary>
        </member>
        <member name="F:DevNet.Mapper.DataMapper.ScriptMapPath">
            <summary>
            脚本映射路径
            </summary>
        </member>
        <member name="M:DevNet.Mapper.DataMapper.#ctor(System.String)">
            <summary>
            数据映射构造函数，脚本映射路径为AppSetting的ScriptMapPath值；使用AppSetting的ScriptMapCacheInterval的分钟值进行缓存，并且缓存依赖映射文件
            </summary>
            <param name="scriptMapperFile">映射文件名称</param>
        </member>
        <member name="F:DevNet.Mapper.DataMapper._scriptMapperFileName">
            <summary>
            映射文件无路径、无扩展名的名称
            </summary>
        </member>
        <member name="M:DevNet.Mapper.DataMapper.LoadMapperInfo">
            <summary>
            从配置文件中加载映射信息
            </summary>
        </member>
        <member name="M:DevNet.Mapper.DataMapper.GetMapperCommand(System.String)">
            <summary>
            获取映射相关信息
            </summary>
        </member>
        <member name="P:DevNet.Mapper.DataMapper.MapperCommandList">
            <summary>
            获取映射命令集合列表
            </summary>
        </member>
        <member name="P:DevNet.Mapper.DataMapper.MapperCommand">
            <summary>
            获取当前映射命令，获取前请注意先设置MapperCommandName属性
            </summary>
        </member>
        <member name="P:DevNet.Mapper.DataMapper.MapperCommandName">
            <summary>
            获取或设置当前映射命令名称
            </summary>
        </member>
        <member name="P:DevNet.Mapper.DataMapper.ScriptMapperFile">
            <summary>
            获取脚本映射文件绝对路径
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.AdoAccess.AdoCommand">
            <summary>
            自定义的AdoCommand,有点问题参考微软在.net下使用AdoDB不安全的解释
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoCommand.#ctor(ADODB.Connection)">
            <summary>
            ADOCommand Construct
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoCommand.#ctor(System.String,ADODB.Connection)">
            <summary>
            ADOCommand Dispose Construct
            </summary>
            <param name="strCommand"></param>
            <param name="conn"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoCommand.Cancel">
            <summary>
            Cancel a ADOCommand
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoCommand.ConvertFromADO(ADODB.Recordset)">
            <summary>
            Convert to DataTable by Ado Recordset
            </summary>
            <param name="rs"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoCommand.CreateDbParameter">
            <summary>
            Create DbParameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoCommand.Dispose(System.Boolean)">
            <summary>
            Dispose a DbCommand
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoCommand.ExecuteDataTable">
            <summary>
            Execute Query return DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>
            Execute Query return DbDataReader
            </summary>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoCommand.ExecuteNonQuery">
            <summary>
            Execute Query 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoCommand.ExecuteScalar">
            <summary>
            Execute Query
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoCommand.Prepare">
            <summary>
            Prepare DbCommand
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoCommand.CommandText">
            <summary>
            Set or Return DbCommandText
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoCommand.CommandTimeout">
            <summary>
            Set or Return DbCommandTimeout
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoCommand.CommandType">
            <summary>
            Set or Return DbCommandType
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoCommand.DbConnection">
            <summary>
            Set or Return DbConnection
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoCommand.ADOConnection">
            <summary>
            Set or Return ADODB.Connection
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoCommand.DbParameterCollection">
            <summary>
            Return DbParameterCollection
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoCommand.Parameters">
            <summary>
            Return AdoDbParameterCollection
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoCommand.DbTransaction">
            <summary>
            Set or Return DbTransaction
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoCommand.DesignTimeVisible">
            <summary>
            Set or Return DesignTimeVisible
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoCommand.UpdatedRowSource">
            <summary>
            Set or Return UpdateRowSource
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection">
            <summary>
            SQLite implementation of DbParameterCollection.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection._command">
            <summary>
            The underlying command to which this collection belongs
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection._parameterList">
            <summary>
            The internal array of parameters in this collection
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection._unboundFlag">
            <summary>
            Determines whether or not all parameters have been bound to their statement(s)
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.#ctor(DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand)">
            <summary>
            Initializes the collection
            </summary>
            <param name="cmd">The command to which the collection belongs</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.GetEnumerator">
            <summary>
            Retrieves an enumerator for the collection
            </summary>
            <returns>An enumerator for the underlying array</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Add(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the value</param>
            <param name="sourceColumn">The source column</param>
            <returns>A SQLiteParameter object</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the value</param>
            <returns>A SQLiteParameter object</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Add(System.String,System.Data.DbType)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <returns>A SQLiteParameter object</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Add(DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="parameter">The parameter to add</param>
            <returns>A zero-based index of where the parameter is located in the array</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Add(System.Object)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="value">The parameter to add</param>
            <returns>A zero-based index of where the parameter is located in the array</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Adds a named/unnamed parameter and its value to the parameter collection.
            </summary>
            <param name="parameterName">Name of the parameter, or null to indicate an unnamed parameter</param>
            <param name="value">The initial value of the parameter</param>
            <returns>Returns the SQLiteParameter object created during the call.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.AddRange(DevNet.DBAccess.SQLiteDBAccess.SQLiteParameter[])">
            <summary>
            Adds an array of parameters to the collection
            </summary>
            <param name="values">The array of parameters to add</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an array of parameters to the collection
            </summary>
            <param name="values">The array of parameters to add</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Clear">
            <summary>
            Clears the array and resets the collection
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Contains(System.String)">
            <summary>
            Determines if the named parameter exists in the collection
            </summary>
            <param name="parameterName">The name of the parameter to check</param>
            <returns>True if the parameter is in the collection</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Contains(System.Object)">
            <summary>
            Determines if the parameter exists in the collection
            </summary>
            <param name="value">The SQLiteParameter to check</param>
            <returns>True if the parameter is in the collection</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.GetParameter(System.String)">
            <summary>
            Retrieve a parameter by name from the collection
            </summary>
            <param name="parameterName">The name of the parameter to fetch</param>
            <returns>A DbParameter object</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.GetParameter(System.Int32)">
            <summary>
            Retrieves a parameter by its index in the collection
            </summary>
            <param name="index">The index of the parameter to retrieve</param>
            <returns>A DbParameter object</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.IndexOf(System.String)">
            <summary>
            Returns the index of a parameter given its name
            </summary>
            <param name="parameterName">The name of the parameter to find</param>
            <returns>-1 if not found, otherwise a zero-based index of the parameter</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.IndexOf(System.Object)">
            <summary>
            Returns the index of a parameter
            </summary>
            <param name="value">The parameter to find</param>
            <returns>-1 if not found, otherwise a zero-based index of the parameter</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a parameter into the array at the specified location
            </summary>
            <param name="index">The zero-based index to insert the parameter at</param>
            <param name="value">The parameter to insert</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Remove(System.Object)">
            <summary>
            Removes a parameter from the collection
            </summary>
            <param name="value">The parameter to remove</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes a parameter from the collection given its name
            </summary>
            <param name="parameterName">The name of the parameter to remove</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a parameter from the collection given its index
            </summary>
            <param name="index">The zero-based parameter index to remove</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            Re-assign the named parameter to a new parameter object
            </summary>
            <param name="parameterName">The name of the parameter to replace</param>
            <param name="value">The new parameter</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            Re-assign a parameter at the specified index
            </summary>
            <param name="index">The zero-based index of the parameter to replace</param>
            <param name="value">The new parameter</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Unbind">
            <summary>
            Un-binds all parameters from their statements
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.MapParameters(DevNet.DBAccess.SQLiteDBAccess.SQLiteStatement)">
            <summary>
            This function attempts to map all parameters in the collection to all statements in a Command.
            Since named parameters may span multiple statements, this function makes sure all statements are bound
            to the same named parameter.  Unnamed parameters are bound in sequence.
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.IsSynchronized">
            <summary>
            Returns true
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.IsFixedSize">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.IsReadOnly">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.SyncRoot">
            <summary>
            Returns null
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Count">
            <summary>
            Returns a count of parameters in the collection
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Item(System.String)">
            <summary>
            Overloaded to specialize the return value of the default indexer
            </summary>
            <param name="parameterName">Name of the parameter to get/set</param>
            <returns>The specified named SQLite parameter</returns>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteParameterCollection.Item(System.Int32)">
            <summary>
            Overloaded to specialize the return value of the default indexer
            </summary>
            <param name="index">The index of the parameter to get/set</param>
            <returns>The specified SQLite parameter</returns>
        </member>
        <member name="T:DevNet.Dynamic.DynamicCompiler">
            <summary>
            C#动态编译类
            </summary>
        </member>
        <member name="M:DevNet.Dynamic.DynamicCompiler.GetAssembly(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            根据C#代码文本获取动态编译后的程序集，程序集输出在内存中
            </summary>
            <param name="codeText"></param>
            <param name="refs">引用的程序集</param>
            <see cref="!:如果传入空或null,默认&#xA;            mscorlib.dll&#xA;            System.dll&#xA;            System.Data.dll&#xA;            System.Drawing.dll&#xA;            "/>
            <returns></returns>
        </member>
        <member name="T:DevNet.Logger.LoggFile">
            <summary>
            写入日志文件类
            </summary>
        </member>
        <member name="M:DevNet.Logger.LoggFile.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">日志文件路径</param>
        </member>
        <member name="M:DevNet.Logger.LoggFile.WriteTxtExceptionInfo(System.String,System.Exception)">
            <summary>
            写日志文本信息方法 【可重写】
            </summary>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="M:DevNet.Logger.LoggFile.WriteExceptionMsg(System.String,System.Exception)">
            <summary>
            写入异常信息，可重写 [使用异步写日志文本]
            </summary>
            <param name="msg"></param>
            <param name="ex">异常对象，可为null</param>
        </member>
        <member name="T:DevNet.DBAccess.ScriptQuery">
            <summary>
            封装了sql语句[使用参数模式]，提供简单的数据操作帮助
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.LeftBraces_Const">
            <summary>
            左大括号
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.RightBraces_Const">
            <summary>
            右大括号
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.LeftBrackets_Const">
            <summary>
            左中括号
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.RightBrackets_Const">
            <summary>
            右中括号
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.LeftParentheses_Const">
            <summary>
            左圆括号
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.RightParentheses_Const">
            <summary>
            右圆括号
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.MoreThan_Const">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.MoreEqual_Const">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.LessThan_Const">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.LessEqual_Const">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.Equal_Const">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.NotEqual_Const">
            <summary>
            不等于(尖括号)
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.NotEqual_ConstC">
            <summary>
            不等于（!=）
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.NOT_Const">
            <summary>
            "NOT"字符
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.Exists_Const">
            <summary>
            "EXISTS"字符
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.OR_Const">
            <summary>
            "OR"字符
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.Star_Const">
            <summary>
            *
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.Dot_Const">
            <summary>
            .
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.Comma_Const">
            <summary>
            ,
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.QuotationMark_Const">
            <summary>
            ;
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.Where1Equal1_Const">
            <summary>
            " where 1=1 "字符
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.Quote_Const">
            <summary>
            '
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.Percent_Const">
            <summary>
            %
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.#ctor(System.String)">
            <summary>
            ScriptQuery 提供简单的数据操作帮助
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.#ctor(DevNet.DBAccess.DBConnect,System.String)">
            <summary>
            ScriptQuery 提供简单的数据操作帮助
            </summary>
            <param name="dbCon">连接对象</param>
            <param name="tableName">操作的表名</param>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.#ctor">
            <summary>
            ScriptQuery 提供简单的数据操作帮助
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetCmd">
            <summary>
            获取DbCommand命令 仅获取命令对象及已设置的参数，不包含CommandText和CommandType
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery._WriteScriptSQL">
            <summary>
            输出SQL脚本位置，如为空，则不输出；有两个选择：Trace（调试窗口） Log（文本文件日志输出）
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Clear">
            <summary>
            清除所有已设置的值，恢复默认值
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddSqlText(System.String)">
            <summary>
            插入sql文本
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.BeginTrans">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.RollBackTrans">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.CommitTrans">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetDataReader(System.Data.CommandBehavior)">
            <summary>
            获取DataReader对象
            </summary>
            <param name="cmdBehavior">CommandBehavior枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetDataTable">
            <summary>
            获取DataTable，如设置了PageIndex和PageSize的值，将返回分页DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetPageDataTable">
            <summary>
            获取分页DataTable,请先设置PageIndex和PageSize值
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.ExecuteNonQuery">
            <summary>
            执行脚本
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetDataSet">
            <summary>
            获取DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetScalar">
            <summary>
            获取Scalar
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetAllListObjs``1">
            <summary>
             获取所有实体集合[使用反射]
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetListObjs``1">
            <summary>
            获取实体列表,如设置了PageIndex和PageSize，则返回分页的实体列表[使用反射]
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetSingleObj``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单条实体，如不存在返回null[使用反射]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName">条件的字段</param>
            <param name="fieldValue">条件字段的值</param>
            <param name="cpEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetSingleObj``1(System.String[],System.Object[])">
            <summary>
            获取单条实体，如不存在返回null[使用反射]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName">条件的字段</param>
            <param name="fieldValue">条件字段的值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetAllList``1">
            <summary>
             获取所有实体集合[使用EntityBase中的方法]
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetList``1">
            <summary>
            获取实体列表,如设置了PageIndex和PageSize，则返回分页的实体列表[使用EntityBase中的方法]
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetEntityList">
            <summary>
            获取自定义实体集合(object对象派生自EntityBase,目前不支持.NET 2.0)[自定义选择语句，使用((EntityBase)object)[“字段名”]获取弱类型值，若要更新EntityBase实体，请自定义更新方法]
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetSingle``1(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            获取单条实体，如不存在返回null[使用EntityBase中的方法]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName">条件的字段</param>
            <param name="fieldValue">条件字段的值</param>
            <param name="cpEnum">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetSingle``1(System.String[],System.Object[])">
            <summary>
            获取单条实体，如不存在返回null[使用EntityBase中的方法]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName">条件的字段</param>
            <param name="fieldValue">条件字段的值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetMaxNextID(System.String)">
            <summary>
            获取Int类型字段的MaxNext值
            </summary>
            <param name="intTypeField"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.SetCmdParameters(System.Data.Common.DbParameter[])">
            <summary>
            设置执行的命令参数[将清空原有参数]
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddCmdParameters(System.Data.Common.DbParameter[])">
            <summary>
            在现有命令参数集合中添加参数
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddCmdParameters(System.String,System.Object)">
            <summary>
            在现有的命令中添加参数
            </summary>
            <param name="parameterName"></param>
            <param name="parameterValue"></param>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddCmdParameters(System.String[],System.Object[])">
            <summary>
            在现有的命令中添加参数
            </summary>
            <param name="parameterNames"></param>
            <param name="parameterValues"></param>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GetCmdParameters">
            <summary>
            获取执行参数集合，用以作其它处理
            </summary>
            <see cref="!:&#xA;            使用方法&#xA;            List &lt;DbParameter&gt; ps = null&#xA;            Script.GetCmdParameters(out ps)&#xA;            ps[0].......其它处理操作&#xA;            请在设置完脚本并且在执行操作之前调用该方法"/>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.getDynamicCompilerScript(System.String)">
            <summary>
            动态编译获取执行脚本
            </summary>
            <param name="dyScript"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.SetScriptByMapperCommand``1(DevNet.Mapper.MapperCommand,``0)">
            <summary>
            根据MapperCommand映射命令信息设置执行脚本，如果MapperCommand的CommandType为存储过程，将自动从存储过程中获取参数
            </summary>
            <typeparam name="TParameter">需要设置MapperCommand映射参数值的类</typeparam>
            <param name="mapperCommand">MapperCommand映射命令对象</param>
            <param name="parameterObj">需要设置MapperCommand映射参数值对象，根据该对象属性值设置对应的参数值，属性名称请与映射参数名称保持一致，可以为null</param>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.SetScriptByMapperCommand(DevNet.Mapper.MapperCommand)">
            <summary>
            根据MapperCommand映射命令信息设置执行脚本，如果MapperCommand的CommandType为存储过程，将自动从存储过程中获取参数，参数初始化为DBNull.Value
            </summary>
            <param name="mapperCommand">MapperCommand映射命令对象</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.SetScriptByMapperCommand``1(DevNet.Mapper.MapperCommand,``0,System.Collections.Generic.List{System.Data.Common.DbParameter}@)">
            <summary>
            根据MapperCommand映射命令信息设置执行脚本，如果MapperCommand的CommandType为存储过程，将自动从存储过程中获取参数
            </summary>
            <typeparam name="TParameter">需要设置MapperCommand映射参数值的类</typeparam>
            <param name="mapperCommand">MapperCommand映射命令对象</param>
            <param name="parameterObj">需要设置MapperCommand映射参数值对象，根据该对象属性值设置对应的参数值，属性名称请与映射参数名称保持一致，可以为null</param>
            <param name="parameters">输出参数集合</param>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.SetScriptByMapperCommand(DevNet.Mapper.MapperCommand,System.Collections.Generic.List{System.Data.Common.DbParameter}@)">
            <summary>
            根据MapperCommand映射命令信息设置执行脚本，如果MapperCommand的CommandType为存储过程，将自动从存储过程中获取参数，参数初始化为DBNull.Value
            </summary>
            <param name="mapperCommand">MapperCommand映射命令对象</param>
            <param name="parameters">输出参数集合</param>
            <returns></returns>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.SQL2005PagerSQL">
            <summary>
            SQL2005选择分页信息的字符串 【如设置为空，则使用.NET内置分页方法】 
            语句："select * from (select ROW_NUMBER() OVER (ORDER BY {0}) AS rownum,{1} from {2} ) as D  where rownum BETWEEN {3} and {4} ORDER BY {0}"
            {0}排序ID DESC   {1}选择的字段 *  {2}选择的表UserInfo+条件 {3}PageSize * (CurrentPageIndex - 1)+1  {4}PageSize * CurrentPageIndex
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.SQLTopPagerSQL">
            <summary>
            SQL选择分页信息Top语句的字符串，请设置PrimaryKey字段名称值 【如设置为空，则使用.NET内置分页方法】 
            语句："select top PageSize{4} *{1} from 表 where 条件{2} and id not in (select top PageSize * (CurrentPageIndex - 1){3} id from 表 where 条件{2} order by 排序条件_ABC{0}) order by 排序条件_ABC{0}"
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.AccessPagerSQL">
            <summary>
            Access数据库选择分页信息的字符串，请设置PrimaryKey字段名称值 【如设置为空，则使用.NET内置分页方法】 
            语句："select top PageSize{4} *{1} from 表 where 条件{2} and id not in (select top PageSize * (CurrentPageIndex - 1){3} id from 表 where 条件{2} order by 排序条件_ABC{0}) order by 排序条件_ABC{0}"
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.MySQLPagerSQL">
            <summary>
            MySQL数据库选择分页信息的字符串 【如设置为空，则使用.NET内置分页方法】 
            语句："select *{1}  from 表 where 条件{2} order by 排序条件_ABC{0} limit PageSize * (CurrentPageIndex - 1){3},PageSize{4}"
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.SQLitePagerSQL">
            <summary>
            SQLite数据库选择分页信息的字符串 【如设置为空，则使用.NET内置分页方法】 
            语句："select *{1}  from 表 where 条件{2} order by 排序条件_ABC{0} limit PageSize * (CurrentPageIndex - 1){3},PageSize{4}"
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.OraclePagerSQL">
             <summary>
             Oracle数据库选择分页信息的字符串 【如设置为空，则使用.NET内置分页方法】 
            语句： "SELECT * FROM (SELECT A.*, ROWNUM RN FROM (SELECT {1} FROM {2} order by {0}) A WHERE ROWNUM 小于等于PageSize * CurrentPageIndex{4}) WHERE RN >= PageSize * (CurrentPageIndex - 1)+1{3} "
             </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Select">
            <summary>
            添加“select”
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Select(System.String,System.String)">
            <summary>
            选择别名表字段（b.UserName）
            </summary>
            <param name="tableAlias"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Select``1(``0,System.String[])">
            <summary>
            选择实体中的字段，已加“select”
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objEntity"></param>
            <param name="exCludeFields">选择的排除字段可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Select``1(``0)">
            <summary>
            选择实体中的字段，已加“select"
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objEntity"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Select(System.String[])">
            <summary>
            选择数组中的字段，未加”select“
            </summary>
            <param name="fields">未加入“select ”</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.SelectTop(System.Int32)">
            <summary>
            选择Top条记录
            </summary>
            <param name="topRecords">已加入“select ”未添加选择字段（select top）</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.SelectTop(System.Int32,System.String[])">
            <summary>
            选择Top条记录（）
            </summary>
            <param name="topRecords">已加入“select ”（select top）</param>
            <param name="fields">选择的字段集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.SelectDistinct(System.String[])">
            <summary>
            选择Distinct
            </summary>
            <param name="fields">已加入“select ”</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.From">
            <summary>
            From表默认选择默认的表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.From(System.String,System.String)">
            <summary>
            From表名
            </summary>
            <param name="tableName"></param>
            <param name="tableAlias">表的别名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.From(System.String)">
            <summary>
            From表名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Join(System.String,System.String)">
            <summary>
            连接Join
            </summary>
            <param name="tableAilas">表名</param>
            <param name="tableName">表别名</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.ON(System.String,System.String)">
            <summary>
            已加入“on”默认“=”
            </summary>
            <param name="field1">字段1  a.ID</param>
            <param name="field2">字段2  b.ID</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AS(System.String)">
            <summary>
            As别名
            </summary>
            <param name="alias">别名，末尾未加","</param>
            <returns></returns>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery._orderByStr">
            <summary>
            排序字符串，未加” order by “
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.OrderBy(System.String,DevNet.DBAccess.ScriptQuery.SortEnum)">
            <summary>
            排序，未加" order by " 如有多个排序字段已处理“,”
            </summary>
            <param name="fieldName"></param>
            <param name="sortEnum"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.GroupBy(System.String[])">
            <summary>
            分组 
            </summary>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Having(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            Having条件
            </summary>
            <param name="firstExpress">having表达式[Max("id")]</param>
            <param name="endValue">比较的值</param>
            <param name="cp">比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Max(System.String)">
            <summary>
            最大值
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Avg(System.String)">
            <summary>
            平均值
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Count(System.String)">
            <summary>
            记录总数
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Sum(System.String)">
            <summary>
            求和
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.In(System.String,System.Object[])">
            <summary>
            条件“IN”
            </summary>
            <param name="fieldName">IN字段</param>
            <param name="fieldInValues">值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Case(System.String)">
            <summary>
            “case”条件
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.When(System.Object)">
            <summary>
            “when”条件
            </summary>
            <param name="fieldValue">条件值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Then(System.Object)">
            <summary>
            “then”
            </summary>
            <param name="fieldValue">值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Else(System.Object)">
            <summary>
            "else"
            </summary>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.End">
            <summary>
            "end"
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Where``1(``0)">
            <summary>
            where条件默认”=“
            </summary>
            <typeparam name="T">泛型实体[实体属性名称请与字段名称一致]</typeparam>
            <param name="objEntity"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Where(System.String[],System.Object[])">
            <summary>
            where条件默认“=“
            </summary>
            <param name="paramNames">字段数组</param>
            <param name="paramValues">值数组</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Where(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            where条件
            </summary>
            <param name="paramName">字段名称</param>
            <param name="paramValue">字段值</param>
            <param name="cpEnum">条件比较枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Where(System.String,System.Object)">
            <summary>
            where条件
            </summary>
            <param name="paramName">字段名称(默认条件“=”)</param>
            <param name="paramValue">字段值(默认条件“=”)</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Between(System.String,System.Object,System.Object)">
            <summary>
            Between条件
            </summary>
            <param name="fieldName">字段名</param>
            <param name="firstValue">起始值</param>
            <param name="endValue">结束值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Where">
            <summary>
            增加" where 1=1 "条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Like(System.String,System.Object)">
            <summary>
            Like条件%*%
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.LikeRight(System.String,System.Object)">
            <summary>
            Like条件*%
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.LikeLeft(System.String,System.Object)">
            <summary>
            Like条件%*
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.CharIndex(System.String,System.String,System.Int32)">
            <summary>
            Charindex表达式【CHARINDEX('bicycle1', DocumentSummary, 5) 如表达式为空，则始终返回真】
            </summary>
            <param name="express">表达式</param>
            <param name="fieldName">字段名称</param>
            <param name="startInex">开始比较索引</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.CharIndex(System.String,System.String)">
            <summary>
            Charindex表达式【CHARINDEX('bicycle1', DocumentSummary)】
            </summary>
            <param name="express">表达式</param>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.And(System.String,System.Object)">
            <summary>
            "And"条件
            </summary>
            <param name="fieldName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.OR(System.String,System.Object)">
            <summary>
            "OR"条件
            </summary>
            <param name="filedName">条件字段【默认条件“=”】</param>
            <param name="fieldValue">条件字段值【默认条件“=”】</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.OR(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            "OR"条件
            </summary>
            <param name="filedName">条件字段</param>
            <param name="fieldValue">条件字段值</param>
            <param name="compareEnum">比较条件枚举</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.JoinWhereCondition``1(``0)">
            <summary>
            连接where条件（参数模式）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objEntity"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.JoinWhereCondition(System.String[],System.Object[])">
            <summary>
            连接where条件（参数模式）
            </summary>
            <param name="paramNames"></param>
            <param name="paramValues"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.JoinWhereCondition(System.String,System.Object,DevNet.DBAccess.ScriptQuery.CompareEnum)">
            <summary>
            
            </summary>
            <param name="paramName"></param>
            <param name="paramValue"></param>
            <param name="cpEnum"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <param name="firstValue"></param>
            <param name="endValue"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Insert``1(``0,System.String[])">
            <summary>
            Insert语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objEntity"></param>
            <param name="exCludeFields">排除的字段名（譬如自动增长型字段）可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Insert``1(``0)">
            <summary>
             Insert语句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objEntity"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Insert(System.String[],System.Object[])">
            <summary>
            "Insert"语句
            </summary>
            <param name="fieldNames">字段集合</param>
            <param name="fieldValues">字段值集合</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Update``1(``0,System.String[])">
            <summary>
            更新语句（未加更新where条件）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objEntity"></param>
            <param name="exCludeFields">排除的字段名可以为null</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Update``1(``0)">
            <summary>
            更新语句（未加更新where条件）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objEntity"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Update(System.String[],System.Object[])">
            <summary>
            更新记录
            </summary>
            <param name="columnNames">字段</param>
            <param name="columnValues">字段值</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.Delete">
            <summary>
            Delete语句”delete“字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddLeftBraces">
            <summary>
            左大括号
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddRightBraces">
            <summary>
            右大括号
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddLeftBrackets">
            <summary>
            左中括号
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddRightBrackets">
            <summary>
            右中括号
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddLeftParentheses">
            <summary>
            左圆括号
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddRightParentheses">
            <summary>
            右圆括号
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddNot">
            <summary>
            "NOT"字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddExists">
            <summary>
            "Exists"字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddIF">
            <summary>
            ”If"字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddOr">
            <summary>
            “or”字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddIn">
            <summary>
            “In”字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddPercent">
            <summary>
            “%”
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddQuote">
            <summary>
            “'”
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddIS">
            <summary>
            “is”字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddNull">
            <summary>
            “null”字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddJoin">
            <summary>
            “join”字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddON">
            <summary>
            “on“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddAnd">
            <summary>
            ”and“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddBetween">
            <summary>
            ”between“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddMax">
            <summary>
            ”max“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddCount">
            <summary>
            ”count“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddAvg">
            <summary>
            ”avg“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddSum">
            <summary>
            ”sum“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddCompute">
            <summary>
            ”compute“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddBy">
            <summary>
            ”by“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddWhere">
            <summary>
            ”where“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddSelect">
            <summary>
            ”select“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddInto">
            <summary>
            ”into“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddTop">
            <summary>
            ”top“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddDistinct">
            <summary>
            ”distinct“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddFrom">
            <summary>
            ”from“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddAs">
            <summary>
            ”as“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddOrderBy">
            <summary>
            ”order by“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddGroupby">
            <summary>
            ”group by“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddHaving">
            <summary>
            ”having“字符
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.ALL">
            <summary>
            " * "符号
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddDot">
            <summary>
            "."符号
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddComma">
            <summary>
            ","符号
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddQuotationMark">
            <summary>
            ";"分号符号
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddFor">
            <summary>
            "for" 符号
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddLike">
            <summary>
            "like"符号
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddElse">
            <summary>
            "else"字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddCase">
            <summary>
            ”case”字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddWhen">
            <summary>
            “when”字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.ScriptQuery.AddThen">
            <summary>
            “then”字符
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevNet.DBAccess.ScriptQuery.DBConnect">
            <summary>
            获取或设置DBConnect连接对象
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.ScriptQuery.KeepConnection">
            <summary>
            在该类执行范围内是否保持数据库连接状态,默认false
            【如设置为true，请使用using代码块或显式调用Dispose()释放资源】
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.ScriptQuery.TableName">
            <summary>
            获取或设置数据表名
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.ScriptQuery.PageIndex">
            <summary>
            页面索引从1开始
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.ScriptQuery.RecordCount">
            <summary>
            分页查询返回的记录总数
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.ScriptQuery.PageSize">
            <summary>
            分页记录数
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.ScriptQuery.PageCount">
            <summary>
            获取页面总数
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.ScriptQuery.CmdType">
            <summary>
            获取或设置CommandType
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.ScriptQuery.PrimaryKey">
            <summary>
            使用top分页语句时以下表达式的“id”字段名称，[默认“ID”]一般为主键字段：
            select top PageSize * from 表 where 条件 and id not in (select top PageSize * (CurrentPageIndex - 1) id from 表 where 条件 order by 排序条件_ABC) order by 排序条件_ABC
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.ScriptQuery.IsSQL2005Pager">
            <summary>
            是否SQL2005分页[默认true(使用row_number() over())，如设置为false(使用top语句分页，请设置PrimaryKey字段名称值)]
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.ScriptQuery.Value">
            <summary>
            获取或设置字符串文本值
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.ScriptQuery.HasWhere">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.ScriptQuery.SortEnum">
            <summary>
            排序枚举
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.SortEnum.ASC">
            <summary>
            升序  1
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.SortEnum.DESC">
            <summary>
            降序 2
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.ScriptQuery.CompareEnum">
            <summary>
            操作比较枚举
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.CompareEnum.MoreThan">
            <summary>
            大于 >
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.CompareEnum.MoreEqual">
            <summary>
            大于等于 >=
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.CompareEnum.LessThan">
            <summary>
            小于 ()
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.CompareEnum.LessEqual">
            <summary>
            小于等于 
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.CompareEnum.Equal">
            <summary>
            等于 =
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.CompareEnum.NotEqual">
            <summary>
            不等于(尖括号) 
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.ScriptQuery.CompareEnum.NotEqualC">
            <summary>
            不等于（!=）
            </summary>
        </member>
        <member name="T:DevNet.StrongTable.StrongTableBase">
            <summary>
            强类型数据表基类
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.StrongTableBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevNet.StrongTable.StrongTableBase.#ctor(DevNet.DBAccess.DBConnect,System.String)">
            <summary>
            
            </summary>
            <param name="con"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:DevNet.StrongTable.StrongTableBase.#ctor(DevNet.DBAccess.DBConnect,System.Data.Common.DbCommand,System.String)">
            <summary>
            
            </summary>
            <param name="con"></param>
            <param name="selectCmd"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:DevNet.StrongTable.StrongTableBase.#ctor(DevNet.DBAccess.DBConnect,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="con"></param>
            <param name="selectText"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:DevNet.StrongTable.StrongTableBase.#ctor(DevNet.DBAccess.ScriptQuery)">
            <summary>
            
            </summary>
            <param name="scriptQuery"></param>
        </member>
        <member name="M:DevNet.StrongTable.StrongTableBase.UpdateTable(DevNet.DBAccess.DBConnect)">
            <summary>
            更新数据默认打开一个事务
            </summary>
            <param name="con"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.StrongTableBase.UpdateTable">
            <summary>
            更新数据默认打开一个事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.StrongTable.StrongTableBase.GetEnumerator">
            <summary>
            IEnumerator枚举
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevNet.StrongTable.StrongTableBase.SourctTableName">
            <summary>
            数据表名
            </summary>
        </member>
        <member name="P:DevNet.StrongTable.StrongTableBase.Count">
            <summary>
            表中的行总数
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.DBHelper">
            <summary>
            实体数据帮助类 [提供object对象[实体类]、DataTable、DbDataReader和DbParameter与之间的转换设置]
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.DBHelper.GetEntityCollection``1(System.Data.DataTable)">
            <summary>
            获取实体集合[使用反射]
            </summary>
            <typeparam name="T">实体（请确保存在无参数构造函数）</typeparam>
            <param name="table">内存表</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBHelper.GetEntityCollection``1(System.Data.Common.DbDataReader)">
            <summary>
            获取实体集合[使用反射]
            </summary>
            <typeparam name="T">实体（请确保存在无参数构造函数）</typeparam>
            <param name="dbRead">DataReader</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBHelper.SetParamsValue``1(``0,System.Data.Common.DbParameter[])">
            <summary>
            根据Object对象[实体类]设置DbParameter参数值[使用反射]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objEntity">Object对象[实体类]（属性名称请与参数名称保持一致）</param>
            <param name="parameter"></param>
        </member>
        <member name="M:DevNet.DBAccess.DBHelper.SetObjByRead``1(``0,System.Data.Common.DbDataReader)">
            <summary>
            从DataReader中获取数据设置Object对象[实体类]的值[使用反射]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objEntity">Object对象[实体类]（属性名称请与数据表字段名称保持一致）</param>
            <param name="dbRead"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBHelper.SetObjByRow``1(``0,System.Data.DataRow)">
            <summary>
            从DataRow中获取数据设置Object对象[实体类]的值[使用反射]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objEntity">Object对象[实体类]（属性名称请与数据表字段名称保持一致）</param>
            <param name="dataRow"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBHelper.GetEntityLists``1(System.Data.DataTable)">
            <summary>
            获取实体集合[使用EntityBase中的方法]
            </summary>
            <typeparam name="T">实体泛型[请继承自EntityBase]（属性名称请与数据表字段名称保持一致）</typeparam>
            <param name="table">DataTable数据集</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBHelper.GetEntityLists``1(System.Data.Common.DbDataReader)">
            <summary>
            获取实体集合[使用EntityBase中的方法]
            </summary>
            <typeparam name="T">实体泛型[请继承自EntityBase]（属性名称请与数据表字段名称保持一致）</typeparam>
            <param name="dbRead">DataReader数据集</param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.DBHelper.SetParamsInfo``1(``0,System.Data.Common.DbParameter[])">
            <summary>
            设置执行命令的参数值[使用EntityBase中的方法]
            </summary>
            <typeparam name="T">实体泛型[请继承自EntityBase]</typeparam>
            <param name="objEntity">泛型对象[请继承自EntityBase]（属性名称请与参数名称保持一致）</param>
            <param name="parameter">参数集合</param>
        </member>
        <member name="M:DevNet.DBAccess.DBHelper.SetEntityByRead``1(``0,System.Data.Common.DbDataReader)">
            <summary>
            设置实体属性值[使用EntityBase中的方法]
            </summary>
            <typeparam name="T">实体泛型[请继承自EntityBase]</typeparam>
            <param name="objEntity">泛型对象[请继承自EntityBase]（属性名称请与数据表字段名称保持一致）</param>
            <param name="dbRead">DataReader数据行</param>
        </member>
        <member name="M:DevNet.DBAccess.DBHelper.SetEntityByRow``1(``0,System.Data.DataRow)">
            <summary>
            设置实体属性值[使用EntityBase中的方法]
            </summary>
            <typeparam name="T">实体泛型[请继承自EntityBase]</typeparam>
            <param name="objEntity">泛型对象[请继承自EntityBase]（属性名称请与数据表字段名称保持一致）</param>
            <param name="dataRow">DataRow数据行</param>
        </member>
        <member name="T:DevNet.Logger.LogDB">
            <summary>
            数据表日志，记录用户操作日志
            </summary>
        </member>
        <member name="M:DevNet.Logger.LogDB.InsertLog(DevNet.Entity.EntityBase)">
            <summary>
            写入数据表日志，如发生异常不再抛出，写入异常日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:DevNet.Logger.LogDB.InsertLog(DevNet.DBAccess.DBConnect,DevNet.Entity.EntityBase)">
            <summary>
            写入数据表日志，如发生异常不再抛出，写入异常日志
            </summary>
            <param name="dbConn">数据连接对象</param>
            <param name="log"></param>
        </member>
        <member name="T:DevNet.Handle.InsertHandle">
            <summary>
            Insert委托
            </summary>
            <param name="sender"></param>
            <param name="insertHandleArg"></param>
        </member>
        <member name="T:DevNet.Handle.UpdateHandle">
            <summary>
            Update委托
            </summary>
            <param name="sender"></param>
            <param name="updateHandleArg"></param>
        </member>
        <member name="T:DevNet.Handle.DeleteHandle">
            <summary>
            Delete委托
            </summary>
            <param name="sender"></param>
            <param name="deleteHandleArg"></param>
        </member>
        <member name="T:DevNet.Handle.InsertHandleArg">
            <summary>
            Insert事件参数
            </summary>
        </member>
        <member name="M:DevNet.Handle.InsertHandleArg.#ctor(System.String,System.Object)">
            <summary>
            Insert
            </summary>
            <param name="insertSql"></param>
            <param name="obj"></param>
        </member>
        <member name="P:DevNet.Handle.InsertHandleArg.Cancel">
            <summary>
            是否取消Insert操作
            </summary>
        </member>
        <member name="P:DevNet.Handle.InsertHandleArg.IsFail">
            <summary>
            是否Insert操作失败
            </summary>
        </member>
        <member name="P:DevNet.Handle.InsertHandleArg.Obj">
            <summary>
            Obj实体对象 
            </summary>
        </member>
        <member name="P:DevNet.Handle.InsertHandleArg.InsertSql">
            <summary>
            Insert语句
            </summary>
        </member>
        <member name="T:DevNet.Handle.UpdateHandleArg">
            <summary>
            Update事件参数
            </summary>
        </member>
        <member name="M:DevNet.Handle.UpdateHandleArg.#ctor(System.String,System.Object)">
            <summary>
            Update
            </summary>
            <param name="updateSql"></param>
            <param name="obj"></param>
        </member>
        <member name="P:DevNet.Handle.UpdateHandleArg.Cancel">
            <summary>
            是否取消Update操作
            </summary>
        </member>
        <member name="P:DevNet.Handle.UpdateHandleArg.IsFail">
            <summary>
            是否Update操作失败
            </summary>
        </member>
        <member name="P:DevNet.Handle.UpdateHandleArg.Obj">
            <summary>
            Obj实体对象
            </summary>
        </member>
        <member name="P:DevNet.Handle.UpdateHandleArg.UpdateSql">
            <summary>
            Update语句
            </summary>
        </member>
        <member name="T:DevNet.Handle.DeleteHandleArg">
            <summary>
            Delete事件参数
            </summary>
        </member>
        <member name="M:DevNet.Handle.DeleteHandleArg.#ctor(System.String,System.Object)">
            <summary>
            Delete
            </summary>
            <param name="deleteSql"></param>
            <param name="obj"></param>
        </member>
        <member name="P:DevNet.Handle.DeleteHandleArg.Cancel">
            <summary>
            是否取消Delete操作
            </summary>
        </member>
        <member name="P:DevNet.Handle.DeleteHandleArg.IsFail">
            <summary>
            是否Delete操作失败
            </summary>
        </member>
        <member name="P:DevNet.Handle.DeleteHandleArg.Obj">
            <summary>
            Obj实体对象
            </summary>
        </member>
        <member name="P:DevNet.Handle.DeleteHandleArg.DeleteSql">
            <summary>
            delete语句
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader">
            <summary>
            SQLite implementation of DbDataReader.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader._command">
            <summary>
            Underlying command this reader is attached to
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader._activeStatementIndex">
            <summary>
            Index of the current statement in the command being processed
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader._activeStatement">
            <summary>
            Current statement being Read()
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader._readingState">
            <summary>
            State of the current statement being processed.
            -1 = First Step() executed, so the first Read() will be ignored
             0 = Actively reading
             1 = Finished reading
             2 = Non-row-returning statement, no records
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader._rowsAffected">
            <summary>
            Number of records affected by the insert/update statements executed on the command
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader._fieldCount">
            <summary>
            Count of fields (columns) in the row-returning statement currently being processed
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader._fieldTypeArray">
            <summary>
            Datatypes of active fields (columns) in the current statement, used for type-restricting data
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader._commandBehavior">
            <summary>
            The behavior of the datareader
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader._disposeCommand">
            <summary>
            If set, then dispose of the command object when the reader is finished
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader._throwOnDisposed">
            <summary>
            If set, then raise an exception when the object is accessed after being disposed.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader._keyInfo">
            <summary>
            An array of rowid's for the active statement if CommandBehavior.KeyInfo is specified
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader._version">
            <summary>
            Matches the version of the connection.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader._baseSchemaName">
            <summary>
            The "stub" (i.e. placeholder) base schema name to use when returning
            column schema information.  Matches the base schema name used by the
            associated connection.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.#ctor(DevNet.DBAccess.SQLiteDBAccess.SQLiteCommand,System.Data.CommandBehavior)">
            <summary>
            Internal constructor, initializes the datareader and sets up to begin executing statements
            </summary>
            <param name="cmd">The SQLiteCommand this data reader is for</param>
            <param name="behave">The expected behavior of the data reader</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.Dispose(System.Boolean)">
            <summary>
            Dispose of all resources used by this datareader.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.Close">
            <summary>
            Closes the datareader, potentially closing the connection as well if CommandBehavior.CloseConnection was specified.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.CheckClosed">
            <summary>
            Throw an error if the datareader is closed
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.CheckValidRow">
            <summary>
            Throw an error if a row is not loaded
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetEnumerator">
            <summary>
            Enumerator support
            </summary>
            <returns>Returns a DbEnumerator object.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.VerifyType(System.Int32,System.Data.DbType)">
            <summary>
            SQLite is inherently un-typed.  All datatypes in SQLite are natively strings.  The definition of the columns of a table
            and the affinity of returned types are all we have to go on to type-restrict data in the reader.
            
            This function attempts to verify that the type of data being requested of a column matches the datatype of the column.  In
            the case of columns that are not backed into a table definition, we attempt to match up the affinity of a column (int, double, string or blob)
            to a set of known types that closely match that affinity.  It's not an exact science, but its the best we can do.
            </summary>
            <returns>
            This function throws an InvalidTypeCast() exception if the requested type doesn't match the column's definition or affinity.
            </returns>
            <param name="i">The index of the column to type-check</param>
            <param name="typ">The type we want to get out of the column</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetBoolean(System.Int32)">
            <summary>
            Retrieves the column as a boolean value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>bool</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetByte(System.Int32)">
            <summary>
            Retrieves the column as a single byte value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>byte</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Retrieves a column as an array of bytes (blob)
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <param name="fieldOffset">The zero-based index of where to begin reading the data</param>
            <param name="buffer">The buffer to write the bytes into</param>
            <param name="bufferoffset">The zero-based index of where to begin writing into the array</param>
            <param name="length">The number of bytes to retrieve</param>
            <returns>The actual number of bytes written into the array</returns>
            <remarks>
            To determine the number of bytes in the column, pass a null value for the buffer.  The total length will be returned.
            </remarks>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetChar(System.Int32)">
            <summary>
            Returns the column as a single character
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>char</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Retrieves a column as an array of chars (blob)
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <param name="fieldoffset">The zero-based index of where to begin reading the data</param>
            <param name="buffer">The buffer to write the characters into</param>
            <param name="bufferoffset">The zero-based index of where to begin writing into the array</param>
            <param name="length">The number of bytes to retrieve</param>
            <returns>The actual number of characters written into the array</returns>
            <remarks>
            To determine the number of characters in the column, pass a null value for the buffer.  The total length will be returned.
            </remarks>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Retrieves the name of the back-end datatype of the column
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>string</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetDateTime(System.Int32)">
            <summary>
            Retrieve the column as a date/time value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetDecimal(System.Int32)">
            <summary>
            Retrieve the column as a decimal value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>decimal</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetDouble(System.Int32)">
            <summary>
            Returns the column as a double
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>double</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetFieldType(System.Int32)">
            <summary>
            Returns the .NET type of a given column
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Type</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetFloat(System.Int32)">
            <summary>
            Returns a column as a float value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>float</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetGuid(System.Int32)">
            <summary>
            Returns the column as a Guid
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Guid</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetInt16(System.Int32)">
            <summary>
            Returns the column as a short
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Int16</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetInt32(System.Int32)">
            <summary>
            Retrieves the column as an int
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Int32</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetInt64(System.Int32)">
            <summary>
            Retrieves the column as a long
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Int64</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetName(System.Int32)">
            <summary>
            Retrieves the name of the column
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>string</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetOrdinal(System.String)">
            <summary>
            Retrieves the i of a column, given its name
            </summary>
            <param name="name">The name of the column to retrieve</param>
            <returns>The int i of the column</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetSchemaTable">
            <summary>
            Schema information in SQLite is difficult to map into .NET conventions, so a lot of work must be done
            to gather the necessary information so it can be represented in an ADO.NET manner.
            </summary>
            <returns>Returns a DataTable containing the schema information for the active SELECT statement being processed.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetString(System.Int32)">
            <summary>
            Retrieves the column as a string
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>string</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetValue(System.Int32)">
            <summary>
            Retrieves the column as an object corresponding to the underlying datatype of the column
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>object</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetValues(System.Object[])">
            <summary>
            Retreives the values of multiple columns, up to the size of the supplied array
            </summary>
            <param name="values">The array to fill with values from the columns in the current resultset</param>
            <returns>The number of columns retrieved</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.IsDBNull(System.Int32)">
            <summary>
            Returns True if the specified column is null
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>True or False</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.NextResult">
            <summary>
            Moves to the next resultset in multiple row-returning SQL command.
            </summary>
            <returns>True if the command was successful and a new resultset is available, False otherwise.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.GetSQLiteType(System.Int32)">
            <summary>
            Retrieves the SQLiteType for a given column, and caches it to avoid repetetive interop calls.
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>A SQLiteType structure</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.Read">
            <summary>
            Reads the next row from the resultset
            </summary>
            <returns>True if a new row was successfully loaded and is ready for processing</returns>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.Depth">
            <summary>
            Not implemented.  Returns 0
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.FieldCount">
            <summary>
            Returns the number of columns in the current resultset
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.VisibleFieldCount">
            <summary>
            Returns the number of visible fielsd in the current resultset
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.HasRows">
            <summary>
            Returns True if the resultset has rows that can be fetched
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.IsClosed">
            <summary>
            Returns True if the data reader is closed
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.RecordsAffected">
            <summary>
            Retrieve the count of records affected by an update/insert command.  Only valid once the data reader is closed!
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.Item(System.String)">
            <summary>
            Indexer to retrieve data from a column given its name
            </summary>
            <param name="name">The name of the column to retrieve data for</param>
            <returns>The value contained in the column</returns>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteDataReader.Item(System.Int32)">
            <summary>
            Indexer to retrieve data from a column given its i
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>The value contained in the column</returns>
        </member>
        <member name="T:DevNet.Permission.Entity.SysRolePermission">
            <summary>
            表 SysRolePermission 系统角色权限的实体类
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRolePermission.SysRolePermission_TableName">
            <summary>
             表 SysRolePermission 数据表名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRolePermission.AutoIncrement">
            <summary>
             表 SysRolePermission 自动增长型字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRolePermission.RoleID_FieldName">
            <summary>
            RoleID 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRolePermission.PermissionID_FieldName">
            <summary>
            PermissionID 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRolePermission.OwnerCode_FieldName">
            <summary>
            系统角色权限菜单拥有者编号 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRolePermission.Owner_FieldName">
            <summary>
            角色权限所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......） 字段名称
            </summary>
        </member>
        <member name="M:DevNet.Permission.Entity.SysRolePermission.#ctor">
            <summary>
            系统角色权限
            </summary>
        </member>
        <member name="M:DevNet.Permission.Entity.SysRolePermission.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化时调用该方法，由于WCF的DataContract序列化不调用构造函数，由该方法初始化成员变量
            </summary>
            <param name="context"></param>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRolePermission.PrimaryKeyField">
            <summary>
             表 SysRolePermission 主键字段集合
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.SysRolePermission.RoleID">
            <summary>
            RoleID 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.SysRolePermission.PermissionID">
            <summary>
            PermissionID 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.SysRolePermission.OwnerCode">
            <summary>
            系统角色权限菜单拥有者编号 列默认-1
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.SysRolePermission.Owner">
            <summary>
            角色权限所属后台系统默认1（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......） 列
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.OleDBAccess.OleDbDirect">
            <summary>
            OleDb访问数据库类
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.OleDBAccess.OleDbDirect.#ctor(System.String)">
            <summary>
            Construct
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:DevNet.DBAccess.OleDBAccess.OleDbDirect.#ctor(System.Data.OleDb.OleDbConnection)">
            <summary>
            Construct
            </summary>
            <param name="oleConn"></param>
        </member>
        <member name="M:DevNet.DBAccess.OleDBAccess.OleDbDirect.CreateCommandBuilder(System.Data.Common.DbDataAdapter)">
            <summary>
            创建DbCommandBuilder实例
            </summary>
            <param name="da">DbDataAdapter</param>
            <returns>DbCommandBuilder</returns>
        </member>
        <member name="M:DevNet.DBAccess.OleDBAccess.OleDbDirect.CreateDbAdapter(System.Data.Common.DbCommand)">
            <summary>
            创建DbDataAdapter实例
            </summary>
            <param name="selectCmd">DbCommand</param>
            <returns>DbDataAdapter</returns>
        </member>
        <member name="M:DevNet.DBAccess.OleDBAccess.OleDbDirect.AddCmdParamWithValue(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            给DbCommand添加参数 ,指定参数名和参数值 
            </summary>
            <param name="cmd">DbCommand</param>
            <param name="paramName">参数名</param>
            <param name="paramValue">参数值</param>
        </member>
        <member name="M:DevNet.DBAccess.OleDBAccess.OleDbDirect.GetPKList(System.String)">
            <summary>
            Get Table PK_Primary
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:DevNet.Permission.Entity.SysRole">
            <summary>
            表 SysRole 系统角色的实体类
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRole.SysRole_TableName">
            <summary>
             表 SysRole 数据表名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRole.AutoIncrement">
            <summary>
             表 SysRole 自动增长型字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRole.RoleID_FieldName">
            <summary>
            RoleID 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRole.RoleName_FieldName">
            <summary>
            角色名称 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRole.RoleMemo_FieldName">
            <summary>
            角色说明 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRole.RoleState_FieldName">
            <summary>
            角色状态：1正常 2禁用 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRole.IsInnerRole_FieldName">
            <summary>
            是否内置角色 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRole.OwnerCode_FieldName">
            <summary>
            角色所有者编号 字段名称
            </summary>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRole.Owner_FieldName">
            <summary>
            角色所属后台系统（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......） 字段名称
            </summary>
        </member>
        <member name="M:DevNet.Permission.Entity.SysRole.#ctor">
            <summary>
            系统角色
            </summary>
        </member>
        <member name="M:DevNet.Permission.Entity.SysRole.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化时调用该方法，由于WCF的DataContract序列化不调用构造函数，由该方法初始化成员变量
            </summary>
            <param name="context"></param>
        </member>
        <member name="F:DevNet.Permission.Entity.SysRole.PrimaryKeyField">
            <summary>
             表 SysRole 主键字段集合
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.SysRole.RoleID">
            <summary>
            RoleID 列自动增长型
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.SysRole.RoleName">
            <summary>
            角色名称 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.SysRole.RoleMemo">
            <summary>
            角色说明 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.SysRole.RoleState">
            <summary>
            角色状态：1正常 2禁用 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.SysRole.IsInnerRole">
            <summary>
            是否内置角色 列
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.SysRole.OwnerCode">
            <summary>
            角色所有者编号 列默认-1
            </summary>
        </member>
        <member name="P:DevNet.Permission.Entity.SysRole.Owner">
            <summary>
            角色所属后台系统默认1（多后台系统，譬如：1系统后台权限  2用户后台权限  3园区后台权限 4 政府后台权限......） 列
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction">
            <summary>
            This abstract class is designed to handle user-defined functions easily.  An instance of the derived class is made for each
            connection to the database.
            </summary>
            <remarks>
            Although there is one instance of a class derived from SQLiteFunction per database connection, the derived class has no access
            to the underlying connection.  This is necessary to deter implementers from thinking it would be a good idea to make database
            calls during processing.
            
            It is important to distinguish between a per-connection instance, and a per-SQL statement context.  One instance of this class
            services all SQL statements being stepped through on that connection, and there can be many.  One should never store per-statement
            information in member variables of user-defined function classes.
            
            For aggregate functions, always create and store your per-statement data in the contextData object on the 1st step.  This data will
            be automatically freed for you (and Dispose() called if the item supports IDisposable) when the statement completes.
            </remarks>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction._base">
            <summary>
            The base connection this function is attached to
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction._contextDataList">
            <summary>
            Internal array used to keep track of aggregate function context data
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction._InvokeFunc">
            <summary>
            Holds a reference to the callback function for user functions
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction._StepFunc">
            <summary>
            Holds a reference to the callbakc function for stepping in an aggregate function
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction._FinalFunc">
            <summary>
            Holds a reference to the callback function for finalizing an aggregate function
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction._CompareFunc">
            <summary>
            Holds a reference to the callback function for collation sequences
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction._context">
            <summary>
            Current context of the current callback.  Only valid during a callback
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction._registeredFunctions">
            <summary>
            This static list contains all the user-defined functions declared using the proper attributes.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.#ctor">
            <summary>
            Internal constructor, initializes the function's internal variables.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.Dispose">
            <summary>
            Disposes of any active contextData variables that were not automatically cleaned up.  Sometimes this can happen if
            someone closes the connection while a DataReader is open.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.Dispose(System.Boolean)">
            <summary>
            Placeholder for a user-defined disposal routine
            </summary>
            <param name="disposing">True if the object is being disposed explicitly</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.Invoke(System.Object[])">
            <summary>
            Scalar functions override this method to do their magic.
            </summary>
            <remarks>
            Parameters passed to functions have only an affinity for a certain data type, there is no underlying schema available
            to force them into a certain type.  Therefore the only types you will ever see as parameters are
            DBNull.Value, Int64, Double, String or byte[] array.
            </remarks>
            <param name="args">The arguments for the command to process</param>
            <returns>You may return most simple types as a return value, null or DBNull.Value to return null, DateTime, or
            you may return an Exception-derived class if you wish to return an error to SQLite.  Do not actually throw the error,
            just return it!</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.Step(System.Object[],System.Int32,System.Object@)">
            <summary>
            Aggregate functions override this method to do their magic.
            </summary>
            <remarks>
            Typically you'll be updating whatever you've placed in the contextData field and returning as quickly as possible.
            </remarks>
            <param name="args">The arguments for the command to process</param>
            <param name="stepNumber">The 1-based step number.  This is incrememted each time the step method is called.</param>
            <param name="contextData">A placeholder for implementers to store contextual data pertaining to the current context.</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.Final(System.Object)">
            <summary>
            Aggregate functions override this method to finish their aggregate processing.
            </summary>
            <remarks>
            If you implemented your aggregate function properly,
            you've been recording and keeping track of your data in the contextData object provided, and now at this stage you should have
            all the information you need in there to figure out what to return.
            NOTE:  It is possible to arrive here without receiving a previous call to Step(), in which case the contextData will
            be null.  This can happen when no rows were returned.  You can either return null, or 0 or some other custom return value
            if that is the case.
            </remarks>
            <param name="contextData">Your own assigned contextData, provided for you so you can return your final results.</param>
            <returns>You may return most simple types as a return value, null or DBNull.Value to return null, DateTime, or
            you may return an Exception-derived class if you wish to return an error to SQLite.  Do not actually throw the error,
            just return it!
            </returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.Compare(System.String,System.String)">
            <summary>
            User-defined collation sequences override this method to provide a custom string sorting algorithm.
            </summary>
            <param name="param1">The first string to compare</param>
            <param name="param2">The second strnig to compare</param>
            <returns>1 if param1 is greater than param2, 0 if they are equal, or -1 if param1 is less than param2</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.ConvertParams(System.Int32,System.IntPtr)">
            <summary>
            Converts an IntPtr array of context arguments to an object array containing the resolved parameters the pointers point to.
            </summary>
            <remarks>
            Parameters passed to functions have only an affinity for a certain data type, there is no underlying schema available
            to force them into a certain type.  Therefore the only types you will ever see as parameters are
            DBNull.Value, Int64, Double, String or byte[] array.
            </remarks>
            <param name="nArgs">The number of arguments</param>
            <param name="argsptr">A pointer to the array of arguments</param>
            <returns>An object array of the arguments once they've been converted to .NET values</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.SetReturnValue(System.IntPtr,System.Object)">
            <summary>
            Takes the return value from Invoke() and Final() and figures out how to return it to SQLite's context.
            </summary>
            <param name="context">The context the return value applies to</param>
            <param name="returnValue">The parameter to return to SQLite</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.ScalarCallback(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Internal scalar callback function, which wraps the raw context pointer and calls the virtual Invoke() method.
            </summary>
            <param name="context">A raw context pointer</param>
            <param name="nArgs">Number of arguments passed in</param>
            <param name="argsptr">A pointer to the array of arguments</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.CompareCallback(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Internal collation sequence function, which wraps up the raw string pointers and executes the Compare() virtual function.
            </summary>
            <param name="ptr">Not used</param>
            <param name="len1">Length of the string pv1</param>
            <param name="ptr1">Pointer to the first string to compare</param>
            <param name="len2">Length of the string pv2</param>
            <param name="ptr2">Pointer to the second string to compare</param>
            <returns>Returns -1 if the first string is less than the second.  0 if they are equal, or 1 if the first string is greater
            than the second.</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.StepCallback(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            The internal aggregate Step function callback, which wraps the raw context pointer and calls the virtual Step() method.
            </summary>
            <remarks>
            This function takes care of doing the lookups and getting the important information put together to call the Step() function.
            That includes pulling out the user's contextData and updating it after the call is made.  We use a sorted list for this so
            binary searches can be done to find the data.
            </remarks>
            <param name="context">A raw context pointer</param>
            <param name="nArgs">Number of arguments passed in</param>
            <param name="argsptr">A pointer to the array of arguments</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.FinalCallback(System.IntPtr)">
            <summary>
            An internal aggregate Final function callback, which wraps the context pointer and calls the virtual Final() method.
            </summary>
            <param name="context">A raw context pointer</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.#cctor">
            <summary>
            Using reflection, enumerate all assemblies in the current appdomain looking for classes that
            have a SQLiteFunctionAttribute attribute, and registering them accordingly.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.RegisterFunction(System.Type)">
            <summary>
            Manual method of registering a function.  The type must still have the SQLiteFunctionAttributes in order to work
            properly, but this is a workaround for the Compact Framework where enumerating assemblies is not currently supported.
            </summary>
            <param name="typ">The type of the function to register</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.BindFunctions(DevNet.DBAccess.SQLiteDBAccess.SQLiteBase)">
            <summary>
            Called by SQLiteBase derived classes, this function binds all user-defined functions to a connection.
            It is done this way so that all user-defined functions will access the database using the same encoding scheme
            as the connection (UTF-8 or UTF-16).
            </summary>
            <remarks>
            The wrapper functions that interop with SQLite will create a unique cookie value, which internally is a pointer to
            all the wrapped callback functions.  The interop function uses it to map CDecl callbacks to StdCall callbacks.
            </remarks>
            <param name="sqlbase">The base object on which the functions are to bind</param>
            <returns>Returns an array of functions which the connection object should retain until the connection is closed.</returns>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunction.SQLiteConvert">
            <summary>
            Returns a reference to the underlying connection's SQLiteConvert class, which can be used to convert
            strings and DateTime's into the current connection's encoding schema.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunctionEx">
            <summary>
            Extends SQLiteFunction and allows an inherited class to obtain the collating sequence associated with a function call.
            </summary>
            <remarks>
            User-defined functions can call the GetCollationSequence() method in this class and use it to compare strings and char arrays.
            </remarks>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteFunctionEx.GetCollationSequence">
            <summary>
            Obtains the collating sequence in effect for the given function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.FunctionType">
            <summary>
            The type of user-defined function to declare
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.FunctionType.Scalar">
            <summary>
            Scalar functions are designed to be called and return a result immediately.  Examples include ABS(), Upper(), Lower(), etc.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.FunctionType.Aggregate">
            <summary>
            Aggregate functions are designed to accumulate data until the end of a call and then return a result gleaned from the accumulated data.
            Examples include SUM(), COUNT(), AVG(), etc.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.FunctionType.Collation">
            <summary>
            Collation sequences are used to sort textual data in a custom manner, and appear in an ORDER BY clause.  Typically text in an ORDER BY is
            sorted using a straight case-insensitive comparison function.  Custom collating sequences can be used to alter the behavior of text sorting
            in a user-defined manner.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteCallback">
            <summary>
            An internal callback delegate declaration.
            </summary>
            <param name="context">Raw context pointer for the user function</param>
            <param name="nArgs">Count of arguments to the function</param>
            <param name="argsptr">A pointer to the array of argument pointers</param>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteFinalCallback">
            <summary>
            An internal final callback delegate declaration.
            </summary>
            <param name="context">Raw context pointer for the user function</param>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteCollation">
            <summary>
            Internal callback delegate for implementing collation sequences
            </summary>
            <param name="puser">Not used</param>
            <param name="len1">Length of the string pv1</param>
            <param name="pv1">Pointer to the first string to compare</param>
            <param name="len2">Length of the string pv2</param>
            <param name="pv2">Pointer to the second string to compare</param>
            <returns>Returns -1 if the first string is less than the second.  0 if they are equal, or 1 if the first string is greater
            than the second.</returns>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.CollationTypeEnum">
            <summary>
            The type of collating sequence
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.CollationTypeEnum.Binary">
            <summary>
            The built-in BINARY collating sequence
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.CollationTypeEnum.NoCase">
            <summary>
            The built-in NOCASE collating sequence
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.CollationTypeEnum.Reverse">
            <summary>
            The built-in REVERSE collating sequence
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.CollationTypeEnum.Custom">
            <summary>
            A custom user-defined collating sequence
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.CollationEncodingEnum">
            <summary>
            The encoding type the collation sequence uses
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.CollationEncodingEnum.UTF8">
            <summary>
            The collation sequence is UTF8
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.CollationEncodingEnum.UTF16LE">
            <summary>
            The collation sequence is UTF16 little-endian
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.CollationEncodingEnum.UTF16BE">
            <summary>
            The collation sequence is UTF16 big-endian
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.CollationSequence">
            <summary>
            A struct describing the collating sequence a function is executing in
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.CollationSequence.Name">
            <summary>
            The name of the collating sequence
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.CollationSequence.Type">
            <summary>
            The type of collating sequence
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.CollationSequence.Encoding">
            <summary>
            The text encoding of the collation sequence
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.CollationSequence._func">
            <summary>
            Context of the function that requested the collating sequence
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.CollationSequence.Compare(System.String,System.String)">
            <summary>
            Calls the base collating sequence to compare two strings
            </summary>
            <param name="s1">The first string to compare</param>
            <param name="s2">The second string to compare</param>
            <returns>-1 if s1 is less than s2, 0 if s1 is equal to s2, and 1 if s1 is greater than s2</returns>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.CollationSequence.Compare(System.Char[],System.Char[])">
            <summary>
            Calls the base collating sequence to compare two character arrays
            </summary>
            <param name="c1">The first array to compare</param>
            <param name="c2">The second array to compare</param>
            <returns>-1 if c1 is less than c2, 0 if c1 is equal to c2, and 1 if c1 is greater than c2</returns>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteException">
            <summary>
            SQLite exception class.
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteException.#ctor(System.Int32,System.String)">
            <summary>
            Public constructor for generating a SQLite error given the base error code
            </summary>
            <param name="errorCode">The SQLite error code to report</param>
            <param name="extendedInformation">Extra text to go along with the error message text</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteException.#ctor(System.String)">
            <summary>
            Various public constructors that just pass along to the base Exception
            </summary>
            <param name="message">Passed verbatim to Exception</param>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteException.#ctor">
            <summary>
            Various public constructors that just pass along to the base Exception
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteException.#ctor(System.String,System.Exception)">
            <summary>
            Various public constructors that just pass along to the base Exception
            <param name="message">Passed to Exception</param>
            <param name="innerException">Passed to Exception</param>
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.SQLiteDBAccess.SQLiteException.GetStockErrorMessage(System.Int32,System.String)">
            <summary>
            Initializes the exception class with the SQLite error code.
            </summary>
            <param name="errorCode">The SQLite error code</param>
            <param name="errorMessage">A detailed error message</param>
            <returns>An error message string</returns>
        </member>
        <member name="P:DevNet.DBAccess.SQLiteDBAccess.SQLiteException.ErrorCode">
            <summary>
            Retrieves the underlying SQLite error code for this exception
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode">
            <summary>
            SQLite error codes
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Ok">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Error">
            <summary>
            SQL error or missing database
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Internal">
            <summary>
            Internal logic error in SQLite
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Perm">
            <summary>
            Access permission denied
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Abort">
            <summary>
            Callback routine requested an abort
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Busy">
            <summary>
            The database file is locked
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Locked">
            <summary>
            A table in the database is locked
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.NoMem">
            <summary>
            malloc() failed
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.ReadOnly">
            <summary>
            Attempt to write a read-only database
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Interrupt">
            <summary>
            Operation terminated by sqlite3_interrupt()
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.IOErr">
            <summary>
            Some kind of disk I/O error occurred
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Corrupt">
            <summary>
            The database disk image is malformed
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.NotFound">
            <summary>
            Table or record not found
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Full">
            <summary>
            Insertion failed because database is full
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.CantOpen">
            <summary>
            Unable to open the database file
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Protocol">
            <summary>
            Database lock protocol error
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Empty">
            <summary>
            Database is empty
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Schema">
            <summary>
            The database schema changed
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.TooBig">
            <summary>
            Too much data for one row of a table
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Constraint">
            <summary>
            Abort due to constraint violation
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Mismatch">
            <summary>
            Data type mismatch
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Misuse">
            <summary>
            Library used incorrectly
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.NOLFS">
            <summary>
            Uses OS features not supported on host
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Auth">
            <summary>
            Authorization denied
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Format">
            <summary>
            Auxiliary database format error
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Range">
            <summary>
            2nd parameter to sqlite3_bind out of range
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.NotADatabase">
            <summary>
            File opened that is not a database file
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Row">
            <summary>
            sqlite3_step() has another row ready
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteErrorCode.Done">
            <summary>
            sqlite3_step() has finished executing
            </summary>
        </member>
        <member name="T:DevNet.Cache.DataCache">
            <summary>
            数据缓存类
            </summary>
        </member>
        <member name="M:DevNet.Cache.DataCache.Clear">
            <summary>
            清除通过该类设置的所有缓存
            </summary>
        </member>
        <member name="M:DevNet.Cache.DataCache.Count">
            <summary>
            缓存数据总数
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.Cache.DataCache.GetCacheObj(System.String)">
            <summary>
            根据key获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.Cache.DataCache.SetCacheObj(System.String,System.Object)">
            <summary>
            设置缓存，如果AppSetting未配置CacheInterval缓存分钟数，则默认缓存7天
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:DevNet.Cache.DataCache.SetCacheObj(System.String,System.Object,System.DateTime,System.Web.Caching.CacheDependency)">
            <summary>
            设置缓存
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiredTime"></param>
            <param name="depanedncy"></param>
        </member>
        <member name="M:DevNet.Cache.DataCache.RemoveCacheObj(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:DevNet.DBAccess.AdoAccess.AdoDbDirect">
            <summary>
            Ado访问数据库类
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.#ctor(ADODB.Connection)">
            <summary>
            ADO Construct
            </summary>
            <param name="LocalConn"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.#ctor(System.String)">
            <summary>
            ADO Construct
            </summary>
            <param name="connectString"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.Finalize">
            <summary>
            ADO Dispose Construct
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.BeginTransaction">
            <summary>
            Start a Trans
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.RollBackTransaction">
            <summary>
            RollBackTransaction a Trans
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.CommitTransaction">
            <summary>
            Commit a Trans
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.Close">
            <summary>
            Close a Connection
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.Open">
            <summary>
            Open a Connection
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.CreateCommand">
            <summary>
            Create a DbCommand
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.CreateCommand(System.String)">
            <summary>
            Create a DbCommand
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.AddCmdParamWithValue(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            Add DbParameter to Command by value
            </summary>
            <param name="cmd"></param>
            <param name="paramName"></param>
            <param name="paramValue"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.CreateDbAdapter(System.Data.Common.DbCommand)">
            <summary>
            Create DbDataAdapter by SelectCommand
            </summary>
            <param name="selectCommand"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.CreateCommandBuilder(System.Data.Common.DbDataAdapter)">
            <summary>
            Create DbCommandBuilder
            </summary>
            <param name="da"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.ExecuteDataTable(System.Data.Common.DbCommand,System.Int32,System.Int32)">
            <summary>
            获取指定记录数集合的表
            </summary>
            <param name="selectCmd"></param>
            <param name="startIndex"></param>
            <param name="maxRecords"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.ExecuteDataTable(System.Data.Common.DbCommand,System.String)">
            <summary>
            Execute Query return DataTable
            </summary>
            <param name="selectCommand"></param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.ExecuteDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Execute Query return DataTable
            </summary>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.pFindPK(System.String,System.Data.DataColumnCollection,System.String@)">
            <summary>
            Find PKName ArrayList
            </summary>
            <param name="srcTable"></param>
            <param name="columns"></param>
            <param name="PK_NAME"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.UpdateDataTable(System.Data.DataTable,System.String)">
            <summary>
            Update by primary key
            </summary>
            <param name="dataTable"></param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDbDirect.UpdateDataTable(System.Data.DataTable,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand)">
            <summary>
            Update DataTable
            </summary>
            <param name="dataTable"></param>
            <param name="selectCommand"></param>
            <param name="insertCommand"></param>
            <param name="updateCommand"></param>
            <param name="deleteCommand"></param>
            <returns></returns>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbDirect.ADOConnection">
            <summary>
            Return a Connection
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbDirect.DbConnection">
            <summary>
            Return DbConnection
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbDirect.State">
            <summary>
            Return ConnectionState
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbDirect.Transaction">
            <summary>
            Return DbTrans
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDbDirect.ConnectionString">
            <summary>
            Get ConnectionString 
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.AdoAccess.AdoDataReader">
            <summary>
            AdoDataReader
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.Close">
            <summary>
            Close DataReader
            </summary>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.Dispose(System.Boolean)">
            <summary>
            Dispose DataReader
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetBoolean(System.Int32)">
            <summary>
            Return Boolean value
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetByte(System.Int32)">
            <summary>
            Return Byte value
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Return Bytes Exception
            </summary>
            <param name="ordinal"></param>
            <param name="dataOffset"></param>
            <param name="buffer"></param>
            <param name="bufferOffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetChar(System.Int32)">
            <summary>
            Return Char Exception
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Return Chars Exception
            </summary>
            <param name="ordinal"></param>
            <param name="dataOffset"></param>
            <param name="buffer"></param>
            <param name="bufferOffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Return DataTypeName
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetDateTime(System.Int32)">
            <summary>
            Return DateTime value
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetDecimal(System.Int32)">
            <summary>
            Return decimal value
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetDouble(System.Int32)">
            <summary>
            Return double value
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetEnumerator">
            <summary>
            Return IEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetFieldType(System.Int32)">
            <summary>
            Return FieldType
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetFloat(System.Int32)">
            <summary>
            Return float value
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetGuid(System.Int32)">
            <summary>
            Return Guid Exception
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetInt16(System.Int32)">
            <summary>
            Return short value
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetInt32(System.Int32)">
            <summary>
            Return int value
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetInt64(System.Int32)">
            <summary>
            Return long value
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetName(System.Int32)">
            <summary>
            Return name value
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetOrdinal(System.String)">
            <summary>
            Return index at ordinal
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.pAddExtraInfo(System.Int32,System.Data.DataRow)">
            <summary>
            PAddExtraInfo
            </summary>
            <param name="Index"></param>
            <param name="row"></param>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetSchemaTable">
            <summary>
            Return SchemaTable DataTable 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetString(System.Int32)">
            <summary>
            Return string value by ordinal
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetValue(System.Int32)">
            <summary>
            Return object value by ordinal
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.GetValues(System.Object[])">
            <summary>
            Return fields to values
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.IsDBNull(System.Int32)">
            <summary>
            Return IsDbNull
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.NextResult">
            <summary>
            Return NextResult
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.DBAccess.AdoAccess.AdoDataReader.Read">
            <summary>
            Return Read Boolean
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDataReader.Depth">
            <summary>
            Return 0
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDataReader.FieldCount">
            <summary>
            Return fieldCount
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDataReader.HasRows">
            <summary>
            Return is HasRows
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDataReader.IsClosed">
            <summary>
            Return IsClosed
            </summary>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDataReader.Item(System.Int32)">
            <summary>
            Return at ordinal's value
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDataReader.Item(System.String)">
            <summary>
            Return Field's value by fieldName
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:DevNet.DBAccess.AdoAccess.AdoDataReader.RecordsAffected">
            <summary>
            Return RecordsAfftected
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.TypeAffinity">
            <summary>
            SQLite has very limited types, and is inherently text-based.  The first 5 types below represent the sum of all types SQLite
            understands.  The DateTime extension to the spec is for internal use only.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.TypeAffinity.Uninitialized">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.TypeAffinity.Int64">
            <summary>
            All integers in SQLite default to Int64
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.TypeAffinity.Double">
            <summary>
            All floating point numbers in SQLite default to double
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.TypeAffinity.Text">
            <summary>
            The default data type of SQLite is text
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.TypeAffinity.Blob">
            <summary>
            Typically blob types are only seen when returned from a function
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.TypeAffinity.Null">
            <summary>
            Null types can be returned from functions
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.TypeAffinity.DateTime">
            <summary>
            Used internally by this provider
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.TypeAffinity.None">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteDateFormats">
            <summary>
            This implementation of SQLite for ADO.NET can process date/time fields in databases in only one of three formats.  Ticks, ISO8601
            and JulianDay.
            </summary>
            <remarks>
            ISO8601 is more compatible, readable, fully-processable, but less accurate as it doesn't provide time down to fractions of a second.
            JulianDay is the numeric format the SQLite uses internally and is arguably the most compatible with 3rd party tools.  It is
            not readable as text without post-processing.
            Ticks less compatible with 3rd party tools that query the database, and renders the DateTime field unreadable as text without post-processing.
            
            The preferred order of choosing a datetime format is JulianDay, ISO8601, and then Ticks.  Ticks is mainly present for legacy 
            code support.
            </remarks>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDateFormats.Ticks">
            <summary>
            Using ticks is not recommended and is not well supported with LINQ.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDateFormats.ISO8601">
            <summary>
            The ISO8601 format
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDateFormats.JulianDay">
            <summary>
            JulianDay format, which is what SQLite uses internally
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDateFormats.UnixEpoch">
            <summary>
            The whole number of seconds since the Unix epoch (January 1, 1970).
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDateFormats.InvariantCulture">
            <summary>
            Any culture-independent string value that the .NET Framework can interpret as a valid DateTime.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDateFormats.CurrentCulture">
            <summary>
            Any string value that the .NET Framework can interpret as a valid DateTime using the current culture.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteDateFormats.Default">
            <summary>
            The default format for this provider.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteJournalModeEnum">
            <summary>
            This enum determines how SQLite treats its journal file.
            </summary>
            <remarks>
            By default SQLite will create and delete the journal file when needed during a transaction.
            However, for some computers running certain filesystem monitoring tools, the rapid
            creation and deletion of the journal file can cause those programs to fail, or to interfere with SQLite.
            
            If a program or virus scanner is interfering with SQLite's journal file, you may receive errors like "unable to open database file"
            when starting a transaction.  If this is happening, you may want to change the default journal mode to Persist.
            </remarks>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteJournalModeEnum.Default">
            <summary>
            The default mode, this causes SQLite to use the existing journaling mode for the database.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteJournalModeEnum.Delete">
            <summary>
            SQLite will create and destroy the journal file as-needed.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteJournalModeEnum.Persist">
            <summary>
            When this is set, SQLite will keep the journal file even after a transaction has completed.  It's contents will be erased,
            and the journal re-used as often as needed.  If it is deleted, it will be recreated the next time it is needed.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteJournalModeEnum.Off">
            <summary>
            This option disables the rollback journal entirely.  Interrupted transactions or a program crash can cause database
            corruption in this mode!
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteJournalModeEnum.Truncate">
            <summary>
            SQLite will truncate the journal file to zero-length instead of deleting it.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteJournalModeEnum.Memory">
            <summary>
            SQLite will store the journal in volatile RAM.  This saves disk I/O but at the expense of database safety and integrity.
            If the application using SQLite crashes in the middle of a transaction when the MEMORY journaling mode is set, then the
            database file will very likely go corrupt.
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteJournalModeEnum.Wal">
            <summary>
            SQLite uses a write-ahead log instead of a rollback journal to implement transactions.  The WAL journaling mode is persistent;
            after being set it stays in effect across multiple database connections and after closing and reopening the database. A database
            in WAL journaling mode can only be accessed by SQLite version 3.7.0 or later.
            </summary>
        </member>
        <member name="T:DevNet.DBAccess.SQLiteDBAccess.SQLiteType">
            <summary>
            Struct used internally to determine the datatype of a column in a resultset
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteType.Type">
            <summary>
            The DbType of the column, or DbType.Object if it cannot be determined
            </summary>
        </member>
        <member name="F:DevNet.DBAccess.SQLiteDBAccess.SQLiteType.Affinity">
            <summary>
            The affinity of a column, used for expressions or when Type is DbType.Object
            </summary>
        </member>
        <member name="T:DevNet.Permission.InterceptorAttribute">
            <summary>
            拦截属性
            </summary>
        </member>
        <member name="M:DevNet.Permission.InterceptorAttribute.#ctor(System.Security.Permissions.SecurityAction)">
            <summary>
            保护构造方法，用于调用基类的构造方法
            </summary>
        </member>
        <member name="M:DevNet.Permission.InterceptorAttribute.#ctor(DevNet.Permission.InterceptorAction)">
            <summary>
            构造方法
            </summary>
            <param name="action">拦截动作，目前只有<see cref="F:DevNet.Permission.InterceptorAction.Demand"/></param>
        </member>
        <member name="M:DevNet.Permission.InterceptorAttribute.CreatePermission">
            <summary>
            获取权限实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevNet.Permission.InterceptorAttribute.Demand">
            <summary>
            执行拦截的方法
            </summary>
        </member>
        <member name="T:DevNet.Common.Pagination">
            <summary>
            页面数据列表分页信息
            </summary>
        </member>
        <member name="M:DevNet.Common.Pagination.#ctor">
            <summary>
            页面分页信息构造函数
            </summary>
        </member>
        <member name="M:DevNet.Common.Pagination.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> 
            页面分页信息构造函数
            </summary>
            <param name="nPageIndex"></param>
            <param name="nPageSize"></param>
            <param name="nRecordCount"></param>
        </member>
        <member name="P:DevNet.Common.Pagination.PageIndex">
            <summary>
            设置或获取当前页码，最小为 1
            </summary>
        </member>
        <member name="P:DevNet.Common.Pagination.PageSize">
            <summary>
            设置或获取页面大小，最小为 1
            </summary>
        </member>
        <member name="P:DevNet.Common.Pagination.RecordCount">
            <summary>
            设置或获取记录总数
            </summary>
        </member>
        <member name="P:DevNet.Common.Pagination.PageCount">
            <summary>
            获取页面总数，便于Web服务有效，增加空set
            </summary>
        </member>
        <member name="P:DevNet.Common.Pagination.NextPageIndex">
            <summary>
            获取下一页的页码
            </summary>
        </member>
        <member name="P:DevNet.Common.Pagination.PreviousPageIndex">
            <summary>
            获取前一页的页码
            </summary>
        </member>
    </members>
</doc>
